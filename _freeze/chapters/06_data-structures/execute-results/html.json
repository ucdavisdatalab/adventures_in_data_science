{
  "hash": "33e919d3ddb94b40fbf54aad9d9eba4d",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  html:\n    df-print: kable\n---\n\n\n\n# Data Structures {#sec-data-structures}\n\nThis lesson provides a conceptual introduction to different ways of structuring\ndata.\n\n::: {.callout-note title=\"Learning Goals\" collapse=\"false\"}\nAfter this lesson, you should be able to:\n\n* Describe the differences between several different data structures\n* Identify the structure of dataset\n* Explain the pros and cons of different data structuring approaches\n:::\n\n\n## What Are Data?\n\nMerriam-Webster's Dictionary defines data as:\n\n1. factual information (such as measurements or statistics) used as a basis for\n   reasoning, discussion, or calculation\n2. information in digital form that can be transmitted or processed\n3. information output by a sensing device or organ that includes both useful\n   and irrelevant or redundant information and must be processed to be\n   meaningful\n\nSeveral key principals are introduced in the above definition:\n\n1. data is an intermediary step leading towards some form of analysis or or\n   presentation, not typically an end in itself\n2. data comes in multiple formats, both digital and analogue\n3. data can be collected by both humans and machines\n4. not all data in a given dataset is necessarily meaningful, correct nor\n   useful\n\nData Scientists (as differentiated from statisticians or computer scientists,\nfor example) are expert in understanding the nature of data itself and the\nsteps necessary to assess the suitability of a given data set for answering\nspecific research questions and the work required to properly prepare data for\nsuccessful analysis. In the broadest terms, we call this process **data\nforensics**.\n\nThe first step in the data forensics process is understanding the format(s)\nthrough which data are stored and transferred.\n\n## Tabular Data\n\n**Tabular data** is the most ubiquitous form of data storage and the one most\nfamiliar to most users. Tabular data consists of organizing data in a table of\nrows and columns. Traditionally, each column in the table represents a field or\nvariable and each row represents an observation or entity. For example, the\ntable below shows a tabular organization of a subset of the `mtcars` dataset:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|                  |  mpg| cyl|  disp|  hp|\n|:-----------------|----:|---:|-----:|---:|\n|Mazda RX4         | 21.0|   6| 160.0| 110|\n|Mazda RX4 Wag     | 21.0|   6| 160.0| 110|\n|Datsun 710        | 22.8|   4| 108.0|  93|\n|Hornet 4 Drive    | 21.4|   6| 258.0| 110|\n|Hornet Sportabout | 18.7|   8| 360.0| 175|\n|Valiant           | 18.1|   6| 225.0| 105|\n|Duster 360        | 14.3|   8| 360.0| 245|\n|Merc 240D         | 24.4|   4| 146.7|  62|\n|Merc 230          | 22.8|   4| 140.8|  95|\n|Merc 280          | 19.2|   6| 167.6| 123|\n\n</div>\n:::\n:::\n\n\n\n\n## Tree / Document Data Structures\n\nAnother popular form of data structure is the **tree** structure, sometimes\nreferred to as a **document-based** data structure. Tree data structures\npresent data in a hierarchical tree-like structure in which all items related\nback to a single, root node. A \"Family Tree\" is a good example of tree\nstructured data:\n\n![](/images/ch06/family_tree.jpg)\n\nThe `mtcars` data from the above table can also be represented using a tree\nstructure:\n\n![](/images/ch06/mtcars_tree.jpg)\n\nThe above image visually depicts the mtcars data as a tree, which works well\nfor a human reader but is not parsable by the computer. There are a variety of\nways to represent tree data as a computer file (or data stream) so that it can\nbe read and parsed by the computer. In this class, we will cover two of the\nmost popular formats:  XML and JSON.\n\n### Structuring Data as XML\n\nXML stands for **extensible markup language**. Markup languages have been\naround since the 1960s and were originally developed as a means of adding\nstructured information to an existing unstructured text. In the days of analog\ntext preparation, professional editors typically used a blue or red pencil to\nmake notes on typed manuscripts. The use of a specially colored pen or pencil\nfor \"marking up\" documents, as the procedure was known in the industry, easily\nallowed subsequent readers to distinguish between editorial comments and\nformatting notes on typed manuscripts from the text itself. Computerized markup\nlanguages were developed as a means of allowing data specialists to markup a\ntext in a manner that would allow the computer to distinguish between textual\ncontent and meta-information (information about the text) when both types of\ninformation appear in the same file.\n\nXML is the most widely used form of markup today. In fact, nearly every webpage\nthat you have ever viewed is actually an XML document that contains both\ncontent to be displayed and instructions for the computer on how to display\nthat content embedded in the file using XML **tags**, which are simply\ninstructions contained with the special characters `<` and `>`. For example,\nconsider the following short email text:\n\n```\nTo: Tavi\nFrom: Jonna\nSubject: Meeting\nDate: Thursday, February 4, 2021 at 2:46 PM\n\nDon't forget about meeting with Sarah next week, 2pm in room 242.\n\nThanks,\n\nJonna\n```\n\nThis email contains quite a bit of structured email (sender, receiver,\ndate/time, etc.), but there is no easy way for the computer easily extract this\nstructure. We can solve this problem by using XML to embed information about\nthe structure directly in the document as follows:\n\n```\n<head>\n   <to>Tavi</to>\n   <from>Jonna</from>\n   <subject>Meeting</subject>\n   <datetime>\n      <dayofweek>Thursday</dayofweek>\n      <month>February</month>\n      <day>4</day>\n      <year>2021</year>\n      <time>2:46 PM</time>\n   </datetime>\n</head>\n\n<body>\n   Don't forget about meeting with Sarah next week, 2pm in room 242.\n\n   Thanks,\n\n   <signature>Jonna</signuature>\n</body>\n```\n\nBy using XML, we are able to identify specific information in the email in a\nway that the computer is a capable of parsing. This allows us to use\ncomputational methods to easily extract information in bulk from many emails\nand it also allows us to program a computer program, such as an email client,\nto organize and properly display all of the parts of the email.\n\nThe above XML example illustrates several important aspects of XML:\n\n1. All XML tags are enclosed in `<` and `>` symbols.\n2. There are 2 primary types of tags, **opening tags**, which designate the\n   beginning character that is defined by the tag, and **closing tags**, which\n   designate the end of the portion of the text to be associated with the\n   opening tag.\n3. Closing tags are always indicated by slash character, as in `</TAG>`, where\n   `TAG` is the name of the opening tag that is being closed.\n4. Tags be be embedded within each other in a tree-like structure. However, any\n   tags opened within a tag must be closed before that tag can be closed. For\n   example, ```<name><first>John</first> <last>Doe</last></name>``` is valid,\n   but ```<name><first>John</first> <last>Doe</name></last>``` is not valid.\n\nWhile XML was originally developed as a means of embedding meta information\nabout a text directly in a text, it also quickly evolved into a stand-alone\nmeans of representing tree-structured data for exchange between computer\nsystems. To this end, many computer applications use XML to store, share, and\nretrieve data. For example, we can represent the data in our truncated `mtcars`\ndataset as XML as follows:\n\n```\n<cars>\n   <make id=\"mazda\">\n      <model id=\"RX4\">\n         <mpg>21.0</mpg>\n         <cyl>6</cyl>\n         <disp>160.0</disp>\n         <hp>110</hp>\n      </model>\n      <model id=\"RX4 Wag\">\n         <mpg>21.0</mpg>\n         <cyl>6</cyl>\n         <disp>160.0</disp>\n         <hp>110</hp>\n      </model>\n   </make>\n   <make id=\"Datsun\">\n      <model id=\"710\">\n         <mpg>22.8</mpg>\n         <cyl>4</cyl>\n         <disp>108.0</disp>\n         <hp>93</hp>\n      </model>\n   </make>\n   <make id=\"Hornet\">\n      <model id=\"4 Drive\">\n         <mpg>21.4</mpg>\n         <cyl>6</cyl>\n         <disp>258.0</disp>\n         <hp>110</hp>\n      </model>\n      <model id=\"Sportabout\">\n         <mpg>18.7</mpg>\n         <cyl>8</cyl>\n         <disp>360.0</disp>\n         <hp>175</hp>\n      </model>\n   </make>\n   <make id=\"Valiant\">\n      <model id=\"valiant\">\n         <mpg>18.1</mpg>\n         <cyl>6</cyl>\n         <disp>225.0</disp>\n         <hp>105</hp>\n      </model>\n   </make>\n   <make id=\"Duster\">\n      <model id=\"360\">\n         <mpg>14.3</mpg>\n         <cyl>8</cyl>\n         <disp>360.0</disp>\n         <hp>245</hp>\n      </model>\n   </make>\n   <make id=\"Merc\">\n      <model id=\"240D\">\n         <mpg>24.4</mpg>\n         <cyl>4</cyl>\n         <disp>146.7</disp>\n         <hp>62</hp>\n      </model>\n      <model id=\"230\">\n         <mpg>22.8</mpg>\n         <cyl>4</cyl>\n         <disp>140.8</disp>\n         <hp>95</hp>\n      </model>\n      <model id=\"280\">\n         <mpg>19.2</mpg>\n         <cyl>6</cyl>\n         <disp>167.6</disp>\n         <hp>123</hp>\n      </model>\n   </make>\n</cars>\n```\n\nFor an XML dataset to be technically valid, the tags used to markup the dataset\nmust themselves be defined according to a **schema**, another XML document that\ndefines all tags that can be used in marking up a dataset and the allowable\ntree structure of the markup (for example, which tags can be parents of which\nother tags, etc.). You do not need to understand, or even know, the schema\nbeing used to present data in order to read and parse an XML document. However,\nschemas are extremely useful (and often necessary) for building applications\nthat perform advanced processing of XML documents, such as web browsers, email\nclients, etc.\n\n::: {.callout-note title=\"See also\"}\nFor more information on XML and XML schemas, see the [W3Schools XML\nTutorial][w3schools-xml].\n:::\n\n[w3schools-xml]: https://www.w3schools.com/xml/\n\n\n### Structuring Data as JSON\n\nXML provides an excellent framework for encoding, saving, and transferring all\nkinds of data, and it was the dominant mode of transferring data across the\ninternet for many years. However, XML has an Achilles' Heel from the data\ntransfer perspective: a lack of sparsity. If you look closely at the XML\n`mtcars` data set example above, you will note that the markup accounts for\nmore of the total characters in the document than the data itself. In a world\nwhere data is regularly being exchanged in real time across networks, the use\nof XML can result in the necessity to exchange a lot more data to accomplish\nthe same task. This adds both time and cost to every data transaction.\n\n**JavaScript object notation** (JSON) was developed as a standard to address\nthis problem and provides a sparse framework for representing data that\nintroduces minimal, non-data elements into the overall data structure. JSON\nuses a key/value pair structure to represent data elements:\n\n```json\n\"model\": \"RX4\"\n```\n\nIndividual data elements are then grouped to reflect more complex data\nstructures:\n\n```json\n{\"model\": {\"id\": \"2\", \"hp\": \"120\"}}\n```\n\nThe example below shows the subsetted mtcars dataset represented as JSON. Note\nthe use of the `[` character to indicated repeated elements in the data:\n\n```json\n{\n\t\"cars\": [{\n\t\t\t\"make\": \"Mazda\",\n\t\t\t\"model\": [{\n\t\t\t\t\t\"id\": \"RX4\",\n\t\t\t\t\t\"mpg\": \"21.0\",\n\t\t\t\t\t\"cyl\": \"6\",\n\t\t\t\t\t\"disp\": \"160.0\",\n\t\t\t\t\t\"hp\": \"110\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"RX4 Wag\",\n\t\t\t\t\t\"mpg\": \"21.0\",\n\t\t\t\t\t\"cyl\": \"6\",\n\t\t\t\t\t\"disp\": \"160.0\",\n\t\t\t\t\t\"hp\": \"110\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"make\": \"Datsun\",\n\t\t\t\"model\": {\n\t\t\t\t\"id\": \"710\",\n\t\t\t\t\"mpg\": \"22.8\",\n\t\t\t\t\"cyl\": \"4\",\n\t\t\t\t\"disp\": \"108.0\",\n\t\t\t\t\"hp\": \"93\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"make\": \"Hornet\",\n\t\t\t\"model\": [{\n\t\t\t\t\t\"id\": \"4 Drive\",\n\t\t\t\t\t\"mpg\": \"21.4\",\n\t\t\t\t\t\"cyl\": \"6\",\n\t\t\t\t\t\"disp\": \"258.0\",\n\t\t\t\t\t\"hp\": \"110\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"Sportabout\",\n\t\t\t\t\t\"mpg\": \"18.7\",\n\t\t\t\t\t\"cyl\": \"8\",\n\t\t\t\t\t\"disp\": \"360.0\",\n\t\t\t\t\t\"hp\": \"175\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"make\": \"Valiant\",\n\t\t\t\"model\": {\n\t\t\t\t\"id\": \"valiant\",\n\t\t\t\t\"mpg\": \"18.1\",\n\t\t\t\t\"cyl\": \"6\",\n\t\t\t\t\"disp\": \"225.0\",\n\t\t\t\t\"hp\": \"105\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"make\": \"Duster\",\n\t\t\t\"model\": {\n\t\t\t\t\"id\": \"360\",\n\t\t\t\t\"mpg\": \"14.3\",\n\t\t\t\t\"cyl\": \"8\",\n\t\t\t\t\"disp\": \"360.0\",\n\t\t\t\t\"hp\": \"245\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"make\": \"Merc\",\n\t\t\t\"model\": [{\n\t\t\t\t\t\"id\": \"240D\",\n\t\t\t\t\t\"mpg\": \"24.4\",\n\t\t\t\t\t\"cyl\": \"4\",\n\t\t\t\t\t\"disp\": \"146.7\",\n\t\t\t\t\t\"hp\": \"62\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"230\",\n\t\t\t\t\t\"mpg\": \"22.8\",\n\t\t\t\t\t\"cyl\": \"4\",\n\t\t\t\t\t\"disp\": \"140.8\",\n\t\t\t\t\t\"hp\": \"95\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"280\",\n\t\t\t\t\t\"mpg\": \"19.2\",\n\t\t\t\t\t\"cyl\": \"6\",\n\t\t\t\t\t\"disp\": \"167.6\",\n\t\t\t\t\t\"hp\": \"123\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n::: {.callout-note title=\"See also\"}\nFor information on the JSON format, see the [Tutorials Point JSON\nTutorial][tp-json].\n\nYou can also use the [JSONLint JSON Validator][jsonlint] to check the syntax of\nany JSON representation.\n:::\n\n[tp-json]: https://www.tutorialspoint.com/json/index.htm\n[jsonlint]: https://jsonlint.com/\n\n\n## Relational Databases\n\n*Relational databases**, frequently referred to as **relational database\nmanagement systems** (RDBMS), provide another way of structuring data. Unlike\ntabular, XML, and JSON data representations, RDBMS data is not easily human\nreadable, and specialized software is usually required to interact with data\nstored as relational data. Most programming environments (including R) provide\nspecialized drivers for communicating with RDBMS in order to facilitate working\nwith data stored in these systems.\n\nRDBMS have three primary purposes as a data storage format:\n\n1. To reduce duplication of data;\n2. To speed-up access and insertion of new data;\n3. To insure data integrity.\n\nItems 2 and 3 above are accomplished at the software level, by deploying strict\nchecks on data input, complex data indexing systems, and implementing\nredundant, automated, backup systems, to name just a few of the functionalities\noffered by RDBMS. Item 1 above, reducing duplication of data, is accomplished\nby using a specific, **relational** data structure that encourages the use of\ncontrolled lists of data mapped to individual observations. Looking at our\n`mtcars` subset data, for example, we see that while there are ten\nobservations, there are only 6 makes of cars. To represent this in RDBMS, we\nfirst create a **table**, a named collection of data, that contains a unique\nlist of car makes:\n\n::: {#fig-make-table}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| id|Make    |\n|--:|:-------|\n|  1|Mazda   |\n|  2|Datsun  |\n|  3|Hornet  |\n|  4|Valiant |\n|  5|Duster  |\n|  6|Merc    |\n\n</div>\n:::\n:::\n\n\n\n\n`MAKE_TABLE`\n:::\n\nOnce we have a table of unique lists, we then create and populate a table of\nour cars, associating each car with its appropriate make from the `MAKE_TABLE`\ntable:\n\n::: {#fig-cars-table}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Make|Model      |  mpg| cyl|  disp|  hp|\n|----:|:----------|----:|---:|-----:|---:|\n|    1|RX4        | 21.0|   6| 160.0| 110|\n|    1|RX4 Wag    | 21.0|   6| 160.0| 110|\n|    2|710        | 22.8|   4| 108.0|  93|\n|    3|4 Drive    | 21.4|   6| 258.0| 110|\n|    3|Sportabout | 18.7|   8| 360.0| 175|\n|    4|Valiant    | 18.1|   6| 225.0| 105|\n|    5|360        | 14.3|   8| 360.0| 245|\n|    6|240D       | 24.4|   4| 146.7|  62|\n|    6|230        | 22.8|   4| 140.8|  95|\n|    6|280        | 19.2|   6| 167.6| 123|\n\n</div>\n:::\n:::\n\n\n\n\n`CARS_TABLE`\n:::\n\nIn the above table, we only **normalized** the car `Make` field. In a fully\nnormalized RDBMS data structure, we would also create a control table for the\n`Model` field in anticipation of the fact that we could have more than one\nobservation for a given model. Fully normalized RBDMS data structures use\ncontrol tables for all fields that contain string data.\n\nThe image below shows a sample **entry relationship diagram** (ERD) for a more\ncomplex dataset relating to course offerings and enrollments. Each line\nconnecting two tables marks a field in a \"join\" table that uses the `id` field\nin a control table (known as a **foreign key**) to associate information in the\ncontrol table with the records in the join table.\n\n![](/images/ch06/sql_erd_example.png)\n\n\n## Non-Hierarchical Relational Data\n\nIn the era of the social network, it is becoming increasingly necessary to\nrepresent relationships between entities that are not hierarchical. Unlike a\nfamily tree, the fact that you are connected to someone on Facebook or\nInstagram does not imply any type of hierarchical relationship. Such networks\nare typically represented using the **graph** data structure:\n\n![](/images/ch06/social_network.jpeg)\n\nGraphs consist of collections of **vertices** or **nodes**, the entities being\ngraphed, and **edges**, the relationships between nodes.\n\n![](/images/ch06/graph-parts.jpg)\n\nAnother important aspect of graph data is the concept of **directionality**. A\ndirected graph indicates the direction of the relationship identified by the\nedge. We might, for example, wish to draw edges that indicate that one node was\ninfluenced by another node, in which case we could identify an \"influence\" edge\nand use directionality to indicate who influenced whom:\n\n![](/images/ch06/directed-vs-undirected-graph.jpg)\n\nGraph data can be stored and or transferred using any of the data formats\ndiscussed above or using specialized graph databases management software.\n\n## Geospatial Data\n\n**Geospatial data** represents a final type of data with its own unique data\nstructure. Geospatial data is unique because it always relates directly to the\nphysical world, and because it relies on world-wide standards which have been\nin development and communally accepted for hundreds of years. Because of its\nuniqueness as a data type, geospatial data is covered as a stand-alone topic in\n@sec-geospatial-data.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}