{
  "hash": "49c2fe1fef84e86ebb6d592ab10b1308",
  "result": {
    "engine": "knitr",
    "markdown": "# Optical Character Recognition\n\nThis lesson focuses on extracting data from non-digital sources, such as\nprinted documents, using several packages for optical character recognition\n(OCR).\n\n::: {.callout-note title=\"Learning Goals\" collapse=\"false\"}\nAfter this lesson, you should be able to:\n\n* Explain what OCR is and how it \"reads\"\n* Explain how OCR is used\n* Differentiate between how `print` and `message` represent formatting\n* Describe different strategies for improving OCR accuracy\n:::\n\n\n## What is Optical Character Recognition?\n\nMuch of the data we've used in the course thus far has been **born-digital**.\nThat is, we've used data that originates from a digital source and does not\nexist elsewhere in some other form. Think back, for example, to the lecture on\nstrings in R (@sec-strings-and-regular-expressions): your homework required you\nto type text directly into RStudio, manipulate it, and print it to screen. But\nmillions, even billions, of data-rich documents do not originate from digital\nsources. The United States Census, for example, dates back to 1790; we still\nhave these records and could go study them to get a sense of what the\npopulation was like hundreds of years ago. Likewise, printing and publishing\nfar precedes the advent of computers; much of the literary record is still\nbound up between the covers books or stowed away in archives. Computers,\nhowever, can't read the way we read, so if we wanted to use digital methods to\nanalyze such materials, we'd need to convert them into a computationally\ntractable form. How do we do so?\n\nOne way would be to transcribe documents by hand, either by typing out **plain\ntext** versions with word processing software or by using other data entry\nmethods like keypunching to record the information those documents contain.\nAmazon's Mechanical Turk service is an example of this kind of data entry. It's\nalso worth noting that, for much of the history of computing, data entry was\nhighly gendered and considered to be \"dumb\", secretarial work that young women\nwould perform. Much of the divisions between \"cool\" coding and computational\ngrunt work that, in a broad, cultural sense, continue to inform how we think\nabout programming, and indeed who gets to program, stem from such perceptions.\nIn spite of (or perhaps because of) such perceptions, huge amounts of data owe\ntheir existence to manual data entry. That said, the process itself is\nexpensive, time consuming, error-prone, and, well, dull.\n\n**Optical character recognition**, or OCR, is an attempt to offload the work of\ndigitization onto computers. Speaking in a general sense, this process ingests\nimages of print pages (such as those available on [Google Books][google-books]\nor [HathiTrust][hathi-trust]), applies various **preprocessing** procedures to\nthose images to make them a bit easier to read, and then scans through them,\ntrying to match the features it finds with a \"vocabulary\" of text elements it\nkeeps as a point of reference. When it makes a match, OCR records a character\nand enters it into a **text buffer** (a temporary data store). Oftentimes this\nbuffer also includes formatting data for spaces, new lines, paragraphs, and so\non. When OCR is finished, it outputs its matches as a data object, which you\ncan then further manipulate or analyze using other code.\n\n[google-books]: https://books.google.com/\n[hathi-trust]: https://www.hathitrust.org/\n\n## Loading Page Images\n\nOCR \"reads\" by tracking pixel variations across page images. This means every\npage you want to digitize must be converted into an image format. For the\npurposes of introducing you to OCR, we won't go through the process of creating\nthese images from scratch; instead, we'll be using ready-made examples. The\nmost common page image formats you'll encounter are PDF and PNG. They're\nlightweight, portable, and usually retain the image quality OCR software needs\nto find text.\n\nThe pdftools package is good for working with these files:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"pdftools\")\nlibrary(\"pdftools\")\n```\n:::\n\n\n\n\nOnce you've downloaded/installed it, you can load a PDF into RStudio from your\ncomputer by entering its path as a string and assigning that string to a\nvariable, like so:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdf <- \"data/pdf_sample.pdf\"\n```\n:::\n\n\n\n\nNote that we haven't used a special reater function, like `read.csv` or\n`readRDS`. The pdftools package will grab this file from its location and load\nit properly when you run a process on it.\n\n::: {.callout-note}\nYou can also just write the string out in whatever function you want to call,\nbut we'll keep our `pdf` variable for the sake of clarity.\n:::\n\nThe same method works with web addresses. We'll be using web material. First,\nwrite out an address and assign it to a variable.\n\n```r\npdf <- \"https://datalab.ucdavis.edu/adventures-in-datascience/pdf_sample.pdf\"\n```\n\nSome PDF files will have text data already encoded into them. This is\nespecially the case if someone made a file with word processing software (like\nwhen you write a paper in Word and email a PDF to your TA or professor). You\ncan check whether a PDF has text data with the `pdf_text` function. Assign the\nfunction's output to a variable and print it to screen with `message`, like so:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_data <- pdf_text(pdf)\nmessage(text_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\n\n\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\n\n                                             The quick brown fox jumps over the lazy dog.\n                                             The quick brown fox jumps over the lazy dog.\n                                             The quick brown fox jumps over the lazy dog.\n                                             The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\n                       The quick brown fox jumps over the lazy dog.\n                       The quick brown fox jumps over the lazy dog.\n                       The quick brown fox jumps over the lazy dog.\n                       The quick brown fox jumps over the lazy dog.\n                       The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\n\n                                               The quick brown fox jumps over the lazy dog.\n                                               The quick brown fox jumps over the lazy dog.\n                                               The quick brown fox jumps over the lazy dog.\n                                               The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\n                       The quick brown fox jumps over the lazy dog.\n                       The quick brown fox jumps over the lazy dog.\n                       The quick brown fox jumps over the lazy dog.\n                       The quick brown fox jumps over the lazy dog.\n```\n\n\n:::\n:::\n\n\n\n\nNotice the printout recreates the original formatting from the PDF. If you were\nto use the `print` function on the text output, you'd see all the line breaks\nand spaces `pdf_text` created to match its output with the file. This\nre-creation would be even more apparent if you were to save the output to a new\nfile with `write`. Doing so would produce a close, plain text approximation of\nthe original PDF.\n\nYou can also process multi-page PDF files with `pdf_text`. It can transcribe\nwhole books and will keep them in a single text buffer, which you can then\nassign to a variable or save to a file. Keep in mind, however, that if your PDF\nfiles have headers, footers, page numbers, chapter breaks, or other such\nparatextual information, `pdf_text` will include these in its output.\n\nIf, when you run `pdf_text`, you find that your file already contains text\ndata, you're set! There's no need to perform OCR and you can immediately start\nworking with your data. However, if you run the function and find that it\noutputs a blank character string, you'll need to OCR it. The next section shows\nyou how.\n\n\n## Running OCR\n\nFirst, you'll need to download/install another package, tesseract, which\ncomplements pdftools. The latter only loads/reads PDFs, whereas tesseract\nactually performs OCR. Download/install tesseract:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"tesseract\")\nlibrary(\"tesseract\")\n```\n:::\n\n\n\n\nLet's use a different PDF to try out tesseract:\n\n```r\nnew_pdf <- \"https://jeroen.github.io/images/ocrscan.pdf\"\n```\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nTo run OCR on this PDF, use the following:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nocr_output <- ocr(new_pdf)\n```\n:::\n\n\n\n\nPrint the output to screen with `message` and see if the process worked:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(ocr_output)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTHE SLEREXE COMPANY LIMITED\nSAPORS LANE - BOOLE - DORSET - BH 25 8ER\ne sous (4513) 617 - Tk 12345\nOur Ref. 350/BIC/EAC 186 Janvary, 1972.\nDe. PN, Cundall,\nKining Surveys Lid.,\nHolroyd Road,\nReading,\nBerks.\nDear Pece,\n\nPernit ne to introduce you to the facility of facsinile\ntransmission.\n\nIn facainile a photocell is coused to perforn a raster scan over\nthe subject copy. The varistions of princ density on the docunent\ncause the photecell o generate an analogous electrical video signal.\nThis signal is used to mdulate a carrier, vhich is cransmitted to o\ncemote destination over & radio or cable commnications link.\n\n¢ the remote cerminal, demodulation reconstructs the video\nsignal, which is used to modulate the density of print produced by @\nprinting device. Tnis device is scanning in 4 raster scan synchronised\nUich that at the cransmitring terminal. As & result, a facsimile\ncopy of the subject document is produced.\n\nProbably you have uees for this facility in your organisation.\n\nYours sincerely,\nP.J. cross\nGroup Leader - Facsinile Research\n```\n\n\n:::\n:::\n\n\n\n\nVoila! You've just digitized text. The formatting is a little off, but things\nlook good overall. And most importantly, it looks like everything has been\ntranscribed correctly.\n\nAs you ran this process, you might've noticed that a new PNG file briefly\nappeared on your computer. This is because tesseract converts the PDF file to\nPNG file as part of its behind-the-scenes pre-processing work and silently\ndeletes the PNG file when it finishes running. If you have a collection of PDF\nfiles that you'd like to OCR, it can sometimes be faster and less memory\nintensive to convert them all to PNG files first. You can perform this\nconversion like so:\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npng <- pdf_convert(\n  new_pdf, format = \"png\", filenames = \"images/ch11/png_example.png\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in sprintf(filenames, pages, format): 2 arguments not used by format\n'images/ch11/png_example.png'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConverting page 1 to images/ch11/png_example.png... done!\n```\n\n\n:::\n:::\n\n\n\n\nIn addition to returning the a PNG object in your R session, the `pdf_convert`\nfunction will also save the file in your working directory. You could, for\nexample, use a for-loop and a vector of paths to PDF files to convert all of\nthem to PNG files. Since `pdf_convert` saves them to disk, they can be stored\nuntil you're ready to OCR them.\n\n```r\npdfs <- c(\"list.pdf\", \"of.pdf\", \"files.pdf\", \"to.pdf\", \"convert.pdf\")\noutfiles <- c(\"list.png\", \"of.png\", \"files.png\", \"to.png\", \"convert.png\")\n\nfor (i in 1:length(pdfs)) {\n  pdf_convert(pdfs[i], format=\"png\", filenames=outfiles[i])\n}\n```\n\nThe `ocr` function works with a number of different file types (typically\nimages). For instance, it accepts PNGs as well as PDFs:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng_ocr_output <- ocr(png)\n```\n:::\n\n\n\n\n## Accuracy\n\nIf you use `message` to print the output from OCRing the PNG file in the\nexample above, you might notice that the text is messier than it was when we\nused `pdf_text_ocr`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(png_ocr_output)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTHE SLEREXE COMPANY LIMITED\nSAPORS LANE - BOOLE - DORSET - BH 25 8ER\ne sous (4513) 617 - Tk 12345\nOur Ref. 350/BIC/EAC 186 Janvary, 1972.\nDe. PN, Cundall,\nKining Surveys Lid.,\nHolroyd Road,\nReading,\nBerks.\nDear Pece,\n\nPernit ne to introduce you to the facility of facsinile\ntransmission.\n\nIn facainile a photocell is coused to perforn a raster scan over\nthe subject copy. The varistions of princ density on the docunent\ncause the photecell o generate an analogous electrical video signal.\nThis signal is used to mdulate a carrier, vhich is cransmitted to o\ncemote destination over & radio or cable commnications link.\n\n¢ the remote cerminal, demodulation reconstructs the video\nsignal, which is used to modulate the density of print produced by @\nprinting device. Tnis device is scanning in 4 raster scan synchronised\nUich that at the cransmitring terminal. As & result, a facsimile\ncopy of the subject document is produced.\n\nProbably you have uees for this facility in your organisation.\n\nYours sincerely,\nP.J. cross\nGroup Leader - Facsinile Research\n```\n\n\n:::\n:::\n\n\n\n\nThis doesn't have to do with the PNG file format per se but rather with the way\nwe created our file. If you open it, you'll see that it's quite blurry, which\nhas made it harder for `ocr` to match the text it represents:\n\n::: {#fig-blurry-page}\n![](/images/ch11/blurry_page_image.png)\n:::\n\nThis blurriness is because `pdf_convert` defaults to 72 dots per inch (DPI).\n**DPI** is a measure of how many pixels, or _dots_, a digital image file uses\nto represent an inch of the image. DPI quantifies resolution and originated in\ninkjet printing. More pixels means higher image resolution, though this comes\nwith a trade off: images with a high DPI are also bigger and take up more space\non your computer. Usually, a DPI of 150 is sufficient for most OCR jobs,\nespecially if your documents were printed with technologies like typewriters,\ndot matrix printers, and so on, and if they feature fairly legible typefaces\n(Times New Roman, for example). A DPI of 300, however, is ideal. You can set\nthe DPI in `pdf_convert` by adding a `dpi` argument in the call:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhi_res_png <- pdf_convert(\n  new_pdf, format=\"png\", dpi=150,\n  filenames=\"images/ch11/hi_res_png_example.png\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in sprintf(filenames, pages, format): 2 arguments not used by format\n'images/ch11/hi_res_png_example.png'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConverting page 1 to images/ch11/hi_res_png_example.png... done!\n```\n\n\n:::\n:::\n\n\n\n\nAnother function, `ocr_data`, outputs a data frame that contains all of the\nwords tesseract found when it scanned through your image, along with a column\nof **confidence scores**. These scores, which range from 0-100, provide\nvaluable information about how well the OCR process has performed, which in\nturn may tell you whether you need to modify your PDF or PNG files further\nbefore OCRing them (more on this below). Generally, you can trust scores of 93\nand above.\n\nTo get confidence scores for an OCR job, call `ocr_data` and subset the\n`confidence` column, like so:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nocr_data <- ocr_data(hi_res_png)\nconfidence_scores <- ocr_data$confidence\nconfidence_scores\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 92.00555 92.16185 91.26955 91.26955 93.30071 92.80251 93.25327 71.22106\n  [9] 93.01385 87.86584 89.25087 89.25087 39.46595 39.46595 96.18760 92.64400\n [17] 88.31395 96.62357 91.38167 88.73389 88.73389 87.54987 87.54987 92.04705\n [25] 89.52077 91.29449 90.80710 92.46021 92.75455 89.72379 92.27145 92.01097\n [33] 91.00894 89.22992 91.89604 91.02854 92.30912 90.34227 90.34227 91.70280\n [41] 92.35736 91.17986 91.17986 92.30919 89.62785 82.76822 40.42221 91.66215\n [49] 91.92680 93.24316 90.77785 90.77785 91.95331 91.95331 92.47021 93.19882\n [57] 91.73550 91.52353 91.88087 61.49971 91.50322 92.83280 88.38924 88.38924\n [65] 92.01638 92.67615 91.98049 43.38534 90.48783 92.81612 92.41699 91.47611\n [73] 91.84003 91.84003 92.20630 86.01997 91.97392 92.16437 91.10802 92.11120\n [81] 89.69808 92.23833 92.46779 91.11872 91.73578 91.94142 91.98083 92.07896\n [89] 92.07896 92.64109 91.36734 91.36734 91.05901 92.81266 92.59015 91.31464\n [97] 90.42278 90.42278 92.18396 92.17403 92.28313 91.59138 90.33145 92.01377\n[105] 92.01377 91.19365 91.39406 91.58421 79.49812 91.90497 91.70367 91.50892\n[113] 92.86395 93.07679 91.78714 92.10359 92.12737 91.94938 89.91416 91.05914\n[121] 92.03944 93.12405 93.26999 93.26999 92.23213 90.81768 70.74520 92.39217\n[129] 89.55022 86.20355 89.34053 88.06285 92.31555 93.13564 92.01375 91.13263\n[137] 91.13263 92.17674 92.80893 91.49842 90.36536 90.36536 91.31169 92.65086\n[145] 92.95564 91.97475 91.96663 91.11794 91.92394 91.60635 91.32370 91.32370\n[153] 91.62907 93.08089 92.95688 92.60538 92.07363 91.69480 92.84332 92.31062\n[161] 91.96275 91.96792 91.56029 91.68050 92.09031 84.39836 88.10213 92.19061\n[169] 92.44096 93.29742 92.41998 91.57234 84.95621 85.53573 85.33029 91.52122\n[177] 96.01897 88.61853 82.43198 89.51816 77.73746 76.97222 71.24612 58.29185\n[185] 66.72427 46.87411\n```\n\n\n:::\n:::\n\n\n\n\nThe mean is a good indicator of the overall OCR quality:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfidence_mean <- mean(confidence_scores)\nconfidence_mean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 88.93843\n```\n\n\n:::\n:::\n\n\n\n\nLooks pretty good, though there were a few low scores that dragged the score\ndown a bit. Let's look at the median:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfidence_median <- median(confidence_scores)\nconfidence_median\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 91.68765\n```\n\n\n:::\n:::\n\n\n\n\nWe can work with that!\n\nIf we want to check our output a bit more closely, we can do two things. First,\nwe can look directly at `ocr_data` and compare, row by row, a given word and\nits confidence score.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ocr_data, 25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          word confidence              bbox\n1       SAPORS   92.00555   422,194,497,208\n2         LANE   92.16185   508,194,560,208\n3            -   91.26955   570,203,575,205\n4        BOOLE   91.26955   585,193,651,208\n5            -   93.30071   661,202,666,205\n6       DORSET   92.80251   676,193,755,208\n7            -   93.25327   764,203,769,205\n8         BH25   71.22106   780,193,831,208\n9            8   93.01385   842,193,850,208\n10          ER   87.86584   856,194,883,208\n11   TELEPHONE   89.25087   449,232,534,243\n12       BOOLE   89.25087   544,232,589,243\n13        (945   39.46595   600,229,634,246\n14         13)   39.46595   640,229,664,246\n15       51617   96.18760   675,229,719,244\n16           -   92.64400   730,237,735,240\n17       TELEX   88.31395   746,232,792,243\n18      123456   96.62357   804,228,857,244\n19         Our   91.38167   211,392,246,408\n20        Ref.   88.73389   261,391,306,407\n21 350/PJC/EAC   88.73389   325,389,459,409\n22        18th   87.54987   863,389,910,405\n23    January,   87.54987  924,389,1020,408\n24       1972.   92.04705 1038,388,1095,405\n25         Dr.   89.52077   212,492,244,508\n```\n\n\n:::\n:::\n\n\n\n\nThat's a lot of information though. Something a little more sparse might be\nbetter. We can use base R's `table` function to count the number of times\nunique words appear in the OCR data. We do this with the `word` column in our\n`ocr_data` variable from above:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nocr_vocabulary <- table(ocr_data$word)\nocr_vocabulary <- as.data.frame(ocr_vocabulary)\n```\n:::\n\n\n\n\nLet's look at the first 30 words:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ocr_vocabulary, 30)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Var1 Freq\n1               -    5\n2               .    1\n3            (945    1\n4               1    1\n5          123456    1\n6             13)    1\n7            18th    1\n8           1972.    1\n9            2038    1\n10    350/PJC/EAC    1\n11          51617    1\n12              8    1\n13             80    1\n14              a    9\n15             an    1\n16      analogous    1\n17             As    1\n18             at    1\n19             At    1\n20         Berks.    1\n21           BH25    1\n22          BOOLE    2\n23             by    1\n24          cable    1\n25       carrier,    1\n26          cause    1\n27         caused    1\n28 communications    1\n29           copy    1\n30          copy.    1\n```\n\n\n:::\n:::\n\n\n\n\nThis representation makes it easy to spot errors like discrepancies in\nspelling. We could correct those either manually or with string matching. One\nway to further examine this table is to look for words that only appear once or\ntwice in the output; among such entries you'll often find misspellings. The\ntable does, however, have its limitations. Looking at this data can quickly\nbecome overwhelming if you send in too much text. Additionally, notice that\npunctuation \"sticks\" to words and that uppercase and lowercase variants of\nwords are counted separately, rather than together. These quirks are fine,\nuseful even, if we're just spot-checking for errors, but we'd need to further\nclean this data if we wanted to use it in computational text analysis. A later\nlecture will discuss other methods that we can use to clean text.\n\nWhen working in a data-forensic mode with page images, it's a good idea to pull\na few files at random and run them through `ocr_data` to see what you're\nworking with. OCR accuracy is often wholly reliant on the quality of the page\nimages, and most of the work that goes into digitizing text involves properly\npreparing those images for OCR. Adjustments include making sure images are\nconverted to black and white, increasing image contrast and brightness,\nincreasing DPI, and rotating images so that their text is more or less\nhorizontal. The tesseract package performs some of these tasks itself, but you\ncan also do them ahead of time and often you'll have more control over quality\nthis way. The tesseract documentation goes into detail about what you can do to\nimprove accuracy before even opening R; we can't cover this in depth, but keep\nthe resource in mind as you work with this type of material. And remember: the\nonly way to completely trust your accuracy is to go through the OCR output\nyourself. It's a very common thing to have to make small tweaks to output. In\nthis sense, we haven't quite left the era of hand transcription.\n\n## Unreadable Text\n\nAll that said, these various strategies for improving accuracy will only get\nyou so far if your page images are composed in a way OCR just can't read. OCR\nsystems contain a lot of in-built assumptions about what \"normal\" text is, and\nthey are incredibly brittle when they encounter text that diverges from that\nnorm. Early systems, for example, required documents to be printed with\nspecial, machine-readable typefaces; texts that contained anything other than\nthis design couldn't be read. Now, OCR is much better at handling a variety of\ntext styling, but systems still struggle with old print materials like\n**blackletter**.\n\n::: {#fig-blackletter}\n![](/images/ch11/blackletter_example.jpg)\n:::\n\nRunning:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nballad <- \"https://ebba.english.ucsb.edu/images/cache/hunt_1_18305_2448x2448.jpg\"\nballad_out <- ocr(ballad)\n```\n:::\n\n\n\n\nProduces:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(ballad_out)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- @€ QADdifcriptionof Roxtons faleehod ’\nafPozkie byze, and of hig fatall favewel.\nfLhe fatal fineof Lraitours loes ;\n% 4Bp Fufice due, deferupngfoe. - 1\nT Iate (alas) the great bntrath  Ehe Crane wwoldefipebptothe punte,  Roto, bis futerpug long (be fure) o\nDf Traitours, hoto (£ fped g heardit once of olve s _ @diplipay bis foes atlaf: : ,\nT boliff to knoin, Hal berez.wae Sndwoith the Lpng of bpaoes did frine Pig mercpe moued once atwap, |\nPotv late allegeance fev, 1Bp Fame, 3 beardittolves = Pe Hall them &uigbt out caff i\n« 3f Reucrsrage agamnit the Hea. GAnddofvoeihe welve not fal benoy aaith fentence infk fo2 theit butruth, .\nAnd ffwell Wwith oddeine rapnes 1But higher Epld nipMOUAL 2 and bacakpng of his fwpll s :\nPotu glao are they to fall agapne, ST il pait her teach((aithoroevepote) £Lhe fruits oftheir fedicfous (s, :\nAndtracetheic onted traine? Shame madea backevecour SChebarnes of cavth thail fpll.\n8l 36 five by fozce Wwolde fozge the fall 3 touch no Grmes herefn atall, TCheir foules God wot foze clogd 1 crime\nDf any fumptuoule place, AButfhetna fable fopfes __ Qnd theirpofteritie\nB 36 water flods byd bim leaueof, T hofemozall fence doth repr 4Befpotted foze With theirabule,\ns flames he wyll difgrace, DEclpmers bye theguple. Ano fEand by theit follie.\n| 3t Goo command the Wwpides to ceafe, Tuho buploes a houle of many 5 heiclinpngs left theiv namea hante,\ni is blaffes ave lapd full lotu ¢ anbdlaith not ground Wogkr heir dedes ith poplon fped: :\ni 3fBod command the feas focalme, 4Butdoth ertotethe groundk i3>  Theivdeathesawage foz wantof grace §\n: 2Chey wyll notrage 02 flolu. Pis bufldpng can notdure. SCheir honours quite is dead.\n4 Gl thinges at Gods commandemet be, @ TWhofekes furmifingtodilp SCheir flefh tofedethe kptes and crolues |\n3f betheir fateregarde s : a Ruler fentbp GOD 2 ACheir arnies a mase foa men s b\nHl andnoman liues whole veffinie 35 fubiect fure, Deuoide of grace. Cheir guerdon as examples are ¥\n1By hum i8 bupzeparde. Checauleof his otonerod. 2Co dafh dolte Dunces den.\n{15t when a man foxfakes theip, - Q byve that Wyl hernefEdefple SChaotn bp pout fouts pou Auggifh foxte  §\n8 - anorowlesin allowing Wwaues 1By vight Hould lofe a wyngs 3 oumumming malkyng route : -;\nAnd of bis boluntarfe wyll, Gud then is e no fying fo Wi CErtoll your erclamations bp, g\n! Bis onite god hap depraues 1But ot agother thyng. ABaals chapletnes,champions ffoute,\ni Wow fal hehopeto lcape the gulfe 2 anbhe that lofeth all at games, Datke fute fo2 pardons, papilts braue,\n: Bot Hal be thinke todeale 2 D3 fpendes infoiole ercefle: Foztraitours indulgence\n. 1o Mal bis fanfie baing him lound Qnbhopes by hapsto bealehisharme, . fend ot fome purgatosic (craps, i\n£ 4T o @afties MHoze Wwith laple 2 Mufk vzinke of deare piffrefle, Some WBulls tuith Peter pence.\n; Botv hall is fratght in fine (uccede 2 o fpeatie of bapdles fovelirapne D fwavime of D2ones, how dare pefipl |\n4 Qlas what Hall hegapne 2 Trhis wylfull wapardereive $ Twith labourpng Wees contend\n| wubatfeare by oams Do matke bimquake hey cave not foz the boke of Gov, Pou fonght fo2honie from thehiues, v\ni Hotw ofte [ubleceto papne 2 1o P2inces, men bntrue. 1B ut gall you foundinend. b\not funozie times in Dangers ven o cuntepe, caufers of much woe, SChefe tafpes oo Wwafk, their fings beont &\n33 thootone theman bnivple 2 ﬁts'i‘faitbfull frdendes, afall: heir fpight topll nofanaple: i\n8l @uhoclimes Withouten bolde ot bye, b ftheiv otone effates, afipng, ZChefle Peacocks pronvearenaked lefee [\n= ABewware, 3 hint aduise. T 5 others, avpeasgall. DF theiv difplayed taple. h\n8 Qllfuch as teatt to falle confrads, D 1Loz0e, hotu long thefe Liserdsluvke, Chele Lurkpe cocks fu cullourred,\n3 D2 feseet harmes confpive? BGos GO D, holv greata fuhple _ Holong banelurkt alofe &\n{ 15¢(ure, with Hoxtonsithey hal taffe  Wlere thepin hand with fefgnedbarts  Ehe WBeare (althongh but fot of fwote) \"\nQ right deferucd bire, heir cuntrye to defple? Path pluct bis wynges by piofe,\n& Thep can not loke foz better (pede, oto did thep frame their turniture?  SCbe Mone ber bozowenlighthath loff, [\nDo death foz (uch to fell 7 Poiv fitthey mave theirtoles : Sbe wapnedas wele\n& Godgrantthe futticeof the Wozive Poiw Hymon feught our englplh Trofe  TWhohoped by bap of othersharnes, 4\nPut by the papnes of bell, o bapng to Romaine feoles. 4 full Poneonce tobie,\ni oz fuchapentiuccale it is, Potu Himon Pagus playd bis parte, 4The Lpon (uffred long the Wull,\n: TChat Cnglifh barts diddare 39t 1Babilon balvoe dibrage: 1is noble mpnd totrye:\n& 700 palle the boundes of dutieslatve, Potw WBafan bulles begon to bell, Wntpll the 1Bull Wwas rageypng wod, :\n: D3 of their cuntriecare. Hofu Judas fought bis wage. dndfrombisfakedid hye. 3\ni dnomerciehath (o longreleal 13oin Jannes and Jambzes 0id abyde fChen time it was to bid him Fap\n] Dfenvours (God doth knofv) TChe baunt of baaineficke ads, Perfozce, bishomestocut\ni andbountic of our curteous Nuécne Yot Dathan, Choze, Abivam (md Andmake him leauebis rageing tunes ¢\nS T long hath fpared her foe. o dath out Poyples faas. 3In(cilence to be put. £\nb 1But Gov, Wwhofegrace fpiresherharte, ol Romaine marchant feta frefh Andall the calues of WBalan kynd i\ni AW pll not abyoethe fpight g pardons baauea fale, Are weaned from their Wwifh s i\ni Df RAebels rage, Wwho rampets veach Potw aliapes fomeagain( the aenty  ELheBivcan Tigers tanmed notn, 0\ni Fromber, hee title quight. Tioloe dzeame afencelestale.  dlemathon eatesnofifh). i\nB4 Qithough e dotwe inpititull seale, BGos bicar frombis god receaucd 4Beholoe befoze pour balefull epes\nAnd loueth to fucke noblod 3 Che kepes to lofeand bpnds Lhepurchace of pour pacte,\ni1 ¢t Gona caueat topll her lend 4Baals chaplein thoght he fire wolk ™ 1o SHutuey pour fodefneforolful fight\nI appealethole Wipers mode, Huch was his pagan mynd. i ith fighes of dubble harte,\nB q man that (s bis bouleon fire, Gob 1Lozve hotn bits the tert theie ts  Lament thelackeof pouralies i\nvl feke to quench the flame : TThat faith fuch men thall bé  Religiousrebellgalls 5\nit Clsfrom thefpoylefomepacteconuey, Futheic reltgﬂonbo;no;tnlhz ABetuepethat pll fuccele of pours, b\nC1s feke the heate to tame, D much bavietie. Come curfe pour (odeine fall, G\nR wnho (@ea penthoule wether beate, and fund2p (02tsof fects furk nd Wben pe hauc pour guiles out fought\n| And heares a boiftroule fopndes iuifion Mall appeare < And all your craft appzoued,\nil s3utheoefull fafetic of himlelte, dgaintE thefatber; fonnefhe  ue, Peccanimus Hall be your fong .\nT pll foace him fuccour fynde 2 Gaint mother, daughter 2 Pour ground wozke is renoued,\nAChepitifull pacient Pellican, 9 it not come to pafe trofy pra? QAud lokehotv Poztons (ped their wills\n; Per blod although Hee Hed e ea, baftards furethey bees €uen (o thetr fee MHall haue, e\nil 3oct Wopll (hee femeber dateto end, qrho our gwd mother Nuane o, . 4 o better et thenthope to gapne e\n!‘ n ﬂbzcarle hﬁzwnung befped. b m(lgthtzang rzbelllnu?xz.g ol 15ut gallotwes without graue, :\ni1 he Cagle fipnges ber yong ones dotone Lan o0 bis bengeance long etais ey 3\nit what ﬁfght lnf fg]nne vefule 2 mbell;z})is e (pruants ficle CEINTS léha ibl'nn. L\n8l Wnperfed foiles (e deadly hates, Fniuvfoule (pights of godlelemeit, @Xg * i\n. Anv rightlp fuch mirble, \\ wuhe turne as doth & Whele2 A 0 @‘@ @A@ 2\n£ » it\n¢ @ Tmp2inted at London by Fleyandet Lacfe, foz Hentrie Tipskeham, divellyng at the figne\no o of the blacke 3Bope, at themivdle {po2th Doze of Paules chuveh, 2 :\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note}\nBy the way, this example used a JPG file. The `ocr` function can handle those\ntoo!\n:::\n\nEven though every page is an \"image\" to OCR, OCR struggles with imagistic or\nunconventional page layouts, as well as inset graphics. Add to that sub-par\nscans of archival documents, as in the newspaper page below, and the output\nwill contain way more errors than correct matches.\n\n::: {#fig-chronicling-america}\n![](/images/ch11/chronicling_america_example.png)\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewspaper <- \"https://chroniclingamerica.loc.gov/data/batches/mimtptc_inkster_ver01/data/sn88063294/00340589130/1945120201/0599.pdf\"\nnewspaper_ocr <- ocr(newspaper)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nBeautifully messy output results:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(newspaper_ocr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n:::\n\n\n\n\nOne strategy you might use to work with sources like this is to crop out\neverything you don't want to OCR. This would be especially effective if, for\nexample, you had a newspaper column that always appeared in the top left-hand\ncorner of the page. You could preprocess your page images so that they only\nshowed that part of the newspaper and left out any ads, images, or extra text.\nDoing so would likely increase the quality of your OCR output. Such a strategy\ncan be achieved outside of R with software ranging from Adobe Photoshop or the\nopen-source GIMP to Apple's Automator workflows. Within R, packages like\ntabulizer and magick enable this. You won't, however, be required to use these\ntools in the course, though we may have a chance to demonstrate some of them\nduring lecture.\n\nThere are several other scenarios where OCR might not be able to read text. Two\nfinal (and major) ones are worth highlighting. First, for a long time OCR\nsupport for non-alphabetic writing systems was all but nonexistent. New\ndatasets have been released in recent years that mostly rectify these absences,\nbut sometimes support remains spotty and your mileage may vary. Second, OCR\ncontinues to struggle with handwriting. While it is possible to train\nunsupervised learning processes on datasets of handwriting and get good\nresults, as of yet there is no general purpose method for OCRing handwritten\ntexts. The various ways people write just don't conform to the standardized\nmethods of printing that enable computers to recognize text in images. If,\nsomeday, you figure out a solution for this, you'll have solved one of the most\nchallenging problems in computer vision and pattern recognition to date!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}