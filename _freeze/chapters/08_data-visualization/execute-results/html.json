{
  "hash": "f8d00cf7327246080cd380a69c184fbc",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Visualization\n\n::: {.callout-note title=\"Learning Goals\" collapse=\"false\"}\nAfter this lesson, you should be able to:\n\n* Explain when, and why, to use a data visualization\n* Describe common features of \"good\" data visualizations\n* Identify principles of visual perception that can be used to make effective\n  and expressive plots\n* Compare the features and utility of various plot types\n* Choose an appropriate kind of plot based on the data\n* Know where to go for more resources on making accessible and equitable data\n  visualizations.\n* Explain what the grammar of graphics is\n* With the ggplot2 package:\n    + Make various kinds of plots\n    + Save plots\n* Choose an appropriate kind of plot based on the data\n* Reorder factor levels to change how they're displayed in plots\n:::\n\n\n## Principles & Perception\n\nData visualization is the graphical display of abstract information to help us\nmake sense of phenomena and to communicate these findings. It is a powerful\ntool to help us uncover and share the stories of our data. Visualizations help\nus retain and analyze all the information in our data, uncover and share our\ninsights, and describe our research in a useful way. *If a picture is worth a\nthousand words, then a good data visualization is worth millions.*\n\nBut how many of us have ever taken a course explicitly on data visualization?\nIt’s typically not taught in standard data analysis courses, yet it is a\nmainstay for nearly every sector in today’s data-driven world. Today we’ll dive\ninto the what, how, and why of data visualization and describe some best\npractices that you can immediately implement into your research workflows.\nAlong the way we’ll also focus on building up our collective data literacy\nskills, and employ critical approaches to produce science that is more robust,\ntransparent, and equitable.\n\n### A Brief History of Data Visualization\n\n::: {#fig-timeline}\n![](/images/ch08/workshop_data_visualization_timeline_data_viz_wikipedia.png)\n\n([source][source-timeline])\n:::\n\n[source-timeline]: https://commons.wikimedia.org/w/index.php?curid=96668758\n\nData visualization is not a modern invention. Quantitative information display\nhas been traced back to prehistory with the locations of stars mapped on the\n[Lasaux cave drawings][lasaux]. [Clay tokens][clay-tokens], [quipu][], and\n[stick charts][stick-charts] dating back as far as 5500 BC also illustrate our\nlong history of creating shared representations of data. The oldest known data\nvisualization dates to 1160 BC with the [Turin Papyrus Map][turin], which\naccurately illustrates the distribution of geological resources in a region in\nEgypt. These earliest forms of data visualization served purposes of navigating\nculture and living within society---from accounting to agriculture,\ntransportation, religion, and medicine. They were used to help us explore and\nunderstand natural phenomena and the workings of the universe.\n\n[lasaux]: https://en.wikipedia.org/wiki/Lascaux\n[clay-tokens]: https://en.wikipedia.org/wiki/History_of_ancient_numeral_systems#/media/File:Accountancy_clay_envelope_Louvre_Sb1932.jpg\n[quipu]: https://en.wikipedia.org/wiki/Quipu#/media/File:Inca_Quipu.jpg\n[stick-charts]: https://en.wikipedia.org/wiki/Marshall_Islands_stick_chart#/media/File:Micronesian_navigational_chart.jpg\n[turin]: https://en.wikipedia.org/wiki/Turin_Papyrus_Map#/media/File:TurinPapyrus1.jpg\n\nThe French philosopher Rene Descartes is attributed as developing the precursor\nto today’s modern plot in the 17th century---a two-dimensional coordinate\nsystem for displaying values. Later in the 18th century William Playfair began\ncreating left to right oriented plots, allowing the viewer to explore how\nvalues change over time. He’s also attributed to inventing the bar graph and,\nunfortunately, the pie chart (we'll get to why that's unfortunate, later). Into\nthe 19th and 20th centuries we see an explosion of chart types\n\nUnsurprisingly, the invention of tools like paper and computers shaped our\nrelationship with knowledge and information, playing a strong role in how we\ncollect, analyze, store and visualize data. As we gather more and more complex\ndata, we seek more ways to visualize its meaning and in the 19th and 20th\ncenturies we see an explosion of chart types and techniques for communicating\nwith statistical graphics.\n\n::: {.callout-note title=\"See also\"}\nFor a more complete history of data visualization, check out *[A Brief History\nof Data Visualization][viz-history]* by M. Friendly.\n\n[viz-history]: https://link.springer.com/chapter/10.1007/978-3-540-33037-0_2\n:::\n\nIn particular, check out the following famous data visualizations.\n\n#### Famous Data Visualizations\n\n**Florence Nightingale**, the \"mother of nursing,\" produced in 1857 a rose\ndiagram depicting seasonal sources of British soldier's fatalities in the\nCrimean War. Out of the 18,000 soldiers who had died, 16,000 had died of\ndisease in a hospital (blue shading) rather than from their wounds (black\nshading). This image is credited with helping to persuade the British\ngovernment to improve conditions in military hospitals.\n\n::: {#fig-mortality}\n![](/images/ch08/nightingale_mortality_fig.jpg)\n\nThe context surrounding this rose diagram is actually quite bit more complex.\nFor additional background, [check out this podcast][podcast] based on the book\n*The Data Detective* by Tim Harford.\n:::\n\n[podcast]: https://99percentinvisible.org/episode/florence-nightingale-data-viz-pioneer/transcript/\n\n**John Snow**, a London physician, traced the source of an 1854 cholera\noutbreak in Soho. By examining the locations of reported cholera deaths, Snow\ndemonstrated that the disease was connected to a contaminated well on Broad\nStreet, contributing to growing understanding that cholera was a waterborne\ndisease and not caused by foul 'miasmas' in the air. He later used a map in his\npublication to show the concentration of the cholera cases around the\ncontaminated pump. On this map, the height of the dark bars correspond to the\nnumber of deaths at a given location. While Snow didn't invent the mapping\ntechnique of layering thematic data on top of topographic maps, nor actually\ncompose the map himself (it was created by cartographer Charles Cheffins), this\nmap was so effective that history often calls Snow the \"father of\nepidemiology.\" Learn more about the history of the map in this recent [post by\nKenneth Field][field-post].\n\n[field-post]: https://www.esri.com/arcgis-blog/products/arcgis-pro/mapping/something-in-the-water-the-mythology-of-snows-map-of-cholera/\n\n::: {#fig-snow}\n![](/images/ch08/snow_london_cholera_map.jpg)\n:::\n\n\nLastly, no discussion of the history of data visualization is complete without\na nod to Charles Minard's acclaimed depiction of Napoleon Bonaparte's ill-fated\ninvasion of Russia. Edward Tufte declared in his popular 1983 book *The Visual\nDisplay of Quantitative Information* that **Napoleon's March** \"may well be the\nbest statistical graphic ever produced.\" The thick band denotes the size of the\narmy at each position, beginning at the Polish-Russian border. The dark lower\nband is tied to temperature and time scales, and shows the path of Napoleon's\nretreat from Moscow and shrinking army size during the bitterly cold winter.\n\n::: {#fig-napoleon}\n![](/images/ch08/Tufte_napoleon_march_minard.gif)\n:::\n\nThis image has also been recreated with modern plotting software, including the ggplot2 package in R, which you will learn about in the next lesson.\n\n::: {#fig-napoleon-ggplot}\n![](/images/ch08/wickham_napoleon_march.jpg)\n\n(source: *ggplot2: Grammar of Graphics in R* by Hadley Wickam)\n:::\n\n\n### What is Data Visualization?\n\nAt their core, data visualizations are products that:\n\n* Represent data.\n* Have a specific purpose.\n* Tell a data-driven story.\n\nThere are two main types of data visualizations:\n\n1. **Information visualizations** (aka infographics or infoviz) tend to be\n   visually striking, dramatizing a problem with unique and visually appealing\n   imagery that draws the casual viewer in.\n2. **Statistical graphics** aim to make comparisons, to reveal patterns and\n   discrepancies. We use statistical graphs to communicate our research\n   results, often for viewers who are already immersed or interested in the\n   problem.\n\nWhile many topics within this reader will apply to infoviz as\nwell, our emphasis is on creating judicious and accurate statistical graphics.\n\n\n::: {.callout-note title=\"See also\"}\nFor more info comparing infoviz and statistical graphs, see [Gelman and Unwin\n2013][gelman13].\n\n[gelman13]: https://www.jstor.org/stable/43304809?seq=1\n:::\n\n\n#### Why Viz?\n\nThere are lots of ways to represent our data. In fact, tables are often the\nmost common way to report data, and they are great at conveying exact values.\nBut interpretation of data displayed in a table is largely up to the viewer.\nIt’s hard to perceive the overall summary of the data from a table, unless it’s\nreally simple and, in that case, you often don’t even need a table and can just\nreport those statistics as text.\n\nData visualization, on the other hand, takes advantage of our ability to\nprocess information by shifting the balance between our natural perceptive and\ncognitive abilities to convey a specific message. Most of the information\nthat’s sent to our brains is visual. In fact, it’s been found that the human\nbrain processes visual imagery 60,000 times faster than text! Data\nvisualizations allow us to move from a predominantly thinking perspective to a\nseeing perspective. The cerebral cortex, which primarily handles our cognition,\nis slow and less efficient than the visual cortex, which processes images.\nThus, visual diagrams are often easier for us to process than pages of words\ndescribing our research. Absorbing information quickly allows us to make novel\ninferences, and make more productive and informed decisions. Not surprisingly,\nwell composed data visualizations are the most effective type of scientific\ncommunication.\n\n::: {.callout-note title=\"See also\"}\nFor guidance on how to convert a table into a plot, see [this paper by Andrew\nGelman][gelman-tables].\n\n[gelman-tables]: http://www.stat.columbia.edu/~gelman/research/published/dodhia.pdf\n:::\n\nUltimately, the utility of a data visualization depends on how well it's\ncomposed.\n\n#### Good Data Visualizations\n\n* Provide rapid access to data.\n* Faithfully represent the data and tell a story.\n* Are expressive.\n* Are effective.\n\nHelpful data visualizations intuitively, clearly, accurately, and efficiently\nexplain complex ideas. The patterns and relationships presented must be valid,\nand the visual relevant to the data it presents. A data visualization cannot\nexist without a narrative, and good data visualizations always include context.\nGood plots grab our attention and create a positive visual impact. This aids\nour ability to make connections and recall the features of the data. They can\nbe aesthetically pleasing but that's not the end goal. Good plots are\naccessible (not everyone perceives the visual world the same way). They\nleverage aspects of human perception to allow for intuitive inference of\nrelationships between abstract concepts (our data).\n\n::: {.callout-note title=\"See also\"}\nWant to feel inspired? Check out [Information is Beautiful][info-beautiful] and\n[Flowing Data][flowing-data].\n:::\n\n[info-beautiful]: https://informationisbeautiful.net/\n[flowing-data]: https://flowingdata.com/\n\n::: {#fig-best-in-show}\n![](/images/ch08/IIB_Best-In-Show_1276x2.png)\n\n([source][best-in-show])\n:::\n\n[best-in-show]: https://informationisbeautiful.net/visualizations/best-in-show-whats-the-top-data-dog/\n\n#### Bad Data Visualizations\n\n* Have too much, or too little, information.\n* Are inconsistent.\n* Ignore limits of human perception.\n* Misrepresent the data.\n* Use inappropriate (or garbage) data.\n\nHave you ever seen a pie chart where the labeled slices add up to something\nother than 100%? That's a poorly executed data visualization. Goal: don't end\nup on [WTF Viz][wtf-viz].\n\n[wtf-viz]: https://viz.wtf/\n\n::: {#fig-wtf}\n![](/images/ch08/wtf_viz_tumblr_qqfe5kmQze1sgh0voo1_1280.jpg)\n\n([source][source-wtf])\n:::\n\n[source-wtf]: https://viz.wtf/post/646651837987061760/the-star-herald-starherald-has-a-daily-poll\n\n\n### Before You Viz, Make a Plan\n\nModern software makes it easy to quickly create a plot. But before you fire up\nyour computer and start plotting, **stop and think.** Write out your\nvisualization plan. This will save you time in the long run, and result in a\nmore robust data visualization.\n\nAsk yourself:\n\n* Why am I making this visualization? (purpose)\n* Who am I making it for? (audience)\n* How will I use and share it? (medium)\n* What can I use to make it? (tools)\n* What story does it tell? (message)\n* Who does it affect? Who is left out? (critical approach)\n\n::: {.callout-tip}\nHow many plots you need is always the wrong question. You need exactly as many\nas you need to tell your story.\n:::\n\n#### Purpose\n\nFirst, identify **why** you are making a visualization. We use data visualizations in different ways across the iterative steps of the research data pipeline:\n\n::: {#fig-data-pipeline}\n![](/images/ch08/research_data_pipeline_viz.png)\n:::\n\n* **Collection**: plots can help us understand who, what, and where the data\n  represent. It can help us track our progress, and help us project required\n  effort to complete this phase of the project.\n* **Cleaning**: plotting is a quick and effective way to spot errors in our\n  data. It allows us to grasp the extent of issues such as outliers and missing\n  data.\n* **Exploration**: plots are a powerful tool for exploratory data\n  analysis (EDA). Plots help us identify patterns, summarize variables and\n  relationships. (see [Tukey 1960][tukey60])\n* **Confirmation**: plots also help us conduct confirmatory data analysis\n  (CDA). We can plot diagnostics like the model fit, residuals, and model\n  comparisons that confirm whether a model is correct. CDA is an iterative\n  process over the course of research, one reason why we advocate using\n  scripting languages and other reproducible workflows for generating graphics.\n* **Validation**: plots also help us to debug and validate our code. We can\n  visually inspect the results at each step of the code we are writing and\n  verify whether it satisfies our expectations.\n* **Communication**: sharing the insights from our data with others is\n  probably the most commonly understood and emphasized purpose of data\n  visualizations. This is also often the hardest type of data visualization to\n  “get right,” because we don’t always remember to design the visual to speak\n  specifically to who we are sharing it with.\n\n[tukey60]: https://www.jstor.org/stable/1558734?seq=1\n\n#### Audience\n\nWho are you making the data visualization for? There is no such thing as a\n“generic” data visualization. Are you making the figure for:\n\n* **Yourself**, to help you clean or explore your data?\n* Your **immediate colleagues or research team** to update them on your\n  research progress?\n* **Experts in your field** reading your publication or listening to your\n  presentation?\n* A **general audience** as part of your public outreach?\n* **Policy makers** who might not know all the details but might be making\n  big decisions based on your results?\n\nKnowing who you’re making the visualization for will help you think through the\nfollowing steps to create something of value for your intended purpose. It will\nalso help you determine how effort is needed to compose a plot to achieve your\ngoal.\n\n#### Medium\n\nThere are always constraints when creating a data visualization. It’s best to\ndiscover these before you start, rather than after you’ve created a beautiful\ndata visualization that’s completely inappropriate for your intended use.\n\nIf you're creating the visual to accompany a journal article, you probably need\nto use a static figure and not an interactive or dynamic dashboard. Does your\njournal allow for color figures? When in doubt, start with greyscale---it’s a\nlot easier to add color, rather than take it away, as you revise your figures.\n\nIf you're showing the figure during a presentation, you probably want to\nsimplify it---you audience will have 5 seconds max to read, understand, and\ninterpret your visualization. A really complex figure that requires minutes to\ncomprehend will just distract your audience away from what you---and your\ndata---are saying. It might be more effective to compose and display the same\nplot in different ways to best communicate your points.\n\nFor a poster presentation where your audience is expected to spend significant\ntime pondering over your findings, you might want to have one very large, clear\nfigure that disentangles the complexity of your project.\n\nIf you’re creating a visual for a website, you might be able to go nuts---bring\non the interactivity, the dynamic data display---until you crash the server\nbecause it requires too much compute time.\n\n::: {.callout-note title=\"Checklist\"}\n* [ ] Static or dynamic/interactive?\n* [ ] Dashboard/apps?\n* [ ] Projector, paper, website?\n* [ ] Resolution?\n* [ ] Color?\n:::\n\n\n#### Tools\n\nAt the [UC Davis DataLab][datalab], we advocate for the use of open-source\nsoftware and scripting languages for data-driven research projects, including\nfor generating data visualizations.\n\nUsing scripting languages makes it easy for you to reproduce your data\nvisualizations. As you clean and update your data, you can re-create your\nvisuals easily by re-running your code. You can also return to a figure later\nand know exactly what it represents and how you made it. You don’t have to\nworry about remembering which buttons you clicked, and in what order, like you\nwould when using a GUI based software.\n\nUsing free, open-source software also means that you can easily and freely\nshare your data, code, and output with your collaborators, reducing the equity\nand reproducibility barriers posed by the use of proprietary software.\nOpen-source software that’s great for plotting---like R---also has amazing user\ncommunities and resources to help you learn the code and create your ideal\nvisualization.\n\n[datalab]: https://datalab.ucdavis.edu\n\n::: {.callout-tip}\nBe practical with yourself: you probably aren’t going to learn a new package or\nother plotting software overnight. If your conference talk is tomorrow, using\nfamiliar software like Excel for plotting can be fine, especially if you know\nsome [tricks to clean up and customize the appearance of your\nplots][plot-tricks].\n\n[plot-tricks]: https://ucdavisdatalab.github.io/workshop_data_viz_principles/quick-tips-for-better-plots.html#get-rid-of-chartjunk\n:::\n\n::: {.callout-note title=\"See also\" collapse=\"true\"}\nHere's a non-exhaustive list of open source tools we recommend for data\nvisualization:\n\n* Static visualizations:\n    * ggplot for [R][ggplot2], [Python][plotnine], and [Julia][gadfly]\n    * [Seaborn][] for Python\n* Geospatial visualizations:\n    * [QGIS](https://qgis.org/)\n* Dynamic and interactive visualizations:\n    * [Leaflet](https://leafletjs.com/) for mapping\n    * [D3](https://d3js.org/)\n    * Plotly for [R][plotly-r], [Python][plotly-py], and [Julia][plotly-jl]\n    * Bokeh for [R][rbokeh] and [Python][bokeh]\n\n[ggplot2]: https://ggplot2.tidyverse.org/\n[plotnine]: https://plotnine.readthedocs.io/en/latest/\n[gadfly]: http://gadflyjl.org/stable/\n[seaborn]: https://seaborn.pydata.org/\n[rbokeh]: https://hafen.github.io/rbokeh/\n[bokeh]: https://docs.bokeh.org/en/latest/\n[plotly-r]: https://plotly.com/r/\n[plotly-py]: https://plotly.com/python/\n[plotly-jl]: https://plotly.com/julia/\n:::\n\n#### Message\n\nResearch is storytelling with data. Every data visualization is an important\npiece of that story. It may help you confirm (or reject) a hypothesis, discover\nnew correlations, or predict the likelihood of a future event.\n\nCreating statistical graphics is like writing a novel---you get to decide who\nand what will be featured in your data story. And just like one page of a\nnovel, your data visualization alone doesn’t tell the whole story. Every data\nvisualization should contain the details required for explanation, and they\nrequire narratives.\n\nWrite out captions for each plot before you make it. What does the plot show?\nAfter creating the plot, go back and update the caption with the take home\npoints for your viewer. How might others focus on a different message? If you\ncan’t articulate what the plot is about then you probably should rethink what\nyou are choosing to display and how you are showing it.\n\n#### Critical Approaches\n\n::: {.callout-important}\n**Don’t skip this step.** It’s last on this list but is the most important on\nyour journey to making useful data visualizations. Data are information, and\ninformation is power. Use this power intentionally and mindfully throughout the\nprocess of creating and sharing your visualizations.\n:::\n\nAs you reflect on your answers to the planning prompts above, critically review\nthe features of your data:\n\n* **What do the variables you've selected for your visualization mean?** How\n  are they defined? How did those definitions come to be? Why did you select\n  them?\n* **Who will your data visualizations affect? What groups are left out?** How\n  does this affect the story your data tells? How might someone misrepresent or\n  misunderstand your story? [Bring back the bodies][data-feminism].\n\n[data-feminism]: https://mitpress.mit.edu/books/data-feminism\n\nConducting these connotative and denotative explorations of your data will not\nonly result in a more robust visualization, but will make you a better\nresearcher and support a more inclusive and equitable society.\n\n::: {.callout-note title=\"See also\"}\nTo learn more and practice these steps on some case studies, check out our\n[Critical Approach to Data Visualization workshop][datalab-crit-viz] and [Data\nFeminism research and learning cluster][data-feminisim-rlc].\n\n[datalab-crit-viz]: https://ucdavisdatalab.github.io/workshop_critical_data_viz/\n[data-feminisim-rlc]: https://datalab.ucdavis.edu/data-feminism/\n:::\n\n\n### Graphical Elements of a Plot\n\nA data visualization is useful only if it encodes information in a way that our\neyes can perceive and our brain can understand. **Marks** and **channels** are\nthe building blocks of all data visualizations and are employed to accomplish\nthis encoding.\n\n**Marks** are the the basic geometries, or graphical elements, in a plot that\ndepict our data items or their linkages. Marks indicate \"where\" something is\nand include points (0d), lines (1d), areas (2d), and volumes (3d).\n\n**Channels** are the attributes of that control how the marks appear. Channels\nare used to encode (or indicate) the values or meaning of our data. Channels\nwere first described in the mid-20th century by Jacques Bertin in his book\n*Semilogie graphique* (the *Semiology of Graphics* [1967]), which argues that\nvisual perception operates according to rules that can be followed to express\ninformation visually in intuitive, accurate and efficient ways. He described\nseven main categories of visual variables (channels): location or position,\nsize, shape, orientation, color, and texture. More recent publications list up\nto 12 channels useful for encoding meaning in data visualizations ([Roth\n2017][roth17]).\n\n[roth17]: https://doi.org/10.1002/9781118786352.wbieg0761\n\nBy understanding the nature of our data in combination with the principles of\nvisual perception, we can decide which marks and channels to use for a given\ndata visualizations.\n\n::: {#fig-munzner}\n![](/images/ch08/workshop_data_visualization_munzer_marks_channels_figure.PNG)\n\n(source: *[Visualization Analysis and Design][munzner14b]* by Tamara\nMunzner)\n:::\n\n[munzner14b]: https://www.oreilly.com/library/view/visualization-analysis-and/9781466508910/K14708_C005.xhtml\n\n\n### Principles of Visual Perception\n\nLeveraging principles of visual perception (the ability to see and interpret\nsurrounding visual information) will help us identify appropriate plot types\nand design better, more informative graphics. Humans are wired to look for\nstructure, patterns, and logic. Our brains are amazing---they take ambiguous\nvisual information and transform it into something organized, symmetrical, or\nfamiliar so we can understand it. But, we don't process all visual information\nequally.\n\n\n#### Visual Magic Tricks\n\nTake a look at the following questions and images.\n\n::: {#fig-line-trick}\n![](/images/ch08/whichisbigger.JPG)\n\nWhich line is bigger?\n:::\n::: {.callout-note title=\"Answer\" collapse=\"true\"}\nThey're the same length, if you pay careful attention to the scales of the\naxes!\n:::\n\n\n::: {#fig-circle-trick}\n![](/images/ch08/workshop_data_visualization_tricks_circles_bw.png)\n\nWhich inner circle is bigger?\n:::\n::: {.callout-note title=\"Answer\" collapse=\"true\"}\nThe circles are the same size.\n:::\n\n\n::: {#fig-line-connect-trick}\n![](/images/ch08/whichlinesup1.JPG)\n\nDo these lines connect?\n:::\n::: {.callout-note title=\"Answer\" collapse=\"true\"}\nThe lines do NOT connect. Hold up a ruler or straight edge and prove it for\nyourself.\n:::\n\n\n::: {#fig-gradient-trick}\n![](/images/ch08/gradient-optical-illusion_wikimedia.svg)\n\nIs the center bar in this image by Dodek a gradient?\n:::\n::: {.callout-note title=\"Answer\" collapse=\"true\"}\nNope! It's a solid color.\n:::\n\n::: {#fig-rubins-vase}\n![](/images/ch08/Rubins_vase_wikipedia_bw.jpg)\n\nWhat shape(s) do you see in this image?\n:::\n::: {.callout-note title=\"Answer\" collapse=\"true\"}\nDid you see a vase or two faces?\n:::\n\nThese visual \"magic tricks\" work because they capitalize on innate weaknesses\nin our visual perception.\n\n#### Steven’s Psychophysical Power Law\n\nResearch studies by Stanley Smith Stevens and others have shown that we exhibit\ninnate biases in how we perceive magnitude changes in the intensity of various\ntypes of stimuli.\n\nFor example, we perceive the intensity of an electrical shock to a greater\ndegree than its actual, physical intensity would seem to warrant. We're also\npoor at accurately perceiving changes in brightness and estimate it to\nincreasing less than it actually does. However, we have near perfect perception\nof length proportional to its actual increase. This is especially true if\nlengths are aligned and on the same scale. Knowing this can help us design more\nintuitively useful plots.\n\n::: {#fig-munzner-viz}\n![](/images/ch08/workshop_data_visualization_stevens_law_munzer_figure.PNG)\n\n(source: Figure 5.7 in *[Visualization Analysis and Design][munzner14]* by\nTamara Munzner)\n:::\n\n[munzner14]: https://www.oreilly.com/library/view/visualization-analysis-and/9781466508910/\n\n\n#### Perception and Encodings\n\nBased on psychophysics, we can rank encodings to help us identify which ones\nwill more accurately allow us to judge differences in relative magnitudes,\nwhich is important when working with ordinal, interval or ratio data.\n\n::: {#fig-perception}\n![](/images/ch08/Mackinlay_16-Figure14-1.png)\n\n(source: [Jock Mackinlay, 1986, Computer Science ACM Trans. Graph.][mackinlay])\n:::\n\n[mackinlay]: https://doi.org/10.1145/22949.22950\n\nFrom most to least accurate by magnitude perception:\n\n* **Position along a common scale.** Spatial position is the easiest feature\n  for us to recognize and evaluate, and unsurprisingly is used in the most\n  common plot types: bar charts, scatterplots.\n* **Positions along identical but nonaligned scales.** Small multiples, grid,\n  lattice, panel, and Rellis charts.\n* **Length.** We can easily recognize proportions and evaluate lengths,\n  especially when they are aligned, such as in bar charts.\n* **Direction.** We recognize directionality fairly easily. Trend charts\n  utilize this to demonstrate changes over time.\n* **Angle, slope.** It's harder to evaluate angles than length or position. Pie\n  charts can be as efficient as stacked bar charts, unless there are more than\n  3 parts to the whole. But ask yourself---if there are fewer than 3 or fewer\n  parts, do you really need a visualization?\n* **Area.** Determining the relative magnitude of areas is much harder compared\n  to lengths, and should be used (like in bubble charts) for indicating the\n  relative importance, and not absolute magnitude changes.\n* **Volume.** 3D objects as represented in 2-D space are hard to evaluate.\n  Avoid them. I'm looking at you, exploding 3D pie chart.\n* **Curvature.** Perceiving changes in the degree of a curve magnifies the\n  difficulties in detecting direction, angle, and non-aligned lengths.\n* **Density, color saturation and shading.** Color is the least accurate way to\n  convey patterns. Saturation is the intensity of a single hue, and increasing\n  color intensity is intuitively perceived as correlating to an increasing\n  value. But individual hues are hard to compare to one another. Heatmaps along\n  the same color gradient can be a good way to convey an overall picture of\n  change in values over a range. We'll talk more about color later on.\n* **Color hue.** For data visualizations, color hue is the most challenging\n  encoding to detect changes in magnitude.\n\n\n#### Evaluating Graphics\n\n> No matter how clever the choice of the information, and no matter how\n> technologically impressive the encoding, a visualization fails if the\n> decoding fails. (Cleveland 1983)\n\nHow do we detect if our encodings have failed? Munzner uses the principles of\nexpressiveness and effectiveness to help us evaluate our data visualizations.\n\nThe **expressiveness** of a visual encoding should \"express all of, and only,\nthe attributes of the data.\" It is violated when we use encodings that do not\nmatch our data type or our visualization goals. When it fails, a chart is not\nonly sub-optimal and confusing, it can be incorrect and misleading. Charts can\nfail the expressiveness test if their encodings imply ordering when there\nactually is none, or they mis-order a variable.\n\nThe **effectiveness** of a visual encoding addresses how accurately can the\ninterpreter of the chart decode the encodings within it and derive accurate\nknowledge. According to Munzner, \"the importance of the attribute should match\nthe salience of the channel,\" meaning we should use channels at the top of the\nlist to encode the variables that are the most important to communicating our\ndata story.\n\nWhen looking at a plot, can you accurately detect differences is the sizes of\nthe bubbles? Can you discriminate between all of the colors, compare the\nshades? Can you separate the dimensions of the data?\n\nTaking these principles together, when we want to compare magnitudes of\n**ordinal data** (numeric, continuous, or ordered qualitative data---like\nheight, weight, number of children in a family, or a rating), we should use\nencodings at the top of Mackinlay's list above.\n\nConversely, for **nominal data** (categorical or un-ordered qualitative\ndata---like gender), use these identity channels:\n\n* **Shape**: glyphs are effective at grouping categorical attributes together.\n  But be mindful that the more shapes you use, the harder it will be for a\n  viewer to remember what corresponds to which specific data attribute.\n* **Color**: while color can be very effective in data visualizations (see the\n  Gestalt principles below) typically less is more. Apply contrasting colors\n  only to differences in meanings in the data, or to emphasize the main\n  elements. Start with grey, and add color only as necessary. And, be mindful\n  when defining your color palette. [Color brewer](https://colorbrewer2.org/)\n  and [Viz Palette](https://projects.susielu.com/viz-palette) provide palettes\n  that optimize our perceptive abilities and design for accessibility. Do a\n  color check---how will a person with colorblindness perceive your graphics?\n* **Texture**: similar to shape and color, texture can be useful for\n  differentiating between categories or separate areas. Textures can be\n  particularly effective at replacing colors, such as in black and white\n  figures, and for increasing accessibility by reinforcing a color encoding.\n\nCombining channels can result in integral or separable coding pairs,\nrespectively allowing attributes to be perceived holistically or with separate\njudgments regarding their graphical dimension.\n\n::: {#fig-ware}\n![](/images/ch08/ware_information_visualization.PNG)\n\n(source: [Colin Ware (2019) \"Information Visualization\"][ware])\n:::\n\n[ware]: https://www.elsevier.com/books/information-visualization/ware/978-0-12-812875-6\n\n#### Gestalt Principles\n\nIn addition to decoding specific elements, our brains have an amazing ability\nto create and perceive structure along visual objects. This is commonly\nreferred to as the Gestalt principles of visual perception. This framework,\ncombined with Steven's Law, can help us think through how to use marks and\nchannels together to create expressive and effective data visualizations:\n\n* **Similarity**: objects with the same visual properties are assumed to be\n  similar and are grouped together.\n   + Example: use design elements such as shape, color, and organization to\n     indicate groupings of the data. In design theory these are called\n     “preattentive features” because we actually see and perceive them before\n     we really think about them. In some experiments it was found to take less\n     than 0.5 seconds for the eye and brain to process a preattentive property\n     of an image.\n* **Proximity**: objects that are close together are perceived as a group.\n   + Example: since physical distance connotes similarity, grouping bars on a\n     chart can indicate similarities among their data. Instead of listing it in\n     a legend, directly label data groupings by adding informative text\n     directly onto the graph.\n* **Continuity**: elements that are aligned (on the same line, curve, or plane)\n  are perceived to be more closely related to each other than to other\n  elements.\n   + Example: it is often easier for us to perceive the groupings if the shapes\n     are curves, rather than lines with sharp edges.\n* **Enclosure**: objects that appear to have a boundary around them (i.e., are\n  found within the same common or enclosed region) are perceived as being\n  related.\n   + Example: Add line boundaries or shades to group objects.\n* **Connection**: objects that are connected, such as by a line, are perceived\n  as a group.\n   + Example: connect different data together to indicate a relationship. This\n     connectedness is highly effective as it often over-rules the other\n     principles for group perception. Every line plot is an example of\n     connectedness.\n* **Closure**: complex arrangements of visual elements are perceived as a\n  single, recognizable pattern.\n   + Example: open structures are often perceived as closed, complete and\n     regular.\n* **Figure and Ground**: objects are perceived as either standing out\n  prominently in the foreground (or front figure) of an image, or recede into\n  the background.\n   + Example: shading or color blocking can be employed to to distinguish\n     between the more important figure and less important ground features of an\n     image. Place elements of the most importance in the foreground figure.\n* **Focal Point**: whatever stands out visually is perceived as the most\n  important. It will grabs our attention first, and holds it for the longest.\n   + Example: use design elements selectively to draw attention to the most\n     important features of the data.\n\n::: {#fig-gestalt}\n![](/images/ch08/gestalt_principles.PNG)\n\nGestalt principles for perpetual grouping and figure-ground segregation.\n(source: *Gestalt Principles for Attention and Segmentation in Natural and\nArtificial Vision Systems* by G. Kootstra, N. Bergstrom, D. Kragic (2011).)\n:::\n\n\n### Accessible Data Visualizations\n\n#### Color\n\nColor can be one of the most challenging---and important---attributes to apply\nto a plot. Special care must be taken when applying color to our data\nvisualizations to ensure they are accessible to persons with color blindness.\nColor blindness prevents viewers from distinguishing between certain colors,\ntheir brightness, and/or shades of a color. Affecting approximately 1 in 12 men\n(8%) and 1 in 200 women (0.5%) around the world, it is likely that some viewers\nof your data visualization will perceive its colors differently.\n\nOverall [we're not doing a good job at using color mindfully in our science\ncommunication][crameri20]. If you want to use color, the following are some\nrecommendations to keep in mind.\n\n**Recommendation 1: Avoid problematic color combinations.** The most common\ntypes of color blindness makes it hard to tell the difference between red and\ngreen (deuteranope and protanope color blindness). Blue-yellow color blindness\n(tritanope) is less common. Avoid using: red/green, green/brown, green/blue,\nblue/gray combinations. Many graphing software unfortunately use these\ncombinations as a default and you will have to manually change this on your\nfigures.\n\nTo demonstrate why these combinations are problematic, here is a color vision\ntest:\n\n::: {#fig-color-vision}\n![](/images/ch08/nature_color_science_fails.PNG)\n\n(source: [Crameri, F., Shephard, G.E. & Heron, P.J. The misuse of colour in\nscience communication. Nat Commun 11, 5444 (2020)][crameri20])\n:::\n\n[crameri20]: https://doi.org/10.1038/s41467-020-19160-7\n\n**Recommendation 2: Use an online tool to help you pick a colorblind friendly\npalette** depending on your data and visualization needs. Examples include:\n\n* [colorbrewer][]: palettes, color advice for mapping, and good general tips\n* [coolors][]\n\n[colorbrewer]: https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3\n[coolors]: https://coolors.co/\n\n::: {#fig-colorbrewer}\n![](/images/ch08/color_brewer_screengrab.PNG)\n:::\n\n**Recommendation 3: Use a colorblindness simulator** to check your\nvisualization. Who won't be able to see the differences you're trying to\ndisplay with color? Here are a few simulators:\n\n* [Coblis][]\n* [Color Oracle][color-oracle]\n\n[Coblis]: http://www.color-blindness.com/coblis-color-blindness-simulator/\n[color-oracle]: https://colororacle.org/\n\n**Recommendation 4: Add textures**, symbols, or other channels to reinforce the\ngrouping attributes on your plot.\n\n::: {#fig-textures}\n![](/images/ch08/textures_js.PNG)\n\n([source][textures.js])\n:::\n\n**Recommendation 5: Rethink your plot.** You may not actually need color at all\nto effectively display your data.\n\n::: {#fig-color-blindness}\n![](/images/ch08/dataquest_color_blindness_example.PNG)\n\n([source][source-color-blindness])\n:::\n\n[source-color-blindness]: https://www.dataquest.io/blog/what-to-consider-when-choosing-colors-for-data-visualization/\n\n::: {.callout-note title=\"See also\" collapse=\"true\"}\nHere are some more resources to help you use color effectively and mindfully in\nyour data visualizations.\n\nColor and design:\n\n* [Visualization-Aware Color Design: Aesthetic, Perceptual & Functional\n  Constraints][szafir16]\n* [Modeling Color Difference for Visualization Design][szafir17] (n experiment\n  showing how mark type influences color perception in data viz)\n* [Textures and patterns for colorblindness][textures.js]\n\n[szafir16]: https://doi.org/10.2312/eurp.20161151\n[szafir17]: https://cmci.colorado.edu/visualab/papers/colordiff_vis2017.pdf\n<!-- [szafir17]: https://doi.org/10.1109/TVCG.2017.2744359 -->\n[textures.js]: https://wearecolorblind.com/resources/textures-js-patterns-for-data-visualization/\n\nColor accessibility in R:\n\n* [RColorBrewer package][RColorBrewer]\n* [viridis package][viridis]\n* [ggpattern package][ggpattern]\n* [R color cheatsheet][color-cheatsheet]\n\n[RColorBrewer]: https://cran.r-project.org/web/packages/RColorBrewer/\n[ggpattern]: https://coolbutuseless.github.io/package/ggpattern/\n[viridis]: https://sjmgarnier.github.io/viridis/\n[color-cheatsheet]: https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/colorPaletteCheatsheet.pdf\n:::\n\n#### Alternative Text\n\nSo far we've taken for granted that visualization is an accessible mode of\ncommunication, but researchers and audiences alike are not all sighted. RStudio\nis behind on vision impairment accessibility, but some packages can provide\ntext descriptions and sonification/audification of plots to improve\naccessibility for non-visual data interaction.\n\nFor example, the [BrailleR package][BrailleR], has a `VI` function that wraps\naround ggplot objects and provides a text-description output. This description\nis a starting point but it does not summarize the data itself, so it is\nimportant to consider also informative figure captions or embedded alternative\ntext so that all viewers are able to interpret the visualization.\n\n[BrailleR]: https://r-resources.massey.ac.nz/BrailleRInAction/\n\nOther packages like the sonification package’s `sonify` function can be used to\nrepresent data in audio form. With the function, the x-axis can span sound\nacross time, so that the length of time a sound plays follows the data long the\nx-axis from left to right; the y-axis can be expressed as pitch, so that the\npitch of the sound matches to the values of the data (lower value means lower\npitch).\n\n### Designing Statistical Graphics\n\nYou are now ready to make your plot! You can combine marks and channels to\ncreate nearly any plot type, and there are many established types of\nstatistical graphics that you can choose from to showcase your data. Each type\nhas its benefits, and drawbacks, based on how it encodes your data.\n\n::: {.callout-tip}\nMatch the chart type to your data---and what you want it to show---and not the\nother way around.\n:::\n\n#### Step 1: Identify Your Data Type {.unnumbered}\n\nData can be quantitative or qualitative:\n\n* Quantitative data is either continuous (numerical data like height and\n  weight), or discrete (constrained values, such as the number of children in a\n  family).\n* Qualitative data can be ordered (categories that have a relationship but no\n  meaningful distance between them, such as movie star ratings), or nominal\n  (categories that have no meaningful order, such as gender).\n\n#### Step 2: Determine Your Functional Approach {.unnumbered}\n\nAsk ask yourself:\n\n* What are the tasks you want the visual to support?\n   + Showing how values compare to each other? How the data are distributed?\n     How they are composed? How values relate?\n* What specific visual best supports those tasks?\n* What do you expect people to naturally do in their \"visual queries\" as they\n  explore the plot?\n* How can you modify the graphical marks and channels to support faster\n  queries?\n\n#### Step 3: Select a Plot Type {.unnumbered}\n\nNow that you've identified your data types and what you need your visualization\nto show, explore your different chart type options! Start with this nifty [From\nData to Viz][data-to-viz] tool. Select your data type(s) and click through for\nthe pros, cons, and alternate options for a bevy of charts.\n\n[data-to-viz]: https://www.data-to-viz.com/\n\n::: {#fig-data-to-viz}\n![](/images/ch08/from_data_to_viz_screengrab.PNG)\n:::\n\nFor example, if you want to enable accurate comparisons of individual\nquantitative values and their relationships, try a scatterplot or a chart with\nlines or bars sitting aligned on a single axis.\n\nThe following list contains an overview of some of the most common plot types\nyou may encounter:\n\n**Single quantitative variables** are plotted to show the frequency\ndistribution of the data. While **histograms** are the most common density\nplots, a single quantitative variable can also be plotted using a rug\nplot/strip chart, boxplot, or violin plot (described below, where they're most\ncommonly employed).\n\n**Two quantitative variables** can be plotted using a:\n\n* **Scatterplot**: each axis encodes the values of a different quantitative\n  variable, and individual data are represented as points (or dots) on the\n  chart.\n* **Line plot**: data points are connected by straight lines. Line-scatter\n  plots are are common for time series or trend data.\n\n**One quantitative and one qualitative variable** are suitable for a:\n\n* **Bar chart**: bars represent the amount of data in different categories of a\n  variable. One axis encodes the frequencies of the quantitative data, and the\n  other axis the categories of the qualitative data.\n* **Boxplot**: shows the median, quartiles, and bounds of your data.\n* **Violin plot**: in essence, a boxplot that also shows the distribution of\n  your quantitative variable.\n* **Word cloud**: these eye-catching visualizations display a list of words\n  with their font size corresponding to their importance. But, they require\n  huge sample sizes and are not very useful as they often distort reality. For\n  example, long words will look more prominent just because they have more\n  letters and cover more area---our eyes don't intuitively parse out word\n  height from length.\n* **Pie chart**: uses relative frequencies to show how large each category is\n  in relation to the whole.\n\n::: {.callout-important title=\"Warning\"}\nPie charts are grudgingly listed here because you will see them in the wild,\nbut resist the temptation to use them!\n\nBased on our visual perception, pie charts are inherently problematic because\nthey encode values as visual attributes. Pie charts encode data as the area of\neach slice, as well as the angle that it forms in the center of the pie, making\nit difficult to easily perceive and compare differences.\n\nOver [492 posts on WTF Visualizations][wtf-pie] are tagged as pie charts!\nAlmost any other chart type is better than a pie chart.\n\n[wtf-pie]: https://viz.wtf/archive/tagged/piechart\n:::\n\nOther complex plot types you may encounter that layer additional marks and channels on the above chart types are:\n\n* **Lollipop chart**: a dot chart where the dots are connected by lines to an\n  axis.\n* **Mosaic plot**: also called a treemap, these plots display hierarchical data\n  as sets of nested rectangles sized proportionately to their values.\n* **Bubble plots**: scatterplots where the size of a dot corresponds to a third\n  numerical or ordered categorical value.\n* **Radar plots / star chart**: line plots where each variable has its own axis\n  and all axes are joined at the center of the figure.\n* **Network diagrams**: also called graphs, these plots show connections\n  (edges) between entities (nodes).\n\n::: {.callout-note title=\"See also\"}\nTo learn more about network diagrams, check out DataLab's [network\ntoolkit][network-toolkit] and [network analysis workshop][datalab-network].\n\n[network-toolkit]: https://ucdavisdatalab.github.io/research-toolkits/network_researcher_toolkit.html\n[datalab-network]: https://www.youtube.com/watch?v=H6IkFnykX1s&feature=youtu.be\n:::\n\n::: {.callout-note title=\"See also\"}\nGoogle also has an [interactive plot gallery][google-gallery]. And [this Stack\nExchange post][se-plots] has even more chart type resources.\n\nBut remember, some encodings are more difficult to accurately decode. When in doubt, stick to simple figures with points and lines.\n\n[google-gallery]: https://developers.google.com/chart/interactive/docs/gallery?csw=1\n[se-plots]: https://stats.stackexchange.com/questions/78844/a-gallery-of-charts-diagrams-and-plot-types\n:::\n\n::: {.callout-note title=\"What About Maps?!\"}\nGeospatial data visualization by nature is complex and encodes a lot of\nattributes. Interested in learning more? Check our DataLab's [Spatial Sciences\nresearch and learning cluster][maptime] and [workshops].\n\n[maptime]: https://datalab.ucdavis.edu/spatial-sciences/\n[workshops]: https://stage-datalab.library.ucdavis.edu/workshops/descriptions/\n:::\n\n\n#### Step 4: Iterate {.unnumbered}\n\nCreate your visual, and run through step 2 again keeping in mind the principles\nof visual perception, effectiveness and efficiency. Does it meet your needs? If\nnot, try a different type. **Graphing, like writing, requires continuous\nediting.**\n\n\n### Tips for Better Plots\n\nMaking effective data visualizations takes practice and experience. The more\nplots you look at, the more you will intuitively recognize what works---and\nwhat doesn't---for data visual storytelling. One takeaway I hope you discover\nis the need to avoid unnecessary complexities.\n\n::: {.callout-tip}\nIf the “story” is simple, keep it simple. If the “story” is complex, make it\nlook simple.\n:::\n\nBelow are some tips to help achieve those goals.\n\n#### Get Rid of Chartjunk\n\nAn easy way to instantly improve your plots is to eliminate superfluous\nmaterial. Extra tick marks and grid lines; unnecessary text and arrows; decimal\nplaces beyond the measurement error of the level of difference; cute little\nbutterfly clip art: this **chartjunk** has no meaning and it clutters up a\nchart, making it hard for your viewer to see what's most important---your data.\nThe amount of ink on your figure should directly correspond with the amount of\ndata you present. If it doesn't, you have a lot of chartjunk. (Evidence #10298\nthat pie charts are never a good choice.)\n\nTry these de-cluttering steps to improve your charts:\n\n* Shift from center to left-justified text\n* Retain white space\n* Clear contrasts\n* Remove chart borders\n* Remove (or strongly mute) gridlines\n* Remove data markers and point labels (unless they are important)\n* Remove unnecessary polygon filling\n* Cleanup and rename axis labels to be intuitive\n* Replace the title with something informative\n* Label the data directly using the principle of proximity\n* Leverage consistent color and other aesthetics\n\nCreating visual order and reducing chartjunk will dramatically improve your\ngraphic by helping your data stand out.\n\n#### Facilitate Comparisons\n\n* Avoid having the graph elements interfere with the data\n* Juxtapose or supepose plots (using the same scales)\n* Use visually prominent symbols\n* Avoid over-plotting; try jittering, or smoothing\n* Don't change a scale mid-axis\n* Use only one scale on one axis\n* Use color, judiciously\n* Avoid jiggling the baseline\n* Don't distort the data; take care when selecting the encodings\n\nA common mistake is to use more encodings than there are dimensions of the\ndata. If you data only has two dimensions (say number of students in STEM by\ngender identity), your figure could reasonably use points, rarely area, and\nnever volume. (I'm looking at you, 3D pie chart.)\n\n#### Create Information-Rich Plots\n\nData visualizations cannot exist without text. They require context to infer\nmeaning. Ask yourself:\n\n* Does the caption describe what has been graphed? Does it draw attention to\n  the important features? Describe the conclusions drawn by the graph?\n* Are the legends and labels clear and intuitive?\n* Are important reference lines and points labeled?\n\n#### Don't Distort the Data\n\nThere's a bestselling book called [\"How to Lie with Statistics\"][]. Written by\nthe journalist (and not a statistician) Darrell Huff in 1954, the book focuses\non how decisions we make in selecting the data and analysis method, along with\nerrors in interpretation, can generate incorrect conclusions. Similarly,\nvisualization principles can be mis-applied when graphing such that the\ntakeaway message from a graphic distorts reality. Review your plots to make\nsure they both tell, and show, the truth.\n\n[huff54]: https://en.wikipedia.org/wiki/How_to_Lie_with_Statistics\n\n#### Practice\n\nJust as an author edits before publishing the novel, and an artist sketches\nbefore making the masterpiece, plotting is an iterative process. Proofread for\nclarity and consistency. Check whether your plots pass the expressiveness and\neffectiveness tests. Does a viewer draw the same conclusions from the figure\nthat you do?\n\nHere's a [cheat sheet and checklist][checklist] to help you design and improve\nyour data visualizations. Happy plotting!\n\n[checklist]: https://docs.google.com/document/d/1rwoa8XPgvTKHE5Weh9RhrO8igfJ6E8bqyZtddZpwomc/edit?usp=sharing\n\n\n::: {.callout-note title=\"References and Additional Resources\" collapse=\"true\"}\nWebsites:\n\n* [Milestones in the History of Thematic Cartography, Statistical Graphics, and\n  Data Visualization][milestones]\n* [From Data to Viz][data-to-viz]\n* [Information is Beautiful][info-beautiful]\n* [Flowing Data][flowing-data]\n* [WTF Visualizations][wtf-viz]\n* [Perception in Visualization][healy-perception], a computer scientist's\n  viewpoint\n\n[milestones]: https://www.datavis.ca/milestones/\n[healy-perception]: https://www.csc2.ncsu.edu/faculty/healey/PP/\n\nArticles:\n\n* Mickinlay, Jock. 1986. Automating the design of graphical presentations of\n  relational information. ACM Transactions on Graphics.\n  <https://doi.org/10.1145/22949.22950>\n* Cleveland, William S. & Kleiner, Beat. 1975. A Graphical Technique for\n  Enhancing Scatterplots with Moving Statistics. In Proceedings of the Annual\n  Meeting. Atlanta, GA.\n* Fisher, Ronald Alymer. (1915). Theory of Statistical Estimation. Proceedings\n  of the Cambridge Philosophical Society. 22. 700-725.\n\nContemporary books and chapters:\n\n* Cleveland, William. 1994. The elements of graphing data, 2nd edition. Hobart\n  Press.\n* Drucker, J. 2014. Graphesis: Visual Forms of Knowledge Production. Harvard\n  UP. Cambridge, MA.\n* Friendly, M. 2007. A Brief History of Data Visualization. In Handbook of\n  Computational Statistics: Data Visualization. III. Springer-Verlag.\n  Heidelberg. 1-34.\n* Munzner, Tamara. 2014. [Visualization analysis and design][munzner14].\n* Huff, Darrell. 1954. How to Lie with statistics. W. W. Norton & Company. New\n  York.\n* Tufte, Edward R. 1983. The Visual Display of Quantitative Information.\n  Graphics Press. Cheshire, CT.\n* Wainer, Howard. 2007. [Graphic discovery: a trout in the milk and other\n  visual adventures][howard07].\n* Wilkinson, Leland. 2005. The Grammar of Graphics, 2nd ed.. Springer. New\n  York. Yau, Visualize this: The flowing data guide to design, visualization,\n  and statistics\n\n[howard07]: https://press.princeton.edu/books/paperback/9780691134055/graphic-discovery\n\nHistorical books:\n\n* Bertin, Jacques. 1983. Semiology of Graphics. University of Wisconsin Press.\n  Madison, WI. (trans. W. Berg) 1967\n* Descartes, Réne. 1637. La Géométrie. In Discours de la Méthode. Essellier.\n  Paris.\n* Minard, Charles Joseph. 1861. Des Tableaux Graphiques et des Cartes\n  Figuratives. E. Thunot et Cie. Paris.\n* Playfair, William. 1786. Commercial and Political Atlas: Representing, by\n  Copper-Plate Charts, the Progress of the Commerce, Revenues, Expenditure, and\n  Debts of England, during the Whole of the Eighteenth Century. Corry. London.\n* Snow, John. 1855. On the Mode of Communication of Cholera. (n.p.). London.\n* Tukey, John Wilder. 1977. Exploratory Data Analysis. Addison-Wesley. Reading,\n  MA.\n* Tukey, John Wilder. 1960. [A survey of sampling from contaminated\n  distributions. In Contributions to Probability and Statistics: Essays in\n  Honor of Harold Hotelling][tukey60] (I. Olkin et al., eds.) 448–485. Stanford\n  Univ. Press.\n\nR graphics references:\n\n* Murrell, Paul. 2019. R Graphics (3rd Edition). Chapman and Hall/CRC.\n* Sarkar, Deepayan. 2008. Lattice: Multivariate data visualization with R.\n  Springer.\n* [ggplot2: Elegant Graphics for Data Analysis (3e)][ggplot2-book] by Wickham,\n  Navarro, and Pedersen\n* [R Graphics Cookbook (2e)][r-graphics-cookbook] by Chang\n\n[ggplot2-book]: https://ggplot2-book.org/\n[r-graphics-cookbook]: https://r-graphics.org/\n:::\n\n\n## Data Viz with `ggplot` in R\n\n### R Graphics Overview\n\nThere are three popular systems for creating visualizations in R:\n\n1. The base R functions (primarily the `plot` function)\n2. The lattice package\n3. The ggplot2 package\n\nThese three systems are not interoperable! Consequently, it's best to choose\none to use exclusively. Compared to base R, both lattice and ggplot2 are better\nat handling grouped data and generally require less code to create a\nnice-looking visualization.\n\nThe ggplot2 package is so popular that there are now knockoff packages for\nother data-science-oriented programming languages like Python and Julia. The\npackage is also part of the Tidyverse. Because of these advantages, we'll use\nggplot2 for visualizations in this and all future lessons.\n\n### The Grammar of Graphics\n\n`ggplot2` has detailed [documentation][ggplot2-docs] and also a\n[cheatsheet][ggplot2-cheat].\n\n[ggplot2-docs]: https://ggplot2.tidyverse.org/\n[ggplot2-cheat]: https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf\n\nThe \"gg\" in ggplot2 stands for **grammar of graphics**. The idea of a grammar\nof graphics is that visualizations can be built up in layers. In ggplot2, the\nthree layers every plot must have are:\n\n* Data\n* Geometry\n* Aesthetics\n\nThere are also several optional layers. Here are a few:\n\nLayer       | Description\n----------  | -----------\nscales      | Title, label, and axis value settings\nfacets      | Side-by-side plots\nguides      | Axis and legend position settings\nannotations | Shapes that are not mapped to data\ncoordinates | Coordinate systems (Cartesian, logarithmic, polar)\nthemes      | Display of non-data elements\n\n: {.striped .hover}\n\n\n#### Making a Plot\n\nFor the plotting examples, let's take the wine reviews data that we have been\nworking with, and subset it to focus in on Cabernet Sauvignon from the Central Valley.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine_revs = read.csv(\"data/wine_enthusiast_rankings.csv\")\nwine_cv = subset(wine_revs, region_2 == \"Central Valley\" &\n                   variety == \"Cabernet Sauvignon\")\n```\n:::\n\n\n\n\nNext we need to load `ggplot2`. As always, if this is your first time using the\npackage, you'll have to install it. Then you can load the package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\n\n\nWhat kind of plot should we make? It depends on what data we want the plot to\nshow. Let's make a plot that shows the price of the wine\nagainst the points awarded to that wine by the reviewers. Both the\nprice and the points are recorded as numbers. A scatter plot is a good\nchoice for displaying two numeric features. Later we'll learn about other\noptions, but for now we'll make a scatter plot.\n\n\n##### Layer 1: Data {.unnumbered}\n\nThe data layer determines the data set used to make the plot. ggplot and most\nother Tidyverse packages are designed for working with **tidy** data frames.\nTidy means:\n\n1. Each observation has its own row.\n2. Each feature has its own column.\n3. Each value has its own cell.\n\nTidy data sets are convenient in general. A later lesson will cover how to make\nan untidy data set tidy. Until then, we'll take it for granted that the data\nsets we work with are tidy.\n\nTo set up the data layer, call the `ggplot` function on a data frame:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv)\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\nThis returns a blank plot. We still need to add a few more layers.\n\n\n##### Layer 2: Geometry {.unnumbered}\n\nThe **geom**etry layer determines the shape or appearance of the visual\nelements of the plot. In other words, the geometry layer determines what kind\nof plot to make: one with points, lines, boxes, or something else.\n\nThere are many different geometries available in ggplot2. The package provides\na function for each geometry, always prefixed with `geom_`.\n\nTo add a geometry layer to the plot, choose the `geom_` function you want and\nadd it to the plot with the `+` operator:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) + geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `geom_point()`:\n! Problem while setting up geom.\nℹ Error occurred in the 1st layer.\nCaused by error in `compute_geom_1()`:\n! `geom_point()` requires the following missing aesthetics: x and y.\n```\n\n\n:::\n:::\n\n\n\n\nThis returns an error message that we're missing aesthetics `x` and `y`. We'll\nlearn more about aesthetics in the next section, but this error message is\nespecially helpful: it tells us exactly what we're missing. When you use a\ngeometry you're unfamiliar with, it can be helpful to run the code for just the\ndata and geometry layer like this, to see exactly which aesthetics need to be\nset.\n\nAs we'll see later, it's possible to add multiple geometries to a plot.\n\n\n##### Layer 3: Aesthetic Mappings {.unnumbered}\n\nThe **aes**thetic mapping determines the relationship between the data and the\ngeometry. Use this mapping to connect features in the data to **aesthetics**\n(visual elements) of the geometry.\n\nThe `aes` function creates an aesthetic mapping. The syntax is:\n\n```r\naes(AESTHETIC = FEATURE, ...)\n```\n\nWhich aesthetics are relevant depends on the geometry, but some common ones are\n`x`, `y`, `color`, `fill`, `shape`, `alpha`, and `size`. There is more\ninformation about and examples of aesthetic names in the documentation.\n\nFor example, if we want to put the `price` feature on the x-axis, the aesthetic\nmapping should be:\n\n```r\naes(x = price)\n```\n\nIn the `aes` function, column names are never quoted.\n\nThere are a few ways to attach the aesthetic mapping to your plot. The simplest\nmethod is to add the aesthetic mapping to the plot like any other layer. This\nembeds an assumption that there is only one mapping for this plot. When this is\nnot the case, we will soon see that specifying the mapping as the `mapping`\nargument of the geometry is a more precise way to say what data features map to\nwhat aesthetics. For now, we use the simple method.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = price, y = points) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nAesthetics can be informed by data (e.g. the price column) or by constant\nvalues (e.g. the color \"blue\"). Whether the value is informed by the data or\nconstant will determine where to place that piece of information.\n\n::: {.callout-caution collapse=\"false\"}\nGenerally, constant values should not be placed inside an aesthetic mapping (a\ncall to the `aes` function) because a mapping connects data features to\naethetics and a constant value is not a data feature.\n\nIf you set a constant value *inside* of the aesthetic mapping, the results you\nget might not be what you expect. For instance, suppose we want to make the\npoints blue:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = price, y = points, color = \"blue\") +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nInstead, if you want to set an aesthetic to a constant value, rather than one\nthat's data dependent, do so *outside* of the aesthetic mapping.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = price, y = points) +\n  geom_point(color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nNotice that when we specify the color \"blue\" (outside of aesthetic mapping), R\nunderstands what we mean.\n:::\n\n::: {.callout-tip}\n<!-- FIXME: @ref -->\nThere is a [long list of color names that R recognizes][r-colors]. But you can\nalso use specific hex codes or palettes like were recommended in the previous\nsection on Accessible Data Visualizations.\n\n[r-colors]: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf\n:::\n\n::: {.callout-tip collapse=\"false\"}\nAnother useful constant aesthetic is the `alpha` argument, which adjusts the\ntransparency of the points using a range from 0 to 1 (0 is fully transparent\nand 1 is fully opaque). This can be useful because `geom_point` plots points\nwith identical coordinates on top of one another, and semi-transparent points\nmake it visually clear where there are multiple points stacked up.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = price, y = points) +\n  geom_point(color = \"blue\", alpha = .3)\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n##### Per-geometry Aesthetics {.unnumbered}\n\nWhen you add an aesthetic mapping to the `ggplot` function, it applies to the\nentire plot. You can also set an aesthetic mapping individually for each\ngeometry, by passing the mapping as the `mapping` argument in the `geom_`\nfunction. Before we test this out, let's make a smaller subset of our wines,\nwhat we'll called `underrated_wines`, because they cost less than $20 and have\nscores higher than 85.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunderrated_wines <- subset(wine_cv, price < 20 & points > 85)\nnrow(underrated_wines)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40\n```\n\n\n:::\n:::\n\n\n\n\nNow, let's first add the aesthetic mapping to the `ggplot` functions, and add\ncolor by region to take a look at where these wines are from within the Central\nValley.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(underrated_wines) +\n  aes(x = price, y = points, color = region_1) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nNow let's add another geometry to better understand the effect of aesthetic\nplacements. Let's add a `geom_text` layer to add labels to the plot based on\nwho ranked this wine (`taster_name`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(underrated_wines) +\n  aes(x = price, y = points, color = region_1, label = taster_name) +\n  geom_point() +\n  geom_text(size = 3)\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nIn the example above, both geometries (`geom_point` and `geom_text`), take on\nthe same color aesthetic mapping. So, where we put the aesthetics matters. If\nwe move the color aesthetic to the `geom_text` layer, how does the plot change?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(underrated_wines) +\n  aes(x = price, y = points, label = taster_name) +\n  geom_point() +\n  geom_text(mapping=aes(color = region_1), size = 3)\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can also move the color aesthetic to the `geom_point` layer to experiment:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(underrated_wines) +\n  aes(x = price, y = points, label = taster_name) +\n  geom_point(mapping = aes(color = region_1)) +\n  geom_text(size = 3)\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nHow might we be able to better see all 40 of the observations? Let's try the\n`position` argument within each geometry, where `position = position_jitter()`\nwill adjust (or \"jitter\") the points.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(underrated_wines) +\n  aes(x = price, y = points, label = taster_name) +\n  geom_point(aes(color = region_1), position = position_jitter(seed = 1)) +\n  geom_text(size = 3, position = position_jitter(seed = 1))\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n##### Other Layers: Scales and Themes {.unnumbered}\n\nThe scales layer controls the title, axis labels, and axis scales of the plot.\nMost of the functions in the scales layer are prefixed with `scale_`, but not\nall of them.\n\nThe `labs` function is especially important, because it's used to set the title\nand axis labels:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = price, y = points, color = region_1) +\n  geom_point() +\n  labs(title = \"Central Valley Cabernet Sauvignon price by wine score points\",\n       x = \"Price ($)\", y = \"Points\", color = \"Region\")\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can add `theme` layers that change the non-data components of the figure.\n\n::: {.callout-tip}\nggplot2 comes with [several themes][ggplot-themes] which can be useful to\nquickly change the look of your visualization. Popular themes include\n`theme_classic`, `theme_minimal`, and `theme_light`.\n\n[ggplot-themes]: https://ggplot2.tidyverse.org/reference/ggtheme.html\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = price, y = points, color = region_1) +\n  geom_point() +\n  labs(title = \"Central Valley Cabernet Sauvignon price by wine score points\",\n       x = \"Price ($)\", y = \"Points\", color = \"Region\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can assign plots to variables:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine_plot <- ggplot(wine_cv) +\n  aes(x = price, y = points, color = region_1) +\n  geom_point() +\n  labs(title = \"Central Valley Cabernet Sauvignon price by wine score points\",\n       x = \"Price ($)\", y = \"Points\", color = \"Region\") +\n  theme_minimal()\n```\n:::\n\n\n\n\nNote what kind of object this is:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(wine_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(wine_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"gg\"     \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\n### Saving Plots\n\n#### `ggsave` {.unnumbered}\n\nIn ggplot2, use the `ggsave` function to save the most recent plot you created:\n\n```r\nggsave(plot = wine_plot, \"scatter_plot.png\")\n```\n\nThe file format is selected automatically based on the extension. Common\nformats are PNG and PDF.\n\n#### The Plot Device {.unnumbered}\n\nYou can also save a plot with one of R's \"plot device\" functions. The steps\nare:\n\n1. Call a plot device function: `png`, `jpeg`, `pdf`, `bmp`, `tiff`, or `svg`.\n2. Run your code to make the plot.\n3. Call `dev.off` to indicate that you're done plotting.\n\nThis strategy works with any of R's graphics systems (not just ggplot2).\n\nHere's an example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run these lines in the console, not the notebook!\njpeg(\"scatter_plot.jpeg\")\nwine_plot\ndev.off()\n```\n:::\n\n\n\n\n\n### Example: Bar Plot\n\nLet's say we want to plot the number of wines for each region in the Central\nValley. A bar plot is an appropriate way to represent this visually.\n\nThe geometry for a bar plot is `geom_bar`. Since bar plots are mainly used to\ndisplay frequencies, the `geom_bar` function automatically computes frequencies\nwhen given mapped to a categorical feature. So we can write:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv, aes(x = region_1)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\nTo prevent `geom_bar` from computing frequencies automatically, set `stat =\n\"identity\"`. This is mainly useful if you want to plot quantities you've\ncomputed manually on the y-axis.\n\n#### Position Adjustment\n\nJust as you added color to group the scatter plot data, you may want to add a\ncolor grouping to the bar plot. For bar plots, this will take the `fill`\nargument instead of the `color` argument. (The `color` argument will outline\nthe bars in a color, whereas the `fill` argument will fill them in with a\ndefault color scheme.)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = region_1) +\n  geom_bar(aes(fill = taster_name))\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\nThe `geom_bar` function automatically positions the grouped colors or fills on\ntop of one another (default argument `position = \"identity\"`). If you want to\nchange the position of the groupings, you can set `position = \"dodge\"` to\ndisplay the groups side-by-side.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = region_1) +\n  geom_bar(mapping = aes(fill = taster_name), position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n### Remembering Factors\n\nA feature is **categorical** if it measures a qualitative category. For\nexample, the genres `rock`, `blues`, `alternative`, `folk`, `pop` are\ncategories.\n\nR uses the class `factor` to represent categorical data. Visualizations and\nstatistical models sometimes treat factors differently than other data types,\nso it's important to make sure you have the right data type. If you're ever\nunsure, remember that you can check the class of an object with the `class`\nfunction.\n\nWhen you load a data set, R usually can't tell which features are categorical.\nThat means identifying and converting the categorical features is up to you.\nThis can be especially helpful to know if you are plotting categories, but want\nthem to have a particular order, other than the default (alphabetical).\n\nLet's think about which features are categorical in the class wine reviews\ndata.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(wine_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t104 obs. of  14 variables:\n $ X                    : int  954 2765 3397 4549 4686 4944 5426 5975 6964 8633 ...\n $ country              : chr  \"US\" \"US\" \"US\" \"US\" ...\n $ description          : chr  \"Full-bodied and smooth in texture, this generous-tasting wine has lots of ripe plum flavors and sweet-seeming oak accents.\" \"This full-bodied wine has earthy, woodsy aromas, ripe and mature fruit flavors and a broad, almost soft texture\"| __truncated__ \"This is on the light side, with simple flavors and a juicy, soft texture that shows very little tannin. Aromas \"| __truncated__ \"A very basic Cabernet Sauvignon, very low in alcohol, with a harshness on the finish.\" ...\n $ designation          : chr  \"Reserve Bottling\" \"Judy's Vineyard\" \"\" \"\" ...\n $ points               : int  87 84 84 81 91 86 88 87 86 86 ...\n $ price                : num  15 29 13 11 20 11 12 10 13 14 ...\n $ province             : chr  \"California\" \"California\" \"California\" \"California\" ...\n $ region_1             : chr  \"Lodi\" \"Lodi\" \"Lodi\" \"Lodi\" ...\n $ region_2             : chr  \"Central Valley\" \"Central Valley\" \"Central Valley\" \"Central Valley\" ...\n $ taster_name          : chr  \"Jim Gordon\" \"Jim Gordon\" \"Jim Gordon\" \"Virginie Boone\" ...\n $ taster_twitter_handle: chr  \"@gordone_cellars\" \"@gordone_cellars\" \"@gordone_cellars\" \"@vboone\" ...\n $ title                : chr  \"Archgate Cellars 2014 Reserve Bottling Cabernet Sauvignon (Lodi)\" \"Housley's Century Oak 2013 Judy's Vineyard Cabernet Sauvignon (Lodi)\" \"Cable Car 2013 Cabernet Sauvignon (Lodi)\" \"Harlow Ridge 2011 Cabernet Sauvignon (Lodi)\" ...\n $ variety              : chr  \"Cabernet Sauvignon\" \"Cabernet Sauvignon\" \"Cabernet Sauvignon\" \"Cabernet Sauvignon\" ...\n $ winery               : chr  \"Archgate Cellars\" \"Housley's Century Oak\" \"Cable Car\" \"Harlow Ridge\" ...\n```\n\n\n:::\n:::\n\n\n\n\nThe numeric columns in this data set (`price`, `points`) are all quantitative,\nso they're not categorical. That leaves the character columns.\n\nBecause we have subsetted only the Cabernet Sauvignon varieties in the Central\nValley, we know that features like `province`, `region_2`, and `variety` have\nno variation. So that leaves us with the other character variables. Some of\nthese, like winery, have too many groups to really consider useful:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(wine_cv$winery)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n         337 Wine Cellars          Archgate Cellars           Black's Station \n                        1                         1                         2 \n                Cable Car                Caricature          Christine Andrew \n                        2                         1                         1 \n                 Concrete            Cooper Station                 Cosentino \n                        2                         2                         1 \n              Criss Cross          Cycles Gladiator                Earthquake \n                        2                         1                         4 \n                Five Rows                 Freakshow                      Gen5 \n                        1                         2                         3 \n             Harlow Ridge            Herman Walters     Housley's Century Oak \n                        1                         1                         1 \n               Insatiable                 Ironstone            James Mitchell \n                        1                         3                         4 \n            Klinker Brick                LangeTwins                Lapis Luna \n                        1                         4                         1 \nLeonardo Family Vineyards              Lodi Estates                      Loft \n                        1                         2                         1 \n                Matchbook  Mettler Family Vineyards             Michael David \n                        1                         7                         6 \n                Moon Eyes               Noble Vines                  Oak Farm \n                        1                         3                         3 \n                Oak Ridge                  Old Soul         Pavilion Crossing \n                        1                         1                         1 \n       Pavillion Crossing                   Peirano                   Peltier \n                        1                         5                         3 \n              Plungerhead                Sand Point     Scotto Family Cellars \n                        1                         1                         2 \n         Sharabella Wines               Shenanigans               Table No. 7 \n                        1                         1                         1 \n              The Crusher           The Dancing Fox            The Federalist \n                        1                         1                         1 \n              Toad Hollow            Tortoise Creek             Twisted Cedar \n                        1                         7                         1 \n                  un4seen                Van Ruiten          Victor Vineyards \n                        1                         2                         1 \n              Vino Vargas \n                        1 \n```\n\n\n:::\n:::\n\n\n\n\nOthers, such as `region_1` and `taster_name`, have fewer groupings---which is\nwhy we have used them so far for simplifying our visualizations. To reorder our\n`region_1` feature, lets' convert to to a factor using the `factor`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(wine_cv$region_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] Lodi           Lodi           Lodi           Lodi           Lodi          \n  [6] Lodi           Lodi           Lodi           Lodi           Lodi          \n [11] Lodi           Lodi           Lodi           Clarksburg     Lodi          \n [16] Lodi           Lodi           Lodi           Lodi           Lodi          \n [21] Lodi           Lodi           Lodi           Lodi           Yolo County   \n [26] Lodi           Lodi           Lodi           Lodi           Lodi          \n [31] Dunnigan Hills Lodi           Lodi           Lodi           Lodi          \n [36] Lodi           Lodi           Lodi           Clements Hills Lodi          \n [41] Yolo County    Lodi           Lodi           Lodi           Lodi          \n [46] Lodi           Lodi           Lodi           Lodi           Lodi          \n [51] Lodi           Lodi           Lodi           Lodi           Lodi          \n [56] Lodi           Lodi           Lodi           Lodi           Lodi          \n [61] Lodi           Lodi           Lodi           Lodi           Lodi          \n [66] Clarksburg     Lodi           Lodi           Lodi           Lodi          \n [71] Lodi           Lodi           Lodi           Lodi           Lodi          \n [76] Lodi           Lodi           Lodi           Lodi           Lodi          \n [81] Lodi           Lodi           Lodi           Lodi           Lodi          \n [86] Lodi           Lodi           Lodi           Clarksburg     Lodi          \n [91] Lodi           Lodi           Lodi           Lodi           Lodi          \n [96] Lodi           Lodi           Lodi           Clarksburg     Lodi          \n[101] Lodi           Lodi           Lodi           Lodi          \nLevels: Clarksburg Clements Hills Dunnigan Hills Lodi Yolo County\n```\n\n\n:::\n:::\n\n\n\n\nThe categories of a factor are called **levels**. You can list the levels with\nthe `levels` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(factor(wine_cv$region_1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Clarksburg\"     \"Clements Hills\" \"Dunnigan Hills\" \"Lodi\"          \n[5] \"Yolo County\"   \n```\n\n\n:::\n:::\n\n\n\n\nNotice that factors default the level order to be in alphabetical order. This\nis also true when we plot characters, which you can notice if we again call the\nbar plot we made that counted up the regions in our wine reviews data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = region_1) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Assigning Factor Levels\n\nBut what if we wanted to change the order of the x axis to be in descending\norder? We can change the level assignments. The easier way to do this is to\nre-write the feature as a factor again, but specify the order of the levels as\nan argument in the `factor` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregions = c(\n  \"Lodi\", \"Clarksburg\", \"Yolo County\", \"Clements Hills\", \"Dunnigan Hills\"\n)\nwine_cv$region_1_f <- factor(wine_cv$region_1, levels = regions)\nlevels(wine_cv$region_1_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Lodi\"           \"Clarksburg\"     \"Yolo County\"    \"Clements Hills\"\n[5] \"Dunnigan Hills\"\n```\n\n\n:::\n:::\n\n\n\n\nNow we can run the same plotting code, but see that the order of the x axis changed, based on the levels of the region_1 factor.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wine_cv) +\n  aes(x = region_1_f) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](08_data-visualization_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Designing a Visualization\n\nWhat plot is appropriate?\n\nFeature 1   | Feature 2   | Plot\n----------- | ----------- | ----\ncategorical |             | bar, dot\ncategorical | categorical | bar, dot, mosaic\nnumerical   |             | box, density, histogram\nnumerical   | categorical | box, density, ridge\nnumerical   | numerical   | line, scatter, smooth scatter\n\n: {.striped .hover}\n\nIf you want to add a:\n\n* 3rd numerical feature, use it to change point/line sizes.\n* 3rd categorical feature, use it to change point/line styles.\n* 4th categorical feature, use side-by-side plots.\n\nAlso:\n\n* Always add a title and axis labels. These should be in plain English, not\n  variable names!\n\n* Specify units after the axis label if the axis has units. For instance,\n  \"Height (ft)\".\n\n* Don't forget that many people are colorblind! Also, plots are often printed\n  in black and white. Use point and line styles to distinguish groups; color is\n  optional.\n\n* Add a legend whenever you've used more than one point or line style.\n\n* Always write a few sentences explaining what the plot reveals. Don't\n  describe the plot, because the reader can just look at it. Instead,\n  explain what they can learn from the plot and point out important details\n  that are easily overlooked.\n\n* Sometimes points get plotted on top of each other. This is called _over\n  plotting_. Plots with a lot of over plotting can be hard to read and can\n  even misrepresent the data by hiding how many points are present. Use a\n  two-dimensional density plot or jitter the points to deal with over plotting.\n\n* For side-by-side plots, use the same axis scales for both plots so that\n  comparing them is not deceptive.\n\n\n",
    "supporting": [
      "08_data-visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}