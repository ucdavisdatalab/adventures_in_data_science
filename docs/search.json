[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Adventures in Data Science",
    "section": "",
    "text": "Overview\n\nThis is the course reader for IST008, Adventures in Data Science: Social Science Edition. The course is designed to provide students with a basic understanding of computing and network architecture, basic programming skills, and an introduction to common methods in Data Science and Digital Humanities. This course reader provides background information that will help you to better understand the concepts that we will discuss in class and to better participate in the hands-on portion of the course.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "chapters/01_command-line.html",
    "href": "chapters/01_command-line.html",
    "title": "1  Command Line",
    "section": "",
    "text": "1.1 Understanding the Command Line\nMost users interact with their computer through a graphical user interface (GUI) that allows them to use a mouse, keyboard, and graphical elements on screen (such as file menus, pictures of folders and files, etc.) to perform their work. Users tend to conflate their Operating System and their GUI because computer hardware and software manufacturers tightly pack these two concerns as a convenience to users. But the Windows or macOS operating system that makes your computer work and the Windows or macOS GUI that you interact with are, in fact completely different and separable software packages and it is possible to use different methods/software to interact with your computer than the stock, tightly coupled GUI that launches automatically when you turn on your computer.\nBecause technology companies like Microsoft and Apple devote so many resources to the development of their system GUIs, there are few viable (at present, none, commercially available) competing GUIs for these platforms. This is not the case in the Linux world, however, where users have several system GUI packages from which to choose and can seamlessly switch between them as desired.\nDespite the lack of competition/choice on the GUI front when it comes to interacting with your computer, there are other, non-graphical ways of communicating directly with your operating system that exist for all operating systems. We call these command line interfaces. The command line offers a text-only, non graphical means of interacting with your computer. In the early days of computing, all user interaction with the computer happened at the command line. In the current days of graphical user interfaces, using the command line requires you to launch a special program that provides command line access.\nAll of the subsequent screenshots in this chapter show the macOS Terminal, but the commands and outputs are the same for (Windows) Git Bash.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Command Line</span>"
    ]
  },
  {
    "objectID": "chapters/01_command-line.html#understanding-the-command-line",
    "href": "chapters/01_command-line.html#understanding-the-command-line",
    "title": "1  Command Line",
    "section": "",
    "text": "macOSWindows\n\n\nMacOS users will use an application called Terminal which ships by default with the operating system. To launch the Terminal application, go to:\n\nApplications -&gt; Utilities -&gt; Terminal\n\nWhen you launch the application, you will see something like this:\n\n\n\nWindows users will use an application called Git Bash, which was installed on your system when you installed Git. To launch Git Bash, go to:\n\nClick on the Windows Start Menu and search for “Git Bash”\n\nAlternatively,\n\nClick on the Windows Start Menu, select Programs, and browse to Git Bash\n\nWhen you launch the application, you will see something like this:",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Command Line</span>"
    ]
  },
  {
    "objectID": "chapters/01_command-line.html#interacting-with-the-command-line",
    "href": "chapters/01_command-line.html#interacting-with-the-command-line",
    "title": "1  Command Line",
    "section": "1.2 Interacting with the Command Line",
    "text": "1.2 Interacting with the Command Line\nWhile it can look intimidating to those raised on the GUI, working with the command line is actually quite simple. Instead of pointing and clicking on things to make them happen, you type written commands.\nThe figure below shows a new, empty command line Interface in the macOS Terminal application:\n\nThe command line prompt contains a lot of valuable information. The beginning of the line, (base) MacPro-F5KWP01GF694 tells us exactly which computer we are communication with. This may seem redundant, but it is actually possible to interact with computers other than the one you are typing on by connecting to them via the command line over the network.\n\nThe bit of information after the colon (in this example, the ~ character) tells us where in the computer’s filesystem we are. We’ll learn more about this later, but for now you need to understand that the ~ character means that you are in your home directory.\n\nThe next piece of information we are given is the username under which we are logged into the computer. In this case, my local username: cstahmer.\n\nAfter the username, we see the $ character. This is known as the command prompt. It indicates that the command line is waiting for you to enter a command.\n\nDepending on your system and/or command line interface, you may or may not also see a solid or flashing box that appears after the command prompt. This is a cursor position indicator, which tells you where the current cursor is in the terminal. This is useful if you need to go back and correct an error. Generally speaking, you can’t click a mouse in a terminal app to edit text. You need to use your computer’s right and left arrows to move the cursor to the correct location and then make your edit.\n\nAs noted earlier, we interact with the command line by typing commands. The figure below shows an example of a simple command, echo, being entered into the command line.\n\nThe echo command prints back to screen any text that you supply to the command. It literally echoes your text. To execute, this or any command, you simply hit the Return or Enter key on your keyboard. You’ll see that when you execute a command, the command line performs the indicated operation, prints any output from the operation to screen, and then delivers a new command line prompt.\n\nNote that depending on your particular system and/or command line interface, things might look slightly different on your computer. However, the basic presentation and function as described above will be the same.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Command Line</span>"
    ]
  },
  {
    "objectID": "chapters/01_command-line.html#common-command-line-commands",
    "href": "chapters/01_command-line.html#common-command-line-commands",
    "title": "1  Command Line",
    "section": "1.3 Common Command Line Commands",
    "text": "1.3 Common Command Line Commands\nDuring our hands-on, in-class session we will practice using the following command line commands. Be prepared to have this page ready as a reference during class to make things easier.\n\n\n\n\n\n\n\n\nCommand\nCommand Name\nFunction\n\n\n\n\nls\nList\nLists all files in the current directory.\n\n\nls -l\nList with Long flag\nLists additional information about each file.\n\n\nls -a\nList with All flag\nLists all files, including hidden files.\n\n\npwd\nPrint Working Directory\nPrints the current working directory.\n\n\nmkdir\nMake Directory\nCreates a new file directory.\n\n\ncd\nChange Directory\nNavigates to another directory on the file system.\n\n\nmv\nMove\nMoves files.\n\n\ncp\nCopy\nCopies files.\n\n\nrm\nRemove/delete\nDeletes files.\n\n\n\nFor a more complete list of Unix commands, see the Unix Cheat Sheet.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Command Line</span>"
    ]
  },
  {
    "objectID": "chapters/01_command-line.html#command-line-text-editors",
    "href": "chapters/01_command-line.html#command-line-text-editors",
    "title": "1  Command Line",
    "section": "1.4 Command Line Text Editors",
    "text": "1.4 Command Line Text Editors\nThe command line also features a variety of different text editors, similar in nature to Microsoft Word or Mac Pages but much more stripped down. These editors are only accessible from the command line; we won’t spend very much time with them, but it is important to know how to use them so that you can open, read, and write directly in the command line window.\nMacOS and Git Bash both ship with a text editor called Vim (other common editors include Emacs and Nano). To open a file with Vim, type vi in a command line window, followed by the filename. If you want to create a new file, simply type the filename you’d like to use for that file after vi.\n\nVim works a bit differently than other text editors and word processors. It has a number of “modes,” which provide different forms of interaction with a file’s data. We will focus on two modes, Normal mode and Insert. When you open a file with Vim, the program starts in Normal mode. This mode is command-based and, somewhat strangely, it doesn’t let you insert text directly in the document (the reasons for this have to do with Vim’s underlying design philosophy: we edit text more than we write it on the command line).\nTo insert text in your document, switch to Insert mode by pressing i. You can check whether you’re in Insert mode by looking at the bottom left hand portion of the window, which should read -- INSERT --.\n\nOnce you are done inserting text, pressing Esc (the Escape key) will bring you back to Normal mode. From here, you can save and quit your file, though these actions differ from other text editors and word processors: saving and quitting with Vim works through a sequence of key commands, which you enter from Normal mode.\nTo save a file in Vim, make sure you are in Normal mode and then enter :w. Note the colon, which must be included. After you’ve entered this key sequence, in the bottom left hand corner of your window you should see \"FILENAME\" #L, #C written (L stands for “lines” and C stands for “characters”).\n\nTo quit Vim, enter :q. This should take you back to your command line and, if you have created a new file, you will now see that file in your window.\nIf you don’t want to save the changes you’ve made in a file, you can toss them out by typing :q! in place of :w and then :q. Also, in Vim key sequences for save, quit, and hundreds of other commands can be chained together. For example, instead of separately inputting :w and :q to save and quite a file, you can use :wq, which will produce the same effect. There are dozens of base commands like this in Vim, and the program can be customized far beyond what we need for our class. More information about this text editor can be found here.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Command Line</span>"
    ]
  },
  {
    "objectID": "chapters/01_command-line.html#basic-vim-commands",
    "href": "chapters/01_command-line.html#basic-vim-commands",
    "title": "1  Command Line",
    "section": "1.5 Basic Vim Commands",
    "text": "1.5 Basic Vim Commands\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nEsc\nEnter Normal mode.\n\n\ni\nEnter Insert mode.\n\n\n:w\nSave the file.\n\n\n:q\nQuit Vim.\n\n\n:q!\nQuit Vim without saving.\n\n\n\nFor a more complete list of Vim commands, see this Cheat Sheet.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Command Line</span>"
    ]
  },
  {
    "objectID": "chapters/02_version-control.html",
    "href": "chapters/02_version-control.html",
    "title": "2  Version Control",
    "section": "",
    "text": "2.1 Introduction to Version Control",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "chapters/02_version-control.html#introduction-to-version-control",
    "href": "chapters/02_version-control.html#introduction-to-version-control",
    "title": "2  Version Control",
    "section": "",
    "text": "2.1.1 What is Version Control?\nVersion control describes a process of storing and organizing multiple versions (or copies) of documents that you create. Approaches to version control range from simple to complex and can involve the use of various human workflows and/or software applications to accomplish the overall goal of storing and managing multiple versions of the same document(s).\nMost people have a folder/directory somewhere on their computer that looks something like this:\n\nOr perhaps, this:\n\nThis is a rudimentary form of version control that relies completely on the human workflow of saving multiple versions of a file. This system works minimally well, in that it does provide you with a history of file versions theoretically organized by their time sequence. But this filesystem method provides no information about how the file has changed from version to version, why you might have saved a particular version, or specifically how the various versions are related. This human-managed filesystem approach is more subject to error than software-assisted version control systems. It is not uncommon for users to make mistakes when naming file versions, or to go back and edit files out of sequence. Software-assisted version control systems (VCS) such as Git were designed to solve this problem.\n\n\n2.1.2 Software Assisted Version Control\nVersion control software has its roots in the software development community, where it is common for many coders to work on the same file, sometimes synchronously, amplifying the need to track and understand revisions. But nearly all types of computer files, not just code, can be tracked using modern version control systems. IBM’s OS/360 IEBUPDTE software update tool is widely regarded as the earliest and most widely adopted precursor to modern, version control systems. Its release in 1972 of the Source Code Control System (SCCS) package marked the first, fully fledged system designed specifically for software version control.\nToday’s marketplace offers many options when it comes to choosing a version control software system. They include systems such as Git, Visual Source Safe, Subversion, Mercurial, CVS, and Plastic SCM, to name a few. Each of these systems offers its twist on version control, differing sometimes in the area of user functionality, sometimes in how it handles things on the back-end, and sometimes both. This course focuses on the Git VCS, but in the sections that follow we offer some general information about classes of version control systems to help you better understand how Git does what it does and help you make more informed decisions about how to deploy it for you own work.\n\n\n2.1.3 Local vs Server Based Version Control\n\nThere are two general types of version control systems: Local and Server (sometimes called Cloud) based systems. When working with a Local VCS, all files, metadata, and everything associated with the version control system live on your local drive in a universe unto itself. Working locally is a perfectly reasonable option for those who work independently (not as part of a team), have no need to regularly share their files or file versions, and who have robust back-up practices for their local storage drive(s). Working locally is also sometimes the only option for projects involving protected data and/or proprietary code that cannot be shared.\nServer based VCS utilize software running on your local computer that communicates with a remote server (or servers) that store your files and data. Depending on the system being deployed, files and data may reside exclusively on the server and are downloaded to temporary local storage only when a file is being actively edited. Or, the system may maintain continuous local and remote versions of your files. Server based systems facilitate team science because they allow multiple users to have access to the same files, and all their respective versions, via the server. They can also provide an important, non-local back-up of your files, protecting you from loss of data should your local storage fail.\n\n\n2.1.4 Central vs Distributed Based Version Control\nServer based version control systems can generally be segmented into two distinct categories: 1) Centralized Version Control Systems (Centralized VCS) and 2) Distributed Version Control Systems (Distributed VCS).\n\nCentralized VCS is the oldest and, surprisingly to many, still the dominant form of version control architecture worldwide. Centralized VCS implement a “spoke and wheel” architecture to provided server based version control.\n\nWith the spoke and wheel architecture, the server maintains a centralized collection of file versions. Users utilize version control clients to “check-out” a file of interest to their local file storage, where they are free to make changes to the file. Centralized VCS typically restrict other users from checking out editable versions of a file if another user currently has the file checked out. Once the user who has checked out the file has finished making changes, they “check-in” their new version, which is then stored on the server from where it can be retrieved and “checked-out” by another user. As can be seen, Centralized VCS provide a very controlled and ordered universe that ensures file integrity and tracking of changes. However, this regulation comes at a cost. Namely, it reduces the ease with which multiple users can work simultaneously on the same file.\nDistributed VCS are not dependent on a central repository as a means of sharing files or tracking versions. Distributed VCS implement a network architecture (as opposed to the spoke and wheel of the Centralized VCS as pictured above) to allow each user to communicate directly with every other user.\n\nIn Distributed VCS, each user maintains their own version history of the files being tracked, and the VCS software communicates between users to keep the various local file systems in sync with each other. With this type of system, the local versions of two different users will diverge from each other if both users make changes to the file. This divergence will remain in place until the local repositories are synced, at which time the VCS stitches (or merges) the two different versions of the file into a single version that reflects the changes made by each individual, and then saves the stitched version of the file onto both systems as the current version. Various mechanisms can then be used to resolve the conflicts that may arise during this merge process. Distributed VCS offer greater flexibility and facilitate collaborative work, but a lack of understanding of the sync/merge workflow can cause problems. It is not uncommon for a user to forget to sync their local repository with the repositories of other team members and, as a result, work for extended periods of time on outdated files that don’t reflect their teammates and result in work inefficiencies and merge challenges.\nAn important feature of Distributed VCS is that many users and organizations choose to include a central server as a node in the distributed network. This gives use the best of both worlds by creating an hybrid universe in which some users will sync directly to each other while other users will sync through a central server.\n\nSyncing with a cloud-based server provides an extra level of backup for your files and also facilitates communication between users. But treating the server as just another node on the network (as opposed to a centralized point of control) puts the control and flexibility back in the hands of the individual developer. For example, in a true Centralized CVS, if the server goes down then nobody can check files in and out of the server, which means that nobody can work. But in a Distributed CVS this is not an issue. Users can continue to work on local versions and the system will sync any changes when the server becomes available.\nGit, which we use for this course, is a Distributed VCS. You can use Git to share and sync repositories directly with other users or through a central Git server such as, for example, GitHub or GitLab.\n\n\n2.1.5 How Computers Store and Access Information\nWhen we think about version control, we typically think about managing changes to individual files. From the user perspective, the file is typically the minimum accessible unit of information. Whether working with images, tabular data, or written text, we typically use software to open a File that contains the information we want to view or edit. As such, it comes as a surprise to most users that the concept of Files, and their organizing containers (folders or directories), are not intrinsic to how computers themselves store and interact with data.\nFor all of their computing power and seeming intelligence, computers still only know two things: 0 and 1. In computer speak, we call this a binary system, and the unit of memory on a hard-disk, flash drive, or computer chip that stores each 1 or 0 is called a bit. You can think of your computer’s storage device (regardless of what kind it is) as a presenting a large grid, where each box is a bit:\n\nIn the above example, as with most computer storage, the bits in our storage grid are addressable, meaning that we can designate a particular bit using a row and column number such as, for example, A7 or E12. Also, remember, that each bit can only contain one of two values: 0 or 1. So, in practice, our storage grid would actually look something like this:\n\nAll of the complex information that we store in the computer is translated to this binary language prior to storage using a system called Unicode. You can think of Unicode as a codebook that assigns a unique combination of 8, 16, 32, 64, etc. (depending on how old your computer is) ones and zeros to each letter, numeral, or symbol. For example, the 8-bit Unicode for the upper case letter A is 01000001, and the 8-bit Unicode character for the digit 3 is 00110011. The above grid actually spells out the phrase, “Call me Ishmael”, the opening line of Herman Melville’s novel Moby Dick.\nAn important aspect of how computers store information in binary form is that, unlike most human readable forms of data storage, there is no right to left, up or down, or any other regularized organization of bits on a storage medium. When you save a file on your computer, the computer simply looks for any open bits and starts recording information. The net result is that the contents of single file are frequently randomly interleaved with data from other files. This mode of storage is used because it maximizes the use of open bits on the storage device. But it presents the singular problem of not making data readable in a regularized, linear fashion. To solve this problem, all computers reserve a particular part of their internal memory for a directory which stores a sector map of all chunks of data. For example, if you create a file called README.txt with the word hello in it, the computer would store the Unicode for the five characters in the word hello on the storage device and make a directory entry something like the following:\n\nUnderstanding the directory concept and how computers store information is crucial to understanding how VCS mange your Files.\n\n\n2.1.6 How VCS Manage Your Files\nMost users think about version control as a process of managing files. For example, if I might have a directory called My Project that holds several files related to this project as follows:\n\nOne approach to managing changes to the above project files would be to store multiple versions of each file as in the figure below for the file analysis.r:\n\nIn fact, many VCS do exactly this. They treat each file as the minimum unit of data and simply save various versions of each file along with some additional information about the version. This approach can work reasonably well. However, it has limitations. First, this approach can unnecessarily consume space on the local storage device, especially if you are saving many versions of a very large file. It also has difficulty dealing with changes in filenames, typically treating the same file with a new name as a completely new file, thereby breaking the chain of version history.\nTo combat these issues, good VCS don’t actually manage files at all. They manage directories. Distributed VCS like Git take this alternate approach to data storage that is directory, rather than file, based.\nGit (and many other Distributed VCS) manage your files as collections of data rather than collections of files. Git’s primary unit of management is the repository, or repo for short, which is aligned with your computer’s directory/folder structure. Consider, for example, the following file structure:\n\nHere we see a user, Tom’s, home directory, which contains three subdirectories (Data, Thesis, and Tools) and one file (Notes.txt). Both the Data and Tools directories contain sub files and/or directories. If Tom wanted to track changes to the two files in the Data directory, he would first create a Git repository by placing the Data directory under version control.\nWhen a repository is created, the Git system writes a collection of hidden files into the Data directory that it uses to store information about all of the data that lives under that directory. This includes information about the addition, renaming, and deletion of both files and folders as well as information about changes to the data contained in the files themselves. Additions, deletions, and versions of files are tracked and stored not as copies of files, but rather as a set of instructions that describes changes made to the underlying data and the directory structure that describes them.\n\n\n\n\n\n\nSee also\n\n\n\nThe Git Book is the definitive Git resource and provides an excellent reference for everything that we will cover in the interactive session. There is no need to read the book prior to the session, but it’s a good reference resource to have available as you begin to work with Git after the workshop.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "chapters/02_version-control.html#git-local-version-control-basics",
    "href": "chapters/02_version-control.html#git-local-version-control-basics",
    "title": "2  Version Control",
    "section": "2.2 Git Local Version Control Basics",
    "text": "2.2 Git Local Version Control Basics\n\n2.2.1 Creating Your First Repo\nWe are going to introduce Git by initializing a Git repository and exploring Git’s functionality within that repository. To begin, move to your home directory (~):\ncd ~\nNext, create a new directory for this course module:\ncd ~\nmkdir ist008\nChange to the new directory:\ncd ist008\nPut the new directory under version control by initializing the Git VCS:\ngit init\nTo check the status of a repository use the following command:\ngit status\n\n\n2.2.2 Storing Versions of a File\nWe’ve now initialized Git in our course directory, but Git does not automatically track versions of every file. When working with Git, you should save files as you always do, but this has no impact on the versions that are tracked in the repository. To create a version of a file, you must complete two steps. First add saved files to the Git staging area and then commit your staged files to the repository. The commits that you make constitute the versions of files that are preserved in the repository.\nIn the image below, there are various .html files in a directory that is tracked by Git. You might choose to only stage two of those files (a.html and c.html`). Then for each stage and commit there are several versions (C1-C4), one for each commit.\n\nIn short, we stage and commit a file to the Git repository to save a copy of the current working version. The commands for this process are as follows.\n\nStep 1\nPlace the file you want to version into the staging area:\ngit add FILENAME\n\n\n\n\n\n\nImportant\n\n\n\nIn this reader, words written in all-caps are generally placeholders you should replace.\nReplace FILENAME in the command above with the actual name of the file you want to version.\n\n\n\n\nStep 2\nCommit the staged files:\ngit commit -m 'A detailed comment explaining the nature of the version being committed.'\n\n\n\n2.2.3 View a History of Your Commits\nGit VCS tracks every commit you make. To get a history of commits you can use:\ngit log\nThis log provides a summary of each commit, with a commit ID, the author, date, and commit message. Notice that these logs bring you into a Vim editor, with the colon (:) at the bottom of the prompt. Remember you can exit the Vim editor with the q command.\nTo see commit history with patch data (insertions and deletions) for a specified number of commits:\ngit log -p -2\nTo see abbreviated stats for the commit history:\ngit log --stat\nYou can save a copy of your Git log to a text file with the following command:\ngit --no-pager log &gt; log.txt\n\n\n2.2.4 Comparing Commits and Files\nGit can compare the differences between difference saved versions of commits by naming the commit IDs we just saw in the log. In place of the COMMIT placeholders, insert the commit IDs.\ngit diff COMMIT1 COMMIT2\nGit can also compare between commits and certain files, similar to above. Instead, use a commit ID and a file name:\ngit diff COMMIT FILE\nor\ngit diff COMMIT1:FILE COMMIT2:FILE\n\n\n2.2.5 Undoing Things\nWhen working locally in your Git repository, you are likely to make some mistakes. Some of the common mistakes you may want to undo include committing too early and possibly forgetting to add some files, or messing up your commit message. If you want to redo that commit, make the additional changes you forgot, stage them, and commit again using the --amend option:\ngit commit --amend\nIf you would like to unstage a file for commit, you can use the following:\ngit reset HEAD FILE\n\n\n\n\n\n\nImportant\n\n\n\nAn important exception to all-caps words you should replace is HEAD, which is what Git calls the most recent commit. Don’t replace HEAD in any Git commands you see.\nFor instance, you might enter the command above as:\ngit reset HEAD my_file.md\n\n\nYou can also throw away changes you’ve made to a file:\ngit checkout -- FILE\nYou can also roll back to a certain commit saved in your version control history, which will delete any uncommitted changed you’ve made. To roll everything back to the last commit:\ngit reset --hard HEAD\nRolling everything back to the next to last commit (The commit before the HEAD commit):\ngit reset --hard HEAD^\nRolling everything back to two commits before the head:\ngit reset --hard HEAD^2\nRolling everything back to an identified commit using commit HASH/ID from the git log:\ngit reset --hard COMMIT\n\n\n2.2.6 Git Branching\nBranching provides a simple way to maintain multiple, side-by-side versions of the files in a repository. Conceptually, branching a repository creates a copy of the codebase in its current state that you can work on without affecting the primary version from which it was copied. This allows you to work down multiple paths without affecting the main (or other) codebase.\n\nTo see a list of branches in your repository:\ngit branch\nTo create a new branch:\ngit checkout -b NEW_BRANCH_NAME\nNew branches are created of the current working branch. To change branches use:\ngit checkout BRANCH_NAME\n\n2.2.6.1 Merging Branches\nWhen you merge a branch, Git folds any changes that you made to files in an identified branch into the current working branch. It also adds any new files. When you perform a merge, a new commit will be automatically created to track the merge. To merge branches, commit any changes to the branch you want to merge then checkout the branch into which you want to merge (for example, main), and then execute a merge command.\ngit commit -m 'commiting staged files in hotfix branch'\ngit checkout main\ngit merge NEW_BRANCH_NAME\n\n\n2.2.6.2 Branching Workflows\nThere are as many different branching workflows as there are development teams and projects. However, over the years something approximating an “industry standard” has evolved as follows:\n\nThe primary branch main is typically reserved for the current, live and in production version of the codebase.\nThe “development” branch dev holds the current, combined, working version of the code.\n“Topic” branches are created on-the-fly by individuals and are focused on particular coding efforts, one each for each development task.\n\n\nFor example, let’s consider a case where there is a team maintaining and developing a company website. In this case, the main branch would contain the version of the code that is currently deployed on the live webserver. The dev branch would contain a testable version of the code that reflects completed changes to the site made by all team members that have yet to be deployed. Finally, the repository would also contain many topic branches, each of which holds code related to a particular change that was or is being worked on. For example, a team developing a new widget for visualizing data some area of the site would create a suitably named topic branch (something like viz_widget) for this topic and do all their initial coding in this branch. Once they have completed and tested their code in this branch, they would merge it into the dev branch. The new code can then be viewed and tested by others as part of the dev branch. Once all topics branches for planned features for the next release of the website have been merged to dev and dev has been thoroughly tested (and fixed as necessary), dev is then merged into main and the main branch is then deployed to the live webserver.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "chapters/02_version-control.html#git-remote-repositories",
    "href": "chapters/02_version-control.html#git-remote-repositories",
    "title": "2  Version Control",
    "section": "2.3 Git Remote Repositories",
    "text": "2.3 Git Remote Repositories\n\n2.3.1 GitHub Basics\nIn this course, we will work with the GitHub platform, which in its simplest form is a hosting service for Git repositories. Much like Dropbox or Google Drive, it gives you a space to remotely store your code and related files. This can be useful when working on projects that require, for example, some kind of server, whether for the purposes of running large, potentially time-consuming data analyses or for serving up public-facing content (like a website). For such projects, GitHub acts as a reference point with which you can push changes on one computer up to the server and pull them down from the server on onto another computer. The process would look something like the following, where pushing and pulling from a remote branch entails keeping a reference point for a project that you’re developing locally:\n\n\nImage source.\n\n\nWith this diagram in mind, it’s not much of a conceptual leap to imagine how two or more people could work from the same remote repository. Each would pull that repository onto their respective local computers, make a branch, implement their changes, and push those changes back to the remote source. That way, multiple parts of a project could be under development simultaneously, and any such changes made to that project would be trackable according to the logic of version control.\nSimultaneously pushing and pulling on multiple computers would look something like the following:\n\n\nImage source.\n\n\n2.3.1.1 Communicating Through GitHub\nWhat makes GitHub special is the fact that, more than being simply a place to store files, the service is above all a communication channel. Where GitHub extends the functionality of version control is not just where it offers various forms of cloud hosting; it is also where GitHub provides tools that let people talk about the code they’re working on. It’s a place where team members can propose and explain the changes they make, look at changes others have made, track and discuss any bugs that might come up, get feedback from others, and plan for any future changes the team intends to make.\nLearning how to use GitHub, then, is as much about learning how to communicate effectively through the different facets of the service as it is about acquainting yourself with new technical skills (i.e., using your computer to track code remotely).\nA short summary of the different facets of communication GitHub provides includes:\n\nDocumentation, often through README files\nIssue tracking for bug reporting and assigning tasks\nPull requests for proposing and discussing changes\nWikis, which may feature additional documentation, tutorials, etc.\nProject boards for long-term planning\nVarious graph visualizations for project overview\n\nAdditionally, GitHub users can monitor and modify other projects’ code using “Watch”, “Star”, and “Fork” functionalities. The service also provides teams with the ability to specify licensing information for their projects.\n\n\n2.3.1.2 What Should I Push to GitHub?\nA quick word about what should and shouldn’t be pushed to a remote repository, especially with an eye toward what we’ve said about communication. You can, of course, host large data files on GitHub, but there are a few caveats. For one, the site does have a storage limit, and it can also become quite inefficient to have team members constantly push/pull large files to/from GitHub. Further, hosting data files might not be particularly relevant to what a team might need to discuss. Data may change often over the course of a project, but tracking individual observations might not be necessary—more meaningful would be a conversation about how code has made, or might make, such changes. The latter is likely to be something that GitHub is better suited to facilitate.\nIt’s best, then, to host your data files separately from GitHub, either by way of a remote database or some kind of cloud service like Google Drive. Exceptions may come up, however, so the decision about what to track should ultimately be one made by the team.\nExamples of what should be tracked with GitHub:\n\nCode\nDocumentation\nMake files\nSome supporting media (small images, for example)\n\nFinally, note that even though you can set a repository to either “Public” or “Private” (which controls who can see your project), it’s recommended that you refrain from uploading various access credentials (API keys, database passwords, etc.) to GitHub.\n\n\n\n2.3.2 Basic GitHub Account Setup\nTo use GitHub, you need to make a (free) account. Go to GitHub and click “Sign Up” in the top-right corner of the page. This should take you to a form, which asks you to enter a username, email address, and password. After you’ve entered in this information (and completed a quick CAPTCHA), GitHub will make you an account. Then, the site will prompt you to complete an optional survey. Fill it out, or scroll to the bottom to skip it.\nEither way, you’ll need to then verify your email address. Go to your inbox and look for an email from GitHub. Click the “Verify email address” button. Doing so will take you to your homepage, where, if you’d like, you can add a few details about yourself.\n\nYou now have a GitHub account!\n\n2.3.2.1 Locally Setting Up Your Git Credentials\nRegardless of how you make your commits, you will need to use the command line to provide Git with some information about who will be making commits. You may have already done this, however (and sometimes your computer does it automatically). To check, enter the following two commands in either Terminal (Mac) or Git Bash (Windows):\ngit config --global user.name\ngit config --global user.email\nIf you see your name (or some kind of username) and your email after entering the above commands, you’re set. If nothing happens when you type them, you’ll need to provide this information with the following:\ngit config --global user.name \"YOUR_NAME\"\ngit config --global user.email \"YOUR_EMAIL\"\nYou can check whether this was successful by simply calling either, or both, of the first two commands. They should echo back the information you’ve just entered.\n\n\n2.3.2.2 SSH Keys and GitHub\nWhen you work with remote repositories on GitHub, you’ll often need to enter your username/password to identify yourself. This is for two reasons: 1) it allows GitHub to track who has made changes to what files; 2) it adds a layer of security to projects, letting teams control who can make changes to their files. Repositories can be either public or private, and this layer of security helps teams control who has access to files in the first place.\nIt can be a pain, though, to have to enter and re-enter your credentials when making changes. More, passwords can be lost or worse, stolen. To avoid these problems, we can set up an SSH key. SSH keys (short for “Secure Shell”) are special, machine-readable credentials that allow users to safely connect and authenticate with remote servers over unsecure networks.\nAn SSH key has two parts:\n\nA public key, which encrypts messages intended for a particular recipient. This can be stored on remote servers, or even shared with others, to facilitate secure data transfers\nA private key, which deciphers messages encrypted by the public key. Your private key is the only thing capable of unlocking what is sent with your public key. It stays on your computer and should never be shared with anyone\n\nBeyond what security measures an SSH key brings, it also acts as your digital signature. GitHub uses this internally to verify that you are, in fact, who you say you are when you commit code to a repository.\n\n\n2.3.2.3 Connecting to GitHub with SSH\nGitHub offers thorough, straightforward documentation for setting up an SSH key with its services, which we won’t repeat here. Instead, please visit the link below and follow the step-by-step instructions there to get yourself set up with a key.\nConnecting to GitHub with SSH\nThe following steps at the link above are required:\n\nChecking for existing SSH keys\nGenerating a new SSH key and adding it to the ssh-agent\nAdding a new SSH key to your GitHub account\nTesting your SSH connection\n\nOnce you have completed these steps, be sure you can successfully run the following command:\nssh -T git@github.com\nIf your connection is successful, you will see this message (a warning may first appear—see the documentation on GitHub for more information):\nHi YOUR_USERNAME! You've successfully authenticated, but GitHub does not\nprovide shell access.\n\n\n\n2.3.3 GitHub Desktop, or the Command Line?\nRemember that Git is separate from GitHub. The latter is a service that’s been built around the former. One part of the services that GitHub offers is an application called GitHub Desktop, which allows users to manage their local repositories with a point-and-click graphical user interface (or GUI). Ultimately, it’s a matter of preference whether you use the GUI or stick with the command line for your own projects, but it is generally a good idea to become proficient at interacting with GitHub via the command line. One of the primary reasons for this has to do with the fact that not every computer you use will have GitHub’s GUI installed—or even have a screen! Many remote servers offer command line-only access, and if you ever want to sync your files with these machines, you’ll need to do so without GitHub Desktop. Luckily, GitHub seamlessly extends Git commands, so using the service without the GUI is, as we’ll see, quite straightforward.\n\n\n2.3.4 Sync with GitHub\nNow that you’re all set up with GitHub, it’s time to sync the website with a local repository on your computer. We’ll start by creating a test repository on your local Git instance.\nFirst, use the command line to make a new directory in your Home folder:\nmkdir ~/my_first_remote_directory\nPut this directory under version control with Git:\ncd ~/my_first_remote_directory\ngit init\nWith Vim, make a README Markdown file:\nvim README.md\nWrite and save Hello world! in the file. You should see something like the following:\n\nExit Vim with :wq. Then, add README.md to Git and commit your changes. Don’t forget to write a short note in the commit message.\ngit add README.md\ngit commit -m 'Add a README file'\nYou should see the following:\n\n\n2.3.4.1 Preparing to Sync Your Repository\nSo far so good! All we’ve done is repeat the normal workflow for putting files under version control, explained in Section 3. But now we need to step away from the command line for a moment and prepare a space for receiving this repository on GitHub.\nTo do so, go to GitHub, make sure you’re logged in, and click the “Create repository” button. You’ll be taken to this page:\n\nThere are a few things of note here:\n\nRepository name: your repository’s name, which should be the same as what’s on your computer\nDescription: a short (1-2 sentence) explanation of what’s in this repository\nPublic/private setting: repositories may be either “public” (viewable by anyone) or “private” (only viewable by you and those to whom you grant access)\nInitialize with details, including:\n\nA README file: a form of documentation; provides information about the files in the repository\nA .gitignore file: instructs Git to ignore specific files or filetypes\nA license: governs the use or redistribution of your files\n\n\nBecause we’re initializing this repository from an existing directory, we won’t bother with most of the extra details. But we do need a title, which should be the same as what’s on your local computer (my_first_remote_directory). A description is helpful but not necessary for our purposes; the same goes for a license. Finally, we will choose to make this a public repository (meaning anyone can see it).\n\n\n\n2.3.4.2 Pushing a Local Repository\nOnce you’ve entered the above information, click “Create repository.” GitHub will take you to a new screen, which gives you a number of options for making or uploading new files to the repository.\n\nSince we already have a repository made, we need to use the “Push an existing repository from the command line.” Pushing our repository is as easy as sequentially entering into the command line the three commands GitHub provides.\ngit remote add origin git@github.com:YOUR_USERNAME/my_first_remote_directory.git\ngit branch -M main\ngit push -u origin\nOn the command line, that looks like this:\n\nTo summarize the above, we’ve done the following:\n\nAssociated GitHub’s remote repository with our local repository (git    remote etc.)\nMade a new branch in our local repository called main (git branch -M    main)\nPushed the contents of main (from origin) to a new, corresponding remote branch on GitHub\n\nFrom here on out, when you want to update the remote repository with further changes, you can simply use the shorthand git push after the usual save, add, commit steps. Importantly, Git will only update the branch you’re on when you enter git push, so before making any pushes, it’s a good idea to run a quick git status command to make sure you’re on the branch you want to be on.\nWhen you make your changes, the GitHub site won’t immediately refresh itself, but if you click on the “&lt; &gt; Code” tab or on the name of the directory, you’ll see that the repository has been synced and your README.md file is now online.\n\nNote that GitHub automatically looks for a README file in your repository. If it finds one that contains renderable Markdown code, it will render the file on your repository’s main page.\n\n\n\n\n\n\nSee also\n\n\n\nMore information about writing effective README files is available through the DataLab’s README, Write Me! workshop.\n\n\n\n\n2.3.4.3 Tracking Files Remotely\nWith this repository made, GitHub can start tracking changes you make to your files, such as Git does locally. The process works exactly like the one you do for Git, though it requires one more step.\nFirst, we’ll alter our README.md. Reopen the file with Vim, skip a line down from the line you’ve already written, and add My name is YOUR_NAME. Save and quit.\n\nThen, add the file and commit your changes.\n\nIf you want to push these changes to your remote repository, simply enter git push. You’ll see a similar message appear about enumerating, counting, and writing objects to GitHub. Afterwards, if you refresh your file on GitHub, you should see your changes:\n\nNote that your commit message appears here as well:\n\nIf you click the commit tag:\n\nYou’ll be taken to another page, which shows you the differences between your old version and the new one:\n\n\n\n2.3.4.4 Pulling Changes from a Remote Repository\nBefore moving on, it’s also worth noting that we can pull changes directly from GitHub. If a file has been altered on the remote version of a project, GitHub offers functionality for syncing that file with your local copy (or creating a new file altogether, if need be).\nFor example, if you return to the main page of my_first_remote_directory, you can alter the README directly on GitHub. Click the pencil in the right-hand corner of the rendered file.\n\nThis will open up a text editor interface. Using it, add What's yours? on the fifth line of the document. The complete document should look like this:\nHello world!\n\nMy name is YOUR_NAME.\n\nWhat's yours?\nScroll to the bottom and click the green “Commit changes” button. This is the equivalent of doing git add FILE and git commit -m MESSAGE on the command line.\nYou’ll see something like the following:\n\nBack on the command line, if you type git status, you’ll see that your local repository is now out of sync.\n\nIf you haven’t made any changes to your directory, syncing it with the remote version can be achieved with a straightforward pull command:\ngit pull\nOnce you enter this command, your command line should look something like this:\n\nYour files are now synced.\n\n\n\n2.3.5 Cloning a Repository\nWhile tracking your own files remotely with GitHub is great for managing and storing your files, this doesn’t quite tap into the full use of the service. Remember, GitHub is above all a communication channel, in which people can share and discuss the code/files they’re working on. We haven’t yet taken advantage of much of what makes GitHub useful: getting files for a project, modifying them, discussing the changes with team members, and implementing those changes.\n\n2.3.5.1 How to Clone a Repository\nTo start using GitHub collaboratively, we need to retrieve, or clone, a repository. This will create a local copy of project files.\nFirst, go back to your Home directory. You’ll be putting a repository here (in command line speak, the repository will be a “child” of Home).\ncd ~\nThen, go to the following link: https://github.com/ucdavis-datalab-training/workshop_git_for_teams_sandbox\nOnce there, click on the green “Code” button, which should show the following:\n\nSince you have SSH keys, select the “SSH” option. Copy the text GitHub provides to your clipboard. Then, in the command line, type git clone, add a space, and paste in the line of text GitHub generated for you. The full command should look like this:\ngit clone git@github.com:ucdavis-datalab-training/workshop_git_for_teams_sandbox.git\nHit Enter. If you’d like, you can use ls to see the newly made directory. You should see something like the following:\n\nIf you cd into the directory and then type ls -a, you’ll see a README.md file and a .git file, which contains all the logging info for the repository.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "chapters/03_r-intro.html",
    "href": "chapters/03_r-intro.html",
    "title": "3  Introduction to R",
    "section": "",
    "text": "3.1 Getting Started",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "chapters/03_r-intro.html#getting-started",
    "href": "chapters/03_r-intro.html#getting-started",
    "title": "3  Introduction to R",
    "section": "",
    "text": "3.1.1 What are R and RStudio?\n\nR is both a free and open source programming language designed for statistical computing and graphics, and the software for interpreting the code written in the R language.\nRStudio is an integrated development environment (IDE) within which you can write and execute code, and interact with the R software. It’s an interface for working with the R software that allows you to see your code, plots, variables, etc. all on one screen. This functionality can help you work with R, connect it with other tools, and manage your workspace and projects. You don’t need RStudio to use R, but many people find that using RStudio makes writing, editing, searching and running their code easier. You cannot run RStudio without having R installed. While RStudio is a commercial product, the free version is sufficient for most researchers.\n\n\n\n\n\n\n\nImportant\n\n\n\nYou can download R for free here.\nYou can download RStudio Desktop Open-Source Edition for free here.\n\n\n\n\n3.1.2 Why Learn R?\nThere are many advantages to working with R:\n\nScientific integrity. Working with a scripting language like R facilitates reproducible research. Having the commands for an analysis captured in code promotes transparency and reproducibility. Someone using your code and data should be able to exactly reproduce your analyses. An increasing number of research journals not only encourage, but are beginning to require, submission of code along with a manuscript.\nMany data types and sizes. R was designed for statistical computing and thus incorporates many data structures and types to facilitate analyses. It can also connect to local and cloud databases.\nGraphics. R has built-in plotting functionalities that allow you to adjust any aspect of your graph to effectively tell the story of your data.\nOpen and cross-platform. Because R is free, open-source software that works across many different operating systems, anyone can inspect the source code, and report and fix bugs. It is supported by a large community of users and developers.\nInterdisciplinary and extensible. Because anyone can write and share R packages, it provides a framework for integrating approaches across domains, encouraging innovation.\n\n\n\n3.1.3 Navigating the Interface\nThe first time you open RStudio, you’ll see a window divided into several panes, like this:\n\nThe exact presentation of the panes might be slightly different depending on your operating system, versions of R and RStudio, and any set preferences. Generally, the panes include:\n\nSource is your script. You can write your code here and save this as a .R file and re-run to reproduce your results.\nConsole is where you run the code. You can type directly here, but anything entered here won’t be saved when you exit RStudio.\nEnvironment/history lists all the objects you have created (including your data) and the commands you have run.\nFiles/plots/packages/help/viewer pane is useful for locating files on your machine to read into R, inspecting any graphics you create, seeing a list of available packages, and getting help.\n\nTo interact with R, compose your code in the source pane and use the execute (or run) command to send them to the console.\n\n\n\n\n\n\nTip\n\n\n\nYou can use the keyboard shortcut Ctrl + Enter (on macOS: Cmd + Enter) to run a line of code.\nFor more keyboard shortcuts, see the official RStudio Cheatsheet.\n\n\nIn your ~/ist008/ directory, create a lecture03/ directory for today’s lecture. Then create a new R script and save it in the lecture03/ directory.\n\n\n\n\n\n\nTip\n\n\n\nIt’s a good habit to make a new directory for every project or lecture.\nFor projects, some useful subdirectories to create are:\n\ndata/ to store data sets\ndocs/ to store documents\noutputs/ to store outputs such as plots and cleaned data sets\nR/ to store R code",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "chapters/03_r-intro.html#mathematical-operations",
    "href": "chapters/03_r-intro.html#mathematical-operations",
    "title": "3  Introduction to R",
    "section": "3.2 Mathematical Operations",
    "text": "3.2 Mathematical Operations\nR runs as a read-evaluate-print loop, or REPL. This means:\n\nR waits until you type an expression (a single piece of code) and press Enter, then reads and parses what you typed, checking whether it is a syntactically valid expression.\nR evaluates the expression, computing the result.\nR prints the result in the R console.\nFinally, R loops back to step 1 to wait for your next expression.\n\nYou can use R like a calculator to see how it processes expressions:\n\n7 + 2\n\nR always puts the result on a separate line (or lines) from your code.\n\n\n\n\n\n\nNote\n\n\n\nIn this case, the result begins with the tag [1], which is a hint from R that the result is a vector and that this line starts with the element at position 1. We’ll learn more about vectors later in this lesson, and eventually learn about other data types that are displayed differently.\n\n\nIf you enter an incomplete expression, R will get stuck at the evaluate step and change the prompt to +, then wait for you to type the rest of the expression and press the Enter key. If this happens, you can finish entering the expression on the new line, or you can cancel it by pressing the Esc key (or Ctrl + c if you’re using R without RStudio). R can only tell an expression is incomplete if it’s missing something that it is expecting, like the second operand here:\n\n7 -\n\nError: &lt;text&gt;:2:0: unexpected end of input\n1: 7 -\n   ^\n\n\nLet’s do more math! Other arithmetic operators are:\n\n- for subtraction\n* for multiplication\n/ for division\n%% for remainder division (modulo)\n^ or ** for exponentiation\n\n\n7 - 2\n244/12\n2 * 12\n\nArithmetic in R follows an order of operations (aka PEMDAS): parenthesis, exponents, multiplication and division, addition and subtraction. You can combine these and use parentheses to make more complicated expressions, just as you would when writing a mathematical expression.\nFor example, to estimate the area of a circle with radius 3, you can write:\n\n3.14 * 3^2\n\n[1] 28.26\n\n\nTo see the complete order of operations, use the help command:\n\n?Syntax\n\nYou can also perform other operations in R:\n\n3 &gt; 1\n3 &lt; 1\n\n\n\n\n\n\n\nTip\n\n\n\nYou can write R expressions with any number of spaces (including none) around the operators and R will still compute the result. Nevertheless, putting spaces in your code makes it easier for you and others to read, so it’s good to make it a habit. Put spaces around most operators, after commas, and after keywords.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "chapters/03_r-intro.html#variables",
    "href": "chapters/03_r-intro.html#variables",
    "title": "3  Introduction to R",
    "section": "3.3 Variables",
    "text": "3.3 Variables\nSince R is designed for mathematics and statistics, you might expect that it provides a better approximation for \\(\\pi\\) than 3.14. R and most other programming languages allow you to create and store values called variables. Variables allow you to reuse the result of a computation, write general expressions (such as a*x + b), and break up your code into smaller steps so it’s easier to test and understand.\nR has a built in variable called ‘pi’ for the value of \\(\\pi\\). You can display a variable’s value by entering its name in the console:\n\npi\n\nYou can also use variables in mathematical expressions. Here’s a more precise calculation of the area of a circle with radius 3:\n\npi *3^2\n\nYou can define your own variables with the assignment operator ‘=’ or ‘&lt;-’. Variable names can contain letters, numbers, dots ., and underscores _, but they cannot begin with a number. Spaces and other symbols are not allowed in variable names. In general, variable names should be descriptive but concise, and should not use the same name as common (base R) functions like mean, T, median, sum, etc..\nLet’s make some more variables:\n\nx &lt;- 10\ny &lt;- 24\nfantastic.variable2 = x\nx &lt;- y / 2\n\nIn R, variables are copy-on-write. When we change a variable (“write”), R automatically copies the original value so dependent variables are unchanged until they are re-run.\n\nx &lt;- 13\ny &lt;- x\nx &lt;- 16\ny\n\nWhy do you think copy-on-write is helpful? Where do you think it could trip you up?",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "chapters/03_r-intro.html#calling-functions",
    "href": "chapters/03_r-intro.html#calling-functions",
    "title": "3  Introduction to R",
    "section": "3.4 Calling Functions",
    "text": "3.4 Calling Functions\nR has many functions (reusable commands) built-in that allow you to compute mathematical operations, statistics, and perform other computing tasks on your variables. You can think of a function as a machine that takes some inputs and uses them to produce some output. Code that uses a function is said to call that function. When you call a function, the values that you assign as input are called arguments. The output is called the return value.\nWe call a function by writing its name followed by a parentheses containing the arguments.\n\nlog(10)\nsqrt(9)\n\nMany functions have multiple parameters and can accept multiple arguments. For example, the sum function accepts any number of arguments and adds them all together. When you call a function with multiple arguments, separate the arguments with commas.\n\nsum(5, 4, 1)\n\nWhen you call a function, R assigns each argument to a parameter. Parameters are special variables that represent the inputs to a function and only exist while that function runs. For example, the log function, which computes a logarithm, has parameters x and base for the operand and base of the logarithm, respectively.\nBy default, R assigns arguments to parameters based on their order. The first argument is assigned to the function’s first parameter, the second to the second, and so on. If you know the order that a function expects to receive the parameters then you can list them separated by commas. Here the argument 64 is assigned to the parameter x, and the argument 2 is assigned to the parameter base.\n\nlog(64, 2)\n\nYou can also assign arguments to parameters by name with = (but not with &lt;-), overriding their positions.\n\nlog(64, base = 2)\nlog(base = 2, x= 64)\n\n\n\n\n\n\n\nTip\n\n\n\nBoth of these expressions are equivalent, so which one should you use? When you write code, choose whatever seems the clearest to you. Leaving parameter names out of calls saves typing, but including some or all of them can make the code easier to understand.\n\n\nNot sure what parameters a specific function needs? Read on for how to get…",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "chapters/03_r-intro.html#help",
    "href": "chapters/03_r-intro.html#help",
    "title": "3  Introduction to R",
    "section": "3.5 HELP!",
    "text": "3.5 HELP!\nThis is just the beginning, and there are lots of resources to help you learn more. R has built-in help files that can be accessed with the ? and help commands. You can also search within the help documentation using the ?? command. There’s also a vibrant online help community. Here are some examples of how you can use all this help to help yourself:\n? The help pages for all of R’s built-in functions usually have the same name as the function itself. Function help pages usually include a brief description, a list of parameters, a description of the return value, and some examples. To open the help page for the log function:\n\n?log\n\nThere are also help pages for other topics, such as built-in mathematical constants (such as ?pi), data sets (such as ?cars), and operators. To look up the help page for an operator, put the operator’s name in single or double quotes. For example, this code opens the help page for the arithmetic operators:\n\n?\"+\"\n\n\n\n\n\n\n\nTip\n\n\n\nIt’s always okay to put single or double quotes around the name of the page when you use ?, but they’re only required if it contains arithmetic commands or non-alphabetic characters. So ?sqrt, ?'sqrt', and ?\"sqrt\" all open the documentation for sqrt, the square root function. Why does this work? R treats anything inside single or double quotes as literal text rather than as an expression to evaluate.\nIn programming jargon, a piece of literal text is called a string. You can use whichever kind of quotes you prefer, but the quote at the beginning of the string must match the quote at the end. We’ll learn more about strings in later lessons when we cover working with unstructured data.\n\n\n?? Sometimes you might not know the name of the help page you want to look up. You can do a general search of R’s help pages with ?? followed by a string of search terms. For example, to get a list of all help pages related to linear models:\n\n??\"linear model\"\n\nThis search function doesn’t always work well, and it’s often more efficient to use an online search engine. When you search for help with R online, include “R” as a search term. Alternatively, you can use RSeek, which restricts the search to a selection of R-related websites.\nIn later lessons we’ll learn about packages, which are sharable bundles of code. You’ll often need to look up the documentation to get help figuring out how to work with a new package. You can view a package’s help documentation using packageDescription(\"Name\").\n\n3.5.1 When Something Goes Wrong (and it will)\nSooner or later you’ll run some code and get an error message or result you didn’t expect. Don’t panic! Even experienced programmers make mistakes regularly, so learning how to diagnose and fix problems is vital. We call this troubleshooting or debugging.\nStay calm and try going through these steps:\n\nIf R returned a warning or error message, read it! If you’re not sure what the message means, try searching for it online.\nCheck your code for typ0s. Did you capitalize something that should be lower case? Are you missing or have an extra comma, quote, parenthesis?\nTest your code one line at a time, starting from the beginning. After each line that assigns a variable, check that the value of the variable is what you expect. Try to determine the exact line where the problem originates (which may differ from the line that emits an error!). Sometimes the “shut it down and restart” trick really works—you might have created a variable and forgot about it, and you need a fresh start for the code to work as intended.\n\nIf all else fails, just Google it. Stack Overflow is a popular question and answer website and you can often find solutions to your problems there, or pick up tips to help you tackle your problem in a new way. On CRAN, check out the Intro to R Manual and R FAQ. Many regions also have grassroots R-Users Groups that you can join and ask for help. Just remember to pay it forward and use your new found R prowess to help others in the community on their learning journeys!\n\n\n\n\n\n\nTip\n\n\n\nWhen asking for help, clearly state the problem and provide a reproducible example. Take a look at StackOverflow’s How do I ask a good question? guide and R’s Posting guide before you write your first question. These guides will help you write questions that are more likely to get a useful reply.\nIt’s also a good idea to save your sessionInfo() so you can show others how your machine and session was configured. Doing this before coming to office hours for a programming class is also highly recommended!",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "chapters/03_r-intro.html#vectors",
    "href": "chapters/03_r-intro.html#vectors",
    "title": "3  Introduction to R",
    "section": "3.6 Vectors",
    "text": "3.6 Vectors\nA vector is an ordered collection of values. The values in a vector are called elements. Vectors can have any number of elements, including 0 or 1 element. For example, a single value, like 3, is a vector with 1 element. So every value that you’ve worked with in R so far was a vector.\nThe elements of a vector must all be the same type of data (we say the elements are homogeneous). A vector can contain integers, decimal numbers, strings (text), or several other types of data, but not a mix these all at once.\nYou can combine or concatenate vectors to create a longer vector with the c function:\n\n# numbers\ntime.min &lt;- c(5, 4, 4, 12, 10, 2, 3, 4, 4, 5, 19)\n\n# strings\npets &lt;- c(\"woof\", \"woof\", \"cat\", \"woof\", \"woof\", \"cat\", \"woof\", \"woof\", \"woof\",\n  \"woof\", \"woof\")\nplace &lt;- c(\"Temple\", \"Yakitori\", \"Panera\", \"Yakitori\", \"Guads\", \"Home\",\n  \"Tea List\", \"Raising Canes\", \"Pachamama\", \"Lazi Cow\", \"Wok of Flame\")\n\nYou can check the length of a vector (and other objects) with the length function:\n\nlength(3)\n\n[1] 1\n\nlength(\"hello\")\n\n[1] 1\n\nlength(time.min)\n\n[1] 11\n\nlength(pets)\n\n[1] 11\n\n\n\n3.6.1 Indexing Vectors\nVectors are ordered, which just means the elements have specific positions. For example, in the place vector, the value of the 1st element is \"Temple\", the 2nd is \"Yakitori\", the 5th is \"Guads\", and so on.\nYou can access individual elements of a vector with the indexing operator [ (also called the square bracket operator). The way to write it, or syntax is:\nVECTOR[INDEXES]\nHere INDEXES is a vector of positions of elements you want to get or set.\nFor example, let’s get the 2nd element of the place vector:\n\nplace[2]\n\n[1] \"Yakitori\"\n\n\nNow let’s get the 3rd and 1st element:\n\nplace[c(3, 1)]\n\n[1] \"Panera\" \"Temple\"\n\n\nIndexing is among the most frequently used operations in R, so take some time to try it out with few different vectors and indexes. We’ll revisit indexing in a later lesson to learn a lot more about it.\n\n\n3.6.2 Vectorization\nLet’s look at what happens if we call a mathematical function, like sqrt, on a vector:\n\nx &lt;- c(2, 16, 4, 7)\nsqrt(x)\n\n[1] 1.414214 4.000000 2.000000 2.645751\n\n\nThis gives us the same result as if we had called the function separately on each element. That is, the result is the same as:\n\nc(sqrt(2), sqrt(16), sqrt(4), sqrt(7))\n\n[1] 1.414214 4.000000 2.000000 2.645751\n\n\nOf course, the first version is much easier to type.\nFunctions that take a vector argument and get applied element-by-element are called vectorized functions. Most functions in R are vectorized, especially math functions. Some examples include sin, cos, tan, log, exp, and sqrt.\nA function can be vectorized across multiple arguments. This is easiest to understand in terms of the arithmetic operators. Let’s see what happens if we add two vectors together:\n\nx = c(1, 2, 3, 4)\ny = c(-1, 7, 10, -10)\nx + y\n\n[1]  0  9 13 -6\n\n\nThe elements are paired up and added according to their positions. The other arithmetic operators are also vectorized:\n\nx - y\n\n[1]  2 -5 -7 14\n\nx * y\n\n[1]  -1  14  30 -40\n\nx / y\n\n[1] -1.0000000  0.2857143  0.3000000 -0.4000000\n\n\nNote that if you are trying to run vectorized operations on vectors of different lengths, the values of the shorter vector will be recycled. For example, if we create a vector z with only three values, and try to add it to x, which has four values, we get the following result.\n\nz = c(-1, 7, 10)\nx + z\n\nWarning in x + z: longer object length is not a multiple of shorter object\nlength\n\n\n[1]  0  9 13  3\n\n\nFirst, we get a warning, which lets us know that these vectors are not the same length. But we still get a result, which manages to make a calculation for the fourth value. To get this fourth value, R recycles the shorter vector z by going back to its first element, -1, and using that to add to the fourth element in x (4). Thus our result is x[4] + z[1] = 4 (or -1 + 3 = 4). This is something to be cautious of, because if values are recycled inadvertently, we’ll have errors in our results.\nFunctions that are not vectorized tend to be ones that combine or aggregate values in some way. For instance, the sum, length, and class functions are not vectorized.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "chapters/03_r-intro.html#data-frames",
    "href": "chapters/03_r-intro.html#data-frames",
    "title": "3  Introduction to R",
    "section": "3.7 Data Frames",
    "text": "3.7 Data Frames\nWe frequently work with 2-dimensional tables of data (also called tabular data). Typically each row corresponds to a single subject and is called an observation. Each column corresponds to a measurement of the subject.\nIn data science, the columns of a table are called features or covariates. Sometimes people also refer to them as “variables”, but that can be confusing as “variable” means something else in R, so here we’ll try to avoid that term.\nR’s structure for tabular data is the data frame. The columns are vectors, so the elements within a column must all be the same type of data. In a data frame, every column must have the same number of elements (so the table is rectangular). There are no restrictions on the data types in each row.\nYou can use the data.frame function to create a data frame from column vectors:\n\n# current data (vectors)\ntime.min\nplace\npets\n\n# create new data (vectors)\ndistance.mi &lt;- c(0.9, 0.6, 0.8, 0.6, 2, 100, 0.6, 0.7, 0.8, 1, 3.7)\n\nmajor &lt;- c(\"chicanix studies\", \"human development\", \"economics\", \"undeclared\",\n  \"psychology\", \"MMM\", \"psychology\", \"undeclared\", \"human development\",\n  \"undeclared\", \"GG\")\n\n# combine vectors into dataframe\nmy.data &lt;- data.frame(place, distance.mi, time.min, major, pets)\n\n\n3.7.1 Selecting Columns\nYou can select an individual column from a data frame by name with $, the dollar sign operator. The syntax is:\n\nVARIABLE$COLUMN_NAME\n\nFor instance, to select the place column:\n\nmy.data$place\n\n [1] \"Temple\"        \"Yakitori\"      \"Panera\"        \"Yakitori\"     \n [5] \"Guads\"         \"Home\"          \"Tea List\"      \"Raising Canes\"\n [9] \"Pachamama\"     \"Lazi Cow\"      \"Wok of Flame\" \n\n\nThe selected column is just a vector, so you can assign it to a variable and use it in functions. For example, to compute the sum of the distance.mi column:\n\nsum(my.data$distance.mi)\n\n[1] 111.7\n\n\n\n\n\n\n\n\nNote\n\n\n\nPreview of future lesson content: what if you want to extract a row from your data frame?\nFor example, to pull out all responses from only the 11th row, you would subset it:\n\nmy.data[11, ]\n\n\n\n\n\n3.7.2 Inspecting Data\nYou can print a small dataset, but it can be slow and hard to read especially if there are a lot of columns. R has many built in functions to inspect objects:\n\n\n\nExpression\nDescription\n\n\n\n\nhead\nGet only the beginning of the data set.\n\n\ntail\nGet only the end of the data set.\n\n\nnrow\nGet the number of rows.\n\n\nncol\nGet the number of columns.\n\n\nls\nGet the names of the columns in alphabetical order.\n\n\nnames\nGet the names of the columns in their actual order.\n\n\nrownames\nGet the names of the rows.\n\n\n\nA highly informative function for inspecting the structure of a data frame or other object is str:\n\nstr(my.data)\n\nThe table function is another useful function for inspecting data. The table function computes the frequency of each unique value in a vector. For instance, you can use table to compute how many entries in the pets column are woof:\n\ntable(my.data$pets)\n\n\n cat woof \n   2    9 \n\n\n\n\n\n\n\n\nSee also\n\n\n\nCheck out DataLab’s Keeping Your Data Tidy workshop, which covers best practices for structuring, naming, and organizing your data frames (and spreadsheets).",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "chapters/03_r-intro.html#data-types-classes",
    "href": "chapters/03_r-intro.html#data-types-classes",
    "title": "3  Introduction to R",
    "section": "3.8 Data Types & Classes",
    "text": "3.8 Data Types & Classes\nData can be categorized into different types based on sets of shared characteristics. For instance, statisticians tend to think about whether data are numeric or categorical:\n\nnumeric\n\ncontinuous (real or complex numbers)\ndiscrete (integers)\n\ncategorical\n\nnominal (categories with no ordering)\nordinal (categories with some ordering)\n\n\nOf course, other types of data, like graphs (networks) and natural language (books, speech, and so on), are also possible. Categorizing data this way is useful for reasoning about which methods to apply to which data.\nIn R, data objects are categorized in two different ways:\n\nThe class of an R object describes what the object does, or the role that it plays. Sometimes objects can do more than one thing, so objects can have more than one class. The class function returns the classes of its argument.\nThe type of an R object describes what the object is. Technically, the type corresponds to how the object is stored in your computer’s memory. Each object has exactly one type. The typeof function returns the type of its argument.\n\nOf the two, classes tend to be more important than types. If you aren’t sure what an object is, checking its classes should be the first thing you do.\nThe built-in classes you’ll use all the time correspond to vectors and lists (which we’ll learn more about in Section @ref(lists)):\n\n\n\n\n\n\n\n\nClass\nExample\nDescription\n\n\n\n\nlogical\nTRUE, FALSE\nLogical (or Boolean) values\n\n\ninteger\n-1L, 1L, 2L\nInteger numbers\n\n\nnumeric\n-2.1, 7, 34.2\nReal numbers\n\n\ncomplex\n3-2i, -8+0i\nComplex numbers\n\n\ncharacter\n\"hi\", \"YAY\"\nText strings\n\n\nlist\nlist(TRUE, 1, \"hi\")\nOrdered collection of heterogeneous elements\n\n\n\nThe class of a vector is the same as the class of its elements:\n\nclass(\"hi\")\n\n[1] \"character\"\n\nclass(c(\"hello\", \"hi\"))\n\n[1] \"character\"\n\n\nIn addition, for ordinary vectors, the class and the type are the same:\n\nx &lt;- c(TRUE, FALSE)\nclass(x)\n\n[1] \"logical\"\n\ntypeof(x)\n\n[1] \"logical\"\n\n\nThe exception to this rule is numeric vectors, which have type double for historical reasons:\n\nclass(pi)\n\n[1] \"numeric\"\n\ntypeof(pi)\n\n[1] \"double\"\n\ntypeof(3)\n\n[1] \"double\"\n\n\nThe word “double” here stands for double-precision floating point number, a standard way to represent real numbers on computers.\nBy default, R assumes any numbers you enter in code are numeric, even if they’re integer-valued.\nThe class integer also represents integer numbers, but it’s not used as often as numeric. A few functions, such as the sequence operator : and the length function, return integers. The difference between numeric and integer is generally not important.\n\nclass(3)\n\n[1] \"numeric\"\n\nclass(length(pets))\n\n[1] \"integer\"\n\nclass(1:3)\n\n[1] \"integer\"\n\n\nBesides the classes for vectors and lists, there are several built-in classes that represent more sophisticated data structures:\n\n\n\n\n\n\n\nClass\nDescription\n\n\n\n\nfunction\nFunctions\n\n\nfactor\nCategorical values\n\n\nmatrix\nTwo-dimensional ordered collection of homogeneous elements\n\n\narray\nMulti-dimensional ordered collection of homogeneous elements\n\n\ndata.frame\nData frames\n\n\n\nFor these, the class is usually different from the type. We’ll learn more about most of these later on.\n\n3.8.1 Lists\nA list is an ordered data structure where the elements can have different types (they are heterogeneous). This differs from a vector, where the elements all have to have the same type, as we saw in Section @ref(vectors). The tradeoff is that most vectorized functions do not work with lists.\nYou can make an ordinary list with the list function:\n\nx &lt;- list(1, c(\"hi\", \"bye\"))\nclass(x)\n\n[1] \"list\"\n\ntypeof(x)\n\n[1] \"list\"\n\n\nFor ordinary lists, the type and the class are both list. In a later lesson, we’ll learn how to get and set list elements, and more about when and why to use lists.\nYou’ve already seen one list, the my.data data frame:\n\nclass(my.data)\n\n[1] \"data.frame\"\n\ntypeof(my.data)\n\n[1] \"list\"\n\n\nUnder the hood, data frames are lists, and each column is a list element. Because the class is data.frame rather than list, R treats data frames differently from ordinary lists. For example, R prints data frames differently from ordinary lists.\n\n\n3.8.2 Implicit Coercion\nR’s types fall into a natural hierarchy of expressiveness:\n\nEach type on the right is more expressive than the ones to its left.\nFor example, with the convention that FALSE is 0 and TRUE is 1, we can represent any logical value as an integer. In turn, we can represent any integer as a double, and any double as a complex number. By writing the number out, we can also represent any complex number as a string.\nThe point is that no information is lost as we follow the arrows from left to right along the types in the hierarchy. In fact, R will automatically and silently convert from types on the left to types on the right as needed. This is called implicit coercion.\nAs an example, consider what happens if we add a logical value to a number:\n\nTRUE + 2\n\n[1] 3\n\n\nR automatically converts the TRUE to the numeric value 1, and then carries out the arithmetic as usual.\nWe’ve already seen implicit coercion at work once before, when we learned the c function. Since the elements of a vector all have to have the same type, if you pass several different types to c, then R tries to use implicit coercion to make them the same:\n\nx &lt;- c(TRUE, \"hi\", 1, 1+3i)\nclass(x)\n\n[1] \"character\"\n\nx\n\n[1] \"TRUE\" \"hi\"   \"1\"    \"1+3i\"\n\n\nImplicit coercion is strictly one-way; it never occurs in the other direction. If you want to coerce a type on the right to one on the left, you can do it explicitly with one of the as.TYPE functions. For instance, the as.numeric (or as.double) function coerces to numeric:\n\nas.numeric(\"3.1\")\n\n[1] 3.1\n\n\nThere are a few types that fall outside of the hierarchy entirely, like functions. Implicit coercion doesn’t apply to these. If you try to use these types where it doesn’t make sense to, R generally returns an error:\n\nsin + 3\n\nError in sin + 3: non-numeric argument to binary operator\n\n\nIf you try to use these types as elements of a vector, you get back a list instead:\n\nx &lt;- c(1, 2, sum)\nclass(x)\n\n[1] \"list\"\n\n\nUnderstanding how implicit coercion works will help you avoid bugs, and can also be a time-saver.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "chapters/04_programming-foundations.html",
    "href": "chapters/04_programming-foundations.html",
    "title": "4  Core Programming Concepts",
    "section": "",
    "text": "4.1 Control Flow Structures\nControl flow structures are computer programming commands that change the order in which code runs (the flow of control in the program). Specifically, control flow structures can check conditions, such as the value of a variable, to decide what code to run next. They can also run a section of code more than once.\nFor example, you might want to call one function if the value stored in the variable x is greater than 5 and a different function if it is less than 5.\nThe sections that follow provide examples of the most frequently used R control structures and how to implement them.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Core Programming Concepts</span>"
    ]
  },
  {
    "objectID": "chapters/04_programming-foundations.html#control-flow-structures",
    "href": "chapters/04_programming-foundations.html#control-flow-structures",
    "title": "4  Core Programming Concepts",
    "section": "",
    "text": "See also\n\n\n\nThe Wikiversity Control Structures page contains a good description of control flow structures that is not specific to any particular programming language.\nFor complete documentation on control flow structures in R, see the Control Flow chapter in Advanced R. You can also get more details from the R control flow help page:\n?Control",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Core Programming Concepts</span>"
    ]
  },
  {
    "objectID": "chapters/04_programming-foundations.html#if-expressions",
    "href": "chapters/04_programming-foundations.html#if-expressions",
    "title": "4  Core Programming Concepts",
    "section": "4.2 If-expressions",
    "text": "4.2 If-expressions\nAn if-expression runs some code only if a particular condition is met.\nFor example, suppose we want R to print Yay! only if the value of the variable x is greater than 5. We can write an if-expression in R with the if keyword:\n\nx &lt;- 7\nif (x &gt; 5) {\n  message(\"Yay!\")\n}\n\nYay!\n\n\nWhen the condition is not met, R does not call the message function and nothing is printed.\nMore generally, the syntax for if-expressions is:\nif (condition) {\n  # Code to run if condition is true\n}\nThis is a fairly universal control flow structure across programming languages, setting aside minor differences in syntax. In R, the condition must be an expression that evaluates to a single logical (TRUE or FALSE) value. The code to run when the condition is TRUE is placed between curly brackets {} following the condition.\n\n4.2.1 Comparison Operators\nThe most common conditions evaluate whether one value is equal to (x == y), equal to or greater than (x =&gt; y), equal to or lesser than (x &lt;= y), greater than (x &gt; y), or lesser than (x &lt; y) another value.\nControl structures in R also have a negation symbol which allows you to specify a negative condition. For example, the conditional statement in the following code evaluates to TRUE (meaning any code placed between the curly brackets will be executed) if the x IS NOT EQUAL to 5:\nif (x != 5) { #do something}\n\n\n4.2.2 If-else-expressions\nAn if-else-expression is an extension of an if-expression that allows you to also specify some code to run only if the condition evaluates to false.\nFor example:\n\nx &lt;- 2\nif (x &gt; 5) {\n     print(\"Yay!\")\n} else {\n     print(\"Boo!\")\n}\n\n[1] \"Boo!\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe R function ifelse is similar to an if-else-expression, but operates element-by-element on vectors. The condition should be a logical vector with multiple elements. For example:\n\nx &lt;- c(0, 1, -1, 2)\nifelse(x &lt;= 0, \"non-positive\", \"positive\")\n\n[1] \"non-positive\" \"positive\"     \"non-positive\" \"positive\"    \n\n\nIf you only need to test a single condition, it is clearer and more efficient to use an if-else-expression than to use ifelse.\n\n\n\n\n4.2.3 Switch-expressions\nA switch-expression provides a way to select from multiple values based on an index value. In R, switch is a function that returns one of its arguments based on the value of its first argument. For example, the following code returns the value of the argument at position x + 1 (the + 1 is because switch never returns its first argument):\n\nx &lt;- 3\nswitch(x, \"red\", \"green\", \"blue\")\n\n[1] \"blue\"\n\n\nNote: if you pass switch a value that exceeds the number of elements listed, R will not compute a reply.\n\n\n4.2.4 The which Function\nThe which function returns the integer positions of all TRUE values in a logical vector.\nFor example, suppose we want to check which cars in R’s built-in mtcars data set have engines with more than 4 cylinders:\n\nwhich(mtcars$cyl &gt; 4)\n\n [1]  1  2  4  5  6  7 10 11 12 13 14 15 16 17 22 23 24 25 29 30 31\n\n\n\n\n\n\n\n\nTip\n\n\n\nR and many packages have built-in data sets. To list them all, run data() in the R console.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Core Programming Concepts</span>"
    ]
  },
  {
    "objectID": "chapters/04_programming-foundations.html#loops",
    "href": "chapters/04_programming-foundations.html#loops",
    "title": "4  Core Programming Concepts",
    "section": "4.3 Loops",
    "text": "4.3 Loops\nA loop is a specific type of control flow structure that repeatedly runs a specified operation either for a set number of iterations or until some condition is met. For example, you might want your code to perform the same math operation on all of the numbers stored in a vector of values; or perhaps you want the computer to look through a list until it finds the first entry with a value greater than 10; or, maybe you just want the computer to sound an alarm exactly 5 times. Each of these is a type of iteration or “Loop” as they are also commonly called.\n\n4.3.1 For-loops\nThe most common type of loop is the for-loop, typically written for x in xs, which iterates through and does something with each element x of a vector xs. In R, for-loops have the following syntax:\nfor (x in xs) {\n  # Code to do something for each element x\n}\nFor example, assume that names is a vector containing the following four names: Sue, John, Heather, and George, and that we want to print each of these names to screen. We can do so with the following code:\n\nnames &lt;- c(\"Sue\", \"John\", \"Heather\", \"George\")\nfor (name in names) {\n  message(name)\n}\n\nSue\n\n\nJohn\n\n\nHeather\n\n\nGeorge\n\n\nIn the first line of code, we create our vector of names names. Next, we begin our for-loop.\nBeginning with the first element of names (which is Sue), for each iteration of the for-loop the value of the corresponding element in names is assigned to the variable name and then name can be acted upon in the code included between the curly brackets. In our case we tell the computer to print the value of name to the screen. With each iteration, the next value in our vector is assigned to name and is subsequently printed to screen.\nIn R, for-loops can iterate over the elements of any object with elements, not just vectors.\nIn some cases, we just want to run a chunk of code a designated number of times. To do this, we can use the : operator to create a vector numbers that “counts off” the iterations. For example, the following code will print “Hello World!” to screen exactly 5 times:\n\nfor (i in 1:5) {\n  message(\"Hello World!\")\n}\n\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\n\n\n\n\n4.3.2 While-loops\nUnlike a for-loop, which iterates a fixed number of times based on the length of the provided vector, a while-loop continues to iterate forever as long as (while) a condition is met.\nFor example, assume you have a variable x with value TRUE. You might want to run a chunk of code repeatedly until the value of x is changed to FALSE. A good example of this is a case where your program asks the user to enter data, which can then be evaluated for correctness before the you allow the program to move on in its execution.\nIn the example below, we ask the user to tell us the secret of the universe. If the user gives the correct answer 42, the program moves on. But if the user provides an incorrect answer, the program jumps back to the beginning of the loop and asks for input again.\nresponse &lt;- 0\nprompt &lt;- \"What is the answer to the Ultimate Question of Life, the Universe, and Everything? \"\nwhile (response != 42) {\n  response &lt;- as.integer(readline(prompt = prompt))\n}\n\n\n4.3.3 Repeat-loops and the break Keyword\nA repeat-loop is a special case of a while-loop where no condition is specified. This means the repeat-loop will continue iterating forever unless you specifically write code to exit the loop.\nIn R, you can use the break keyword to immediately exit a loop, skipping any remaining code and iterations. Generally, you’ll want to put break in a conditional expression, so that the loop can run for more than one iteration.\nIn the example below, we assign the value 1 to a variable i and then iterate over code that prints and then increments the value of i. In each iteration, the also code checks whether i exceeds 5, at which point we use break to exit the loop.\n\ni &lt;- 1\nrepeat {\n  message(i)\n  i &lt;- i + 1\n  if (i &gt; 5){\n    break\n  }\n}\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\nThe break keyword can actually be used inside any kind of loop (for-, while-, and repeat-) in order to force an exit. This can be useful in a variety of contexts where you want to test for multiple conditions as a means of stopping iteration.\n\n\n4.3.4 The next Keyword\nThe next keyword is similar to break in that it can be used inside any loop to force R to immediately jump to the next iteration, skipping any remaining code for the current iteration.\nFor example, we use next below to iterate through the numbers 1 to 5 and print all values to screen EXCEPT the value 2:\n\nfor (i in 1:5) {\n  if (i == 2){\n    next\n  }\n  message(i)\n}\n\n1\n\n\n3\n\n\n4\n\n\n5\n\n\n\n\n4.3.5 Iterating Over Rows of a Data Frame\nIn the section on for loops above, we learned that you can use a for-loop to iterate over each element of vector. You can also use for-loops to iterate over data frames, since they also have elements. Because R was developed as a programming language for statistical analysis, and statisticians are often interested in summarizing or transforming all observations of a given variable, (for example, all of the weights recorded across all patients), the “elements” of a data frame are actually the columns (variables) rather than the rows (observations).\nTry running this example:\nfor (x in mtcars) {\n  message(x)\n}\nIn the first iteration, R will assign the vector of values in the first column (mpg) to x, in the second iteration it will assign the vector of values in the second column (cyl) to x, and so on for each column.\nIterating through the columns of a data frame is useful for many (if not most) operations. However, there are times when we want to iterate through data one observation at a time. To accomplish this, we need to specifically direct R to move through the data frame by row, as follows:\nfor (i in 1:nrow(mtcars)) {\n  row &lt;- mtcars[i, ]\n  message(row)\n}\n\n\n4.3.6 The lapply Function\nR has a built-in family of functions known as the apply functions that provide a shorthand for iterating over elements in containers. These are similar to for-loops, but are typically much more concise.\nThe fundamental apply function is lapply. The lapply function calls another function on each element of a vector or other container, and returns the results in a list of the same length as the original vector.\nIn the code below, we assign the values 1 through 10 to a vector and then use lapply to subtract 1 from each element. We then print out the results:\n\nv &lt;- 1:10\nresults &lt;- lapply(v, function(x) (x - 1))\nmessage(results)\n\n0123456789\n\n\nThis is similar to the following for-loop:\n\nv &lt;- c(1:10)\nfor (i in v) {\n  x &lt;- i - 1\n  message(x)\n}\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n7\n\n\n8\n\n\n9\n\n\nThe basic syntax of lapply is:\nlapply(DATA, FUNCTION)\nwhere DATA is a container to iterate over and FUNCTION is a function to call on each element. You’ll learn more about functions in the next section.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Core Programming Concepts</span>"
    ]
  },
  {
    "objectID": "chapters/04_programming-foundations.html#functions",
    "href": "chapters/04_programming-foundations.html#functions",
    "title": "4  Core Programming Concepts",
    "section": "4.4 Functions",
    "text": "4.4 Functions\n\n4.4.1 What Is a Function?\nWhy build code several or a hundred times when you can build it once and then call and run it as many times as you want? The answer is, don’t! A function allows you to perform an action multiple times in R by calling it and applying it in similar contexts.\nFor instance, if you build a function that checks the class of all vectors in a data frame, you can name this function and then apply it to do the same operation with any other data frame. Or, if you build a function that graphs the correlation between two numeric vectors and exports this graph to a .png file, you can call this same function and apply it to two other vectors, again and again as needed. Functions can greatly increase the efficiency of your programming, and allow you to create flexible and customized solutions.\n\n\n4.4.2 How Are Functions Defined in R?\nYou can define a your own functions in R with the following syntax:\nFUNCTION_NAME &lt;- function(PARAMETER_1, PARAMETER_2, ...) {\n   # Code to run when the function is called\n}\nWhat this does not demonstrate is that there are actually two steps to a function: building it and calling it. We will look at both steps in the following code from DataCamp:\n\n\n4.4.3 Building and Calling Functions\n\n4.4.3.1 Step 1: Building the Function\nThe code chunk builds the function, setting myFirstFun as the name, or variable, to which they have assigned the function. The function itself runs from the word function down through the closing curly brace.\n\nmyFirstFun &lt;- function(n)\n{\n  # Compute the square of integer `n`\n  n * n\n}\n\nWhat is a parameter? In the above example, n is the only parameter.\nWhen we run the above code, the function is saved as an object into the global environment so that it can be called elsewhere, as demonstrated in the code chunks below.\nThe function has no effect unless you apply it. Until that happens, the function will do nothing but wait to be called.\n\n\n4.4.3.2 Step 2: Calling the function\nThe code chunk below calls myFirstFun and tells R to assign the results of the operation the function performs (n * n) to the variable u.\nWe can apply this function by setting n as a number, such as 2, as in the example below:\n\n# Call the function with argument 2\nu &lt;- myFirstFun(2)\n\nu\n\n[1] 4\n\n\nOnce we have set n to a number, R then performs this operation and saves the result to a new variable u. We can then ask R to tell us what u is, and R returns or prints the results of the function, which in this case, is the number 4 (2 * 2).\nThe image below shows the results we get if we attempt to run the function without changing the argument n to a number (giving us an error), and the results when we set n to the number 2, which assigns the result of the function (4) to u, or the number 3 which assigns the result of the function (now 9) to u.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Core Programming Concepts</span>"
    ]
  },
  {
    "objectID": "chapters/05_files-packages-indexing.html",
    "href": "chapters/05_files-packages-indexing.html",
    "title": "5  Files, Packages, and Data",
    "section": "",
    "text": "5.1 Working with Files",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Files, Packages, and Data</span>"
    ]
  },
  {
    "objectID": "chapters/05_files-packages-indexing.html#working-with-files",
    "href": "chapters/05_files-packages-indexing.html#working-with-files",
    "title": "5  Files, Packages, and Data",
    "section": "",
    "text": "5.1.1 Setup\n\n\n\n\n\n\nImportant\n\n\n\nTo follow along, download this zip file!\n\n\nNavigate to where you want to save your work:\ncd ~/Documents/\nNext, make a directory:\nmkdir files_in_r\ncd files_in_r\nCopy the downloaded zip file into that directory:\ncp ~/Downloads/best_in_show.zip .\nUnzip the file:\nunzip best_in_show.zip\nNavigate to the newly created directory\ncd best_in_show\n\n\n5.1.2 Exploring Files\nWhen working with files, its important to gather lots of information, and constantly test assumptions that you may have.\nThis process is a key part of programming and of working in the command line.\nLet’s start by seeing what we have, which we do with the ls command:\nls\nRemember that ls can be modified with flags, for example, to see all the files including hidden ones, use the -a flag:\nls -a\nYou can see more information about the files with the -l flag:\nls -l\nModifiers can be combined for ls:\nls -la\nYou can use du -h to see the disk usage (file size) of a given file:\ndu -h dogs.csv\n-h refers to human readable as by default du displays the size in block units. Being aware of the size of a file early on can help debug issues with running out of disk space, as well as issues down the line in the analysis process. For example, reading in too many too large files into R can create issues for you by overloading your system’s RAM (your computer’s working memory).\nYou can view the disk usage for all the files in the directory with the wildcard symbol *:\ndu -h *\n\n5.1.2.1 File Extensions\nMost of the time, you can guess the format of a file by looking at its extension, the characters (usually three) after the last dot . in the file name. For example, the extension .jpg or .jpeg indicates a JPEG image file. Some operating systems hide extensions by default, but you can find instructions to change this setting online by searching for “show file extensions” and your operating system’s name. The extension is just part of the file’s name, so it should be taken as a hint about the file’s format rather than a guarantee.\n\n\n5.1.2.2 Text Files\nA text file is one that contains human-readable lines of text. You can check this by opening the file with a text editor such as Microsoft Notepad or macOS TextEdit. Many file formats use text in order to make the format easier to work with.\nOn the command line, you can get information about the type of a file by using the file command followed by the name of a file:\nfile dogs.csv\nNote that file uses a series of tests (learn more by reading man file), to determine the file type and may not always perfectly report the type of the file.\nThe output of file is the file name followed by a colon and then a description of the file type.\nIn this case, the output tells us that dogs.csv is a CSV text file.\nA comma-separated values (CSV) file records tabular data using one line per row, with commas separating columns.\nFrom the command line we can read text files with vim:\nvim dogs.csv\nTo see the type of all the files in the directory you can use the wildcard * operator:\nfile *\n\n\n5.1.2.3 Binary Files\nA binary file is one that’s not human-readable. You can’t just read off the data if you open a binary file in a text editor, but they have a number of other advantages. Compared to text files, binary files are often faster to read and take up less storage space (bytes).\nFor demonstrations sake, see what happens when you try to use vim to ‘read’ a binary data file:\nvim dogs.rds\nNotice that the editor displays data but it isn’t human readable, it looks like a bunch of random symbols with potentially the occasional recognizable word.\n\n\n5.1.2.4 Common Data File Types\n\n\n\nName\nExtension\nTabular?\nText?\n\n\n\n\nComma-separated Values\n.csv\nYes\nYes\n\n\nTab-separated Values\n.tsv\nYes\nYes\n\n\nFixed-width File\n.fwf\nYes\nYes\n\n\nMicrosoft Excel\n.xlsx\nYes\nNo\n\n\nMicrosoft Excel 1993-2007\n.xls\nYes\nNo\n\n\nApache Arrow\n.feather\nYes\nNo\n\n\nR Data\n.rds\nSometimes\nNo\n\n\nR Data\n.rda\nSometimes\nNo\n\n\nPlaintext\n.txt\nSometimes\nYes\n\n\nExtensible Markup Language\n.xml\nNo\nYes\n\n\nJavaScript Object Notation\n.json\nNo\nYes\n\n\n\n\n\n\n5.1.3 Reading and Writing Files in R\nR has many functions for working with file systems, reading and writing files.\n\n5.1.3.1 The Working Directory\nThe working directory is the starting point R uses for relative paths. Think of the working directory as the directory R is currently “at” or watching.\nThe function getwd returns the absolute path for the current working directory, as a string. It doesn’t require any arguments:\n\ngetwd()\n\nOn your computer, the output from getwd will likely be different. This is a very useful function for getting your bearings when you write relative paths. If you write a relative path and it doesn’t work as expected, the first thing to do is check the working directory.\nThe related setwd function changes the working directory. It takes one argument: a path to the new working directory. Here’s an example:\n\nsetwd(\"..\")\n# Now check the working directory.\ngetwd()\n\nGenerally, you should avoid using calls to setwd in your R scripts and R Markdown files. Calling setwd makes your code more difficult to understand, and can always be avoided by using appropriate relative paths. If you call setwd with an absolute path, it also makes your code less portable to other computers. It’s fine to use setwd interactively (in the R console), but avoid making your saved code dependent on it.\n\n\n\n\n\n\nTip\n\n\n\nWhen working in RStudio, you can set the working directory at the start of your session in Session -&gt; Set Working Directory -&gt; To Source File Location.\n\n\nAnother function that’s useful for dealing with the working directory and file system is list.files. The list.files function returns the names of all of the files and directories inside of a directory. It accepts a path to a directory as an argument, or assumes the working directory if you don’t pass a path. For instance:\n\n# List files and directories in ~/.\nlist.files(\"~/\")\n# List files and directories in the working directory.\nlist.files()\n\nIf you call list.files with an invalid path or an empty directory, the output is character(0):\n\nlist.files(\"/this/path/is/fake/\")\n\ncharacter(0)\n\n\nLater on, we’ll learn about what character(0) means more generally.\n\n\n5.1.3.2 Reading a CSV File\nLet’s go ahead and read the dogs.csv file we extracted from the zip file at the start.\nR provides a very easy built-in function for reading CSV files, and a variety of other formats for text files containing tabular data.\nTo read a CSV file into R, use read.csv:\n\ndogs = read.csv('dogs.csv')\n\n\n5.1.3.2.1 Inspecting the Data\n\ndogs = readRDS('data/dogs.rds')\n\nWhenever you import data into R, it is crucial to check that things went as expected. To check things went according to our expectation, look at the output of the read.csv function, which we saved into dogs.\nLet’s see what the output is. We can check what the object is with the class function:\n\nclass(dogs)\n\n[1] \"data.frame\"\n\n\nWe can see that the read.csv function returned a data frame. This makes sense because data frames represent tabular data, and csv files contain tabular data.\nWe can get more information with the str function. str concisely gives information about the content of an R object:\n\nstr(dogs)\n\n'data.frame':   172 obs. of  18 variables:\n $ breed            : chr  \"Border Collie\" \"Border Terrier\" \"Brittany\" \"Cairn Terrier\" ...\n $ group            : Factor w/ 7 levels \"herding\",\"hound\",..: 1 5 4 5 4 4 4 6 1 1 ...\n $ datadog          : num  3.64 3.61 3.54 3.53 3.34 3.33 3.3 3.26 3.25 3.22 ...\n $ popularity_all   : int  45 80 30 59 130 63 27 38 60 20 ...\n $ popularity       : int  39 61 30 48 81 51 27 33 49 20 ...\n $ lifetime_cost    : num  20143 22638 22589 21992 20224 ...\n $ intelligence_rank: int  1 30 19 35 31 18 20 8 10 6 ...\n $ longevity        : num  12.5 14 12.9 13.8 12.5 ...\n $ ailments         : int  2 0 0 2 1 0 2 5 1 5 ...\n $ price            : num  623 833 618 435 750 800 465 740 530 465 ...\n $ food_cost        : num  324 324 466 324 324 324 674 324 466 405 ...\n $ grooming         : Factor w/ 3 levels \"daily\",\"weekly\",..: 2 2 2 2 2 2 2 2 2 1 ...\n $ kids             : Factor w/ 3 levels \"high\",\"medium\",..: 3 1 2 1 1 1 1 2 3 1 ...\n $ megarank_kids    : int  1 2 3 4 5 6 7 8 9 11 ...\n $ megarank         : int  29 1 11 2 4 5 6 22 52 8 ...\n $ size             : Factor w/ 3 levels \"large\",\"medium\",..: 2 3 2 3 2 2 3 3 2 3 ...\n $ weight           : num  NA 13.5 35 14 NA 30 25 NA NA 22 ...\n $ height           : num  20 NA 19 10 18 16 14.5 9.5 18.5 14.5 ...\n\n\nLet’s check the dimensions of our dataset:\n\ndim(dogs)\n\n[1] 172  18\n\n\nRecall we can access the number of rows with:\n\nnrow(dogs)\n\n[1] 172\n\n\nAnd the number of columns:\n\nncol(dogs)\n\n[1] 18\n\n\nTo display the first rows from the dataset, use head:\n\nhead(dogs)\n\n                   breed    group datadog popularity_all popularity\n1          Border Collie  herding    3.64             45         39\n2         Border Terrier  terrier    3.61             80         61\n3               Brittany sporting    3.54             30         30\n4          Cairn Terrier  terrier    3.53             59         48\n5 Welsh Springer Spaniel sporting    3.34            130         81\n6 English Cocker Spaniel sporting    3.33             63         51\n  lifetime_cost intelligence_rank longevity ailments price food_cost grooming\n1         20143                 1     12.52        2   623       324   weekly\n2         22638                30     14.00        0   833       324   weekly\n3         22589                19     12.92        0   618       466   weekly\n4         21992                35     13.84        2   435       324   weekly\n5         20224                31     12.49        1   750       324   weekly\n6         18993                18     11.66        0   800       324   weekly\n    kids megarank_kids megarank   size weight height\n1    low             1       29 medium     NA     20\n2   high             2        1  small   13.5     NA\n3 medium             3       11 medium   35.0     19\n4   high             4        2  small   14.0     10\n5   high             5        4 medium     NA     18\n6   high             6        5 medium   30.0     16\n\n\nAnd to display the last rows from the dataset, use tail:\n\ntail(dogs)\n\n                          breed        group datadog popularity_all popularity\n167                      Vizsla     sporting      NA             37         NA\n168                  Weimaraner     sporting      NA             32         NA\n169               Welsh Terrier      terrier      NA             99         NA\n170            Wire Fox Terrier      terrier      NA            100         NA\n171 Wirehaired Pointing Griffon     sporting      NA             92         NA\n172              Xoloitzcuintli non-sporting      NA            155         NA\n    lifetime_cost intelligence_rank longevity ailments price food_cost grooming\n167            NA                25     12.50        0   935        NA     &lt;NA&gt;\n168            NA                21        NA        1   562        NA   weekly\n169            NA                53        NA        0   843        NA   weekly\n170            NA                51     13.17        0   668        NA     &lt;NA&gt;\n171            NA                46      8.80        0   755        NA     &lt;NA&gt;\n172            NA                NA        NA       NA   717        NA     &lt;NA&gt;\n    kids megarank_kids megarank   size weight height\n167 &lt;NA&gt;            NA       NA medium     NA   22.5\n168 high            NA       NA  large     NA   25.0\n169 high            NA       NA  small   20.0   15.0\n170 &lt;NA&gt;            NA       NA  small   17.5   15.0\n171 &lt;NA&gt;            NA       NA medium     NA   22.0\n172 &lt;NA&gt;            NA       NA medium     NA   16.5\n\n\n\n\n\n\n\n5.1.3.3 Writing an RDS\nYou can save any R object, such as a data frame, as an RDS file. RDS files are a great option for storing data that is intended to be loaded into R. Data saved as RDS can be quickly and accurately loaded out of and back into R without losing any information.\nThis isn’t always the case when saving data in plain text formats such as CSV. Any R-related metadata associated with the object you are saving will be maintained in the RDS format. This is useful in the case of data frames if your data contains factors, or dates, or other specific class attributes that won’t be represented in a csv. You would need to reproduce the process for parsing the data into R.\nAdditionally, RDS files often times take significantly less disk space to save, as they are a compressed format. RDS files in general are faster to read.\nHowever, its important to keep in mind that RDS files are meant to be used only in R. If you save data as an RDS, you are assuming that however is using that data will have access to and an understanding of R.\nAs a result, its common to use the RDS format for saving intermediary data in a project. While when exporting results to a collaborator, or the internet you would most likely want to use a commonly used plain-text format such as CSV.\nUse saveRDS to save our data as an RDS file with the rds file extension.\n\nsaveRDS(dogs, \"./outputs/dogs.rds\")\n\nYou can load data saved in RDS files with readRDS:\n\ndogs = readRDS(\"./outputs/dogs.rds\")\n\n\n\n5.1.3.4 Writing a CSV\nWe just saved and read the dogs data as an RDS file, and we can practice saving data in other forms, such as a comma separated values (CSV) file. Because we will be re-using the class survey data from the first week, let’s go ahead and save this data frame as a CSV in your working directory.\nFirst, you will want to create a folder called data/ in your working directory. You can do this in your console with the dir.create() function (this is like the mkdir command used in the command line). (Hint: make sure you are in your class working directory). You can run the following in your console:\ndir.create(\"data\")\nYou can also use a point-and-click method by finding the New Folder button in the bottom right pane of RStudio, under the Files tab.\nNext, let’s manually create the my.data data frame once more, by copying and pasting the code below.\n\npets &lt;- c(\"Cats rule, dogs drool\", \"Cats rule, dogs drool\",\n          \"Cats rule, dogs drool\", \"Cats rule, dogs drool\",\n          \"Cats rule, dogs drool\", \"Woof\", \"Woof\", \"Cats rule, dogs drool\",\n          \"Woof\", \"Woof\", \"Cats rule, dogs drool\")\nplace &lt;- c(\"Shah's\", \"Red 88 noodle bar\", \"UC Davis CoHo\", \"Thai Canteen\",\n           \"Tim's Hawaiian\", \"Peet's coffee and Blaze pizza\", \"Good Friends\",\n           \"in-n-out\", \"In n Out\", \"Mishka's!\", \"California Coffee\")\ntime.min &lt;- c(1, 5, 1, 4, 3, 1, 5, 4, 4, 4, 1)\ndistance.mi &lt;- c(472, 0.9, 1.2, 0.6, 0.6, 0.2, 1, 0.8, 0.8, 0.7, 0.3)\nmajor &lt;- c(\"Computer Science\", \"Genetics & Genomics\", \"Computer Science\",\n           \"Computer Science\", \"Science and Technology Studies\",\n           \"Biomedical Engineering\", \"Economics\", \"Computer science\",\n           \"Computer Science and Engineering\", \"Spanish Linguistics\",\n           \"Computer Science\")\n\nmy.data &lt;- data.frame(place, distance.mi, time.min, major, pets)\n\nNow that we have a data frame called my.data, we can use the write.csv function to save this data frame as a csv in our data folder. Let’s call it class_survey.csv.\n\nwrite.csv(my.data, \"data/class_survey.csv\", row.names = F)\n\nNow this data will be available to us for future use without having to copy and paste.\n\n\n5.1.3.5 Excel Files in R\nExcel is very popular in the data analysis world. Millions of people use Excel to input, clean, analyze, and store data. R doesn’t provide a built-in function to load Excel files. Fortunately, members of the R community share code for a variety of tasks, including loading Excel files.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Files, Packages, and Data</span>"
    ]
  },
  {
    "objectID": "chapters/05_files-packages-indexing.html#packages",
    "href": "chapters/05_files-packages-indexing.html#packages",
    "title": "5  Files, Packages, and Data",
    "section": "5.2 Packages",
    "text": "5.2 Packages\nLots of the most useful parts of R do not come pre-loaded when you install R. Packages bundle together code, documentation and data. It’s easy to share, and easy to include in your own code. Users have contributed thousands of R packages which can be found online.\nYou can think of a package as one or more functions that are related to a specific task, that you can include in your code.\nPackages need to be installed on your system and then loaded into your R session.\n\n5.2.1 CRAN\nThe Comprehensive R Archive Network (CRAN) is the main website that makes R packages accessible.\n\n5.2.1.1 readxl\nreadxl is a package written to provide functions for working with Excel files in R.\n\n\n\n5.2.2 Using Packages\nTo use an R package, it first needs to be installed on your system, and then loaded into the R session.\n\n5.2.2.1 Installing Packages\nYou can install packages from CRAN onto your system using install.packages. It will search for the package on CRAN, and download the code onto your computer in a place that R can access.\nTo install the readxl package, we pass the name to install.packages:\n\ninstall.packages(\"readxl\")\n\n\n\n5.2.2.2 Loading Packages\nEven if the package is on your system, it is not automatically loaded into R.\nEvery time you restart R you will need to reload each package that your script uses. Do so with library at the top of your script for each package that you will use.\nThis signals to you and anyone else that uses your script which packages are required to run the code, and will stop the execution of the script if any of the packages are not found.\nTo load in the readxl package we installed in the previous step, use library:\n\nlibrary(\"readxl\")\n\nThis will load in all the functions, data, and documentation from the readxl library, so we can now access them in our R session.\nTo see all the packages installed you can run library without any arguments:\n\nlibrary()\n\nThis displays all the installed libraries as well the path R is searching to find them.\n\n\n5.2.2.3 Example: Load Excel Data\nWith the excel_sheets function in readxl, we can list all the sheets in an Excel spreadsheet:\n\nsheets = excel_sheets(\"./data/dogs.xlsx\")\n\nWe can then load the data with read_xlsx:\n\ndata = read_xlsx(\"./data/dogs.xlsx\")",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Files, Packages, and Data</span>"
    ]
  },
  {
    "objectID": "chapters/05_files-packages-indexing.html#factors-special-values-and-indexing",
    "href": "chapters/05_files-packages-indexing.html#factors-special-values-and-indexing",
    "title": "5  Files, Packages, and Data",
    "section": "5.3 Factors, Special Values, and Indexing",
    "text": "5.3 Factors, Special Values, and Indexing\n\n5.3.1 Factors\nA feature in a data set is categorical if it measures a qualitative category. Some examples of categories are:\n\nMusic genres rock, blues, alternative, folk, pop\nColors red, green, blue, yellow\nAnswers yes, no\nMonths January, February, and so on\n\nIn some cases, a feature can be interpreted as categorical or quantitative. For instance, months can be interpreted as categories, but they can also be interpreted as numbers. There’s not necessarily a “correct” interpretation; each can be useful for different kinds of analyses.\nR uses the class factor to represent categorical data. For instance, in the dogs data set, the group column is a factor:\n\nclass(dogs$group)\n\n[1] \"factor\"\n\n\nVisualizations and statistical models sometimes treat factors differently than other data types, so it’s important to think about whether you want R to interpret data as categorical.\nWhen you load a data set, R usually can’t tell which features are categorical. That means identifying and converting the categorical features is up to you. For beginners, it can be difficult to understand whether a feature is categorical or not. The key is to think about whether you want to use the feature to divide the data into groups.\nFor example, if we want to know how many songs are in the rock genre, we first need to divide the songs by genre, and then count the number of songs in each group (or at least the rock group).\nAs a second example, months recorded as numbers can be categorical or not, depending on how you want to use them. You might want to treat them as categorical (for example, to compute max rainfall in each month) or you might want to treat them as numbers (for example, to compute the number of months time between two events).\nThe bottom line is that you have to think about what you’ll be doing in the analysis. In some cases, you might treat a feature as categorical only for part of the analysis.\nYou can use the factor function to convert a vector into a factor:\n\ncolors = c(\"red\", \"green\", \"red\", \"blue\")\ncolors = factor(colors)\ncolors\n\n[1] red   green red   blue \nLevels: blue green red\n\n\nNotice that factors are printed differently than strings.\nThe categories of a factor are called levels. You can list the levels with the levels function:\n\nlevels(colors)\n\n[1] \"blue\"  \"green\" \"red\"  \n\n\nFactors remember all possible levels even if you take a subset:\n\ncolors[1:3]\n\n[1] red   green red  \nLevels: blue green red\n\n\nThis is another way factors are different from strings. Factors “remember” all possible levels even if they aren’t present. This ensures that if you plot a factor, the missing levels will still be represented on the plot.\nYou can make a factor forget levels that aren’t present with the droplevels function:\n\ndroplevels(colors[1:3])\n\n[1] red   green red  \nLevels: green red\n\n\n\n\n5.3.2 Special Values\nR has four special values to represent missing or invalid data.\n\n5.3.2.1 Missing Values\nThe value NA is called the missing value. Most of the time, missing values originate from how the data were collected (as opposed to computer errors). As an example, imagine the data came from a survey, and respondents chose not to answer some questions. In the data set, their answers for those questions might be recorded as NA.\nOf course, there are sometimes exceptions where missing values are the result of a computation. When you see missing values in a data set, you should think carefully about what the cause might be. Sometimes documentation or other parts of the data set provide clues.\nThe missing value is a chameleon: it can be a logical, integer, numeric, complex, or character value. By default, the missing value is logical, and the other types occur through coercion (@ref(implicit-coercion)):\n\nclass(NA)\n\n[1] \"logical\"\n\nclass(c(1, NA))\n\n[1] \"numeric\"\n\nclass(c(\"hi\", NA, NA))\n\n[1] \"character\"\n\n\nThe missing value is also contagious: it represents an unknown quantity, so using it as an argument to a function usually produces another missing value. The idea is that if the inputs to a computation are unknown, generally so is the output:\n\nNA - 3\n\n[1] NA\n\nmean(c(1, 2, NA))\n\n[1] NA\n\n\nAs a consequence, testing whether an object is equal to the missing value with == doesn’t return a meaningful result:\n\n5 == NA\n\n[1] NA\n\nNA == NA\n\n[1] NA\n\n\nYou can use the is.na function instead:\n\nis.na(5)\n\n[1] FALSE\n\nis.na(NA)\n\n[1] TRUE\n\nis.na(c(1, NA, 3))\n\n[1] FALSE  TRUE FALSE\n\n\nMissing values are a feature that sets R apart from most other programming languages.\n\n\n5.3.2.2 Not a Number\nThe value NaN, called not a number, represents a quantity that’s undefined mathematically. For instance, dividing 0 by 0 is undefined:\n\n0 / 0\n\n[1] NaN\n\nclass(NaN)\n\n[1] \"numeric\"\n\n\nNaN can be numeric or complex.\nYou can use the is.nan function to test whether a value is NaN:\n\nis.nan(c(10.1, log(-1), 3))\n\nWarning in log(-1): NaNs produced\n\n\n[1] FALSE  TRUE FALSE\n\n\n\n\n5.3.2.3 Infinity\nThe value Inf represents infinity, and can be numeric or complex. You’re most likely to encounter it as the result of certain computations:\n\n13 / 0\n\n[1] Inf\n\nclass(Inf)\n\n[1] \"numeric\"\n\n\nYou can use the is.infinite function to test whether a value is infinite:\n\nis.infinite(3)\n\n[1] FALSE\n\nis.infinite(c(-Inf, 0, Inf))\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\n\n5.3.3 Indexing\nThe way to get and set elements of a data structure is by indexing. Sometimes this is also called subsetting or (element) extraction. Indexing is a fundamental operation in R, key to reasoning about how to solve problems with the language.\nWe first saw indexing in Section @ref(indexing-vectors), where we used [, the indexing or square bracket operator, to get and set elements of vectors. We saw indexing again in Section @ref(data-frames), where we used $, the dollar sign operator, to get and set data frame columns.\nThe indexing operator [ is R’s primary operator for indexing. It works in four different ways, depending on the type of the index you use:\n\nAn empty index selects all elements\nA numeric index selects elements by position\nA character index selects elements by name\nA logical index selects elements for which the index is TRUE\n\nLet’s explore each in more detail. We’ll use this vector as an example, to keep things concise:\n\nx = c(a = 10, b = 20, c = 30, d = 40, e = 50)\nx\n\n a  b  c  d  e \n10 20 30 40 50 \n\n\nEven though we’re using a vector here, the indexing operator works with almost all data structures, including factors, lists, matrices, and data frames. We’ll look at unique behavior for some of these later on.\n\n5.3.3.1 All Elements\nThe first way to use [ to select elements is to leave the index blank. This selects all elements:\n\nx[]\n\n a  b  c  d  e \n10 20 30 40 50 \n\n\nThis way of indexing is rarely used for getting elements, since it’s the same as entering the variable name without the indexing operator. Instead, its main use is for setting elements. Suppose we want to set all the elements of x to 5. You might try writing this:\n\nx = 5\nx\n\n[1] 5\n\n\nRather than setting each element to 5, this sets x to the scalar 5, which is not what we want. Let’s reset the vector and try again, this time using the indexing operator:\n\nx = c(a = 10, b = 20, c = 30, d = 40, e = 50)\nx[] = 5\nx\n\na b c d e \n5 5 5 5 5 \n\n\nAs you can see, now all the elements are 5. So the indexing operator is necessary to specify that we want to set the elements rather than the whole variable.\nLet’s reset x one more time, so that we can use it again in the next example:\n\nx = c(a = 10, b = 20, c = 30, d = 40, e = 50)\n\n\n\n5.3.3.2 By Position\nThe second way to use [ is to select elements by position. This happens when you use an integer or numeric index. We already saw the basics of this in Section @ref(indexing-vectors).\nThe positions of the elements in a vector (or other data structure) correspond to numbers starting from 1 for the first element. This way of indexing is frequently used together with the sequence operator : to get ranges of values. For instance, let’s get the 2nd through 4th elements of x:\n\nx[2:4]\n\n b  c  d \n20 30 40 \n\n\nYou can also use this way of indexing to set specific elements or ranges of elements. For example, let’s set the 3rd and 5th elements of x to 9 and 7, respectively:\n\nx[c(3, 5)] = c(9, 7)\nx\n\n a  b  c  d  e \n10 20  9 40  7 \n\n\nWhen getting elements, you can repeat numbers in the index to get the same element more than once. You can also use the order of the numbers to control the order of the elements:\n\nx[c(2, 1, 2, 2)]\n\n b  a  b  b \n20 10 20 20 \n\n\nFinally, if the index contains only negative numbers, the elements at those positions are excluded rather than selected. For instance, let’s get all elements except the 1st and 5th:\n\nx[-c(1, 5)]\n\n b  c  d \n20  9 40 \n\n\nWhen you index by position, the index should always be all positive or all negative. Using a mix of positive and negative numbers causes R to emit error rather than returning elements, since it’s unclear what the result should be:\n\nx[c(-1, 2)]\n\nError in x[c(-1, 2)]: only 0's may be mixed with negative subscripts\n\n\n\n\n5.3.3.3 By Name\nThe third way to use [ is to select elements by name. This happens when you use a character vector as the index, and only works with named data structures.\nLike indexing by position, you can use indexing by name to get or set elements. You can also use it to repeat elements or change the order. Let’s get elements a, c, d, and a again from the vector x:\n\ny = x[c(\"a\", \"c\", \"d\", \"a\")]\ny\n\n a  c  d  a \n10  9 40 10 \n\n\nElement names are generally unique, but if they’re not, indexing by name gets or sets the first element whose name matches the index:\n\ny[\"a\"]\n\n a \n10 \n\n\nLet’s reset x again to prepare for learning about the final way to index:\n\nx = c(a = 10, b = 20, c = 30, d = 40, e = 50)\n\n\n\n5.3.3.4 By Condition\nThe fourth and final way to use [ is to select elements based on a condition. This happens when you use a logical vector as the index. The logical vector should have the same length as what you’re indexing, and will be recycled (that is, repeated) if it doesn’t.\n\nCongruent Vectors\nTo understand indexing by condition, we first need to learn about congruent vectors. Two vectors are congruent if they have the same length and they correspond element-by-element.\nFor example, suppose you do a survey that records each respondent’s favorite animal and age. These are two different vectors of information, but each person will have a response for both. So you’ll have two vectors that are the same length:\n\nanimal = c(\"dog\", \"cat\", \"iguana\")\nage = c(31, 24, 72)\n\nThe 1st element of each vector corresponds to the 1st person, the 2nd to the 2nd person, and so on. These vectors are congruent.\nNotice that columns in a data frame are always congruent!\n\n\nBack to Indexing\nWhen you index by condition, the index should generally be congruent to the object you’re indexing. Elements where the index is TRUE are kept and elements where the index is FALSE are dropped.\nIf you create the index from a condition on the object, it’s automatically congruent. For instance, let’s make a condition based on the vector x:\n\nis_small = x &lt; 25\nis_small\n\n    a     b     c     d     e \n TRUE  TRUE FALSE FALSE FALSE \n\n\nThe 1st element in the logical vector is_small corresponds to the 1st element of x, the 2nd to the 2nd, and so on. The vectors x and is_small are congruent.\nIt makes sense to use is_small as an index for x, and it gives us all the elements less than 25:\n\nx[is_small]\n\n a  b \n10 20 \n\n\nOf course, you can also avoid using an intermediate variable for the condition:\n\nx[x &gt; 10]\n\n b  c  d  e \n20 30 40 50 \n\n\nIf you create index some other way (not using the object), make sure that it’s still congruent to the object. Otherwise, the subset returned from indexing might not be meaningful.\nYou can also use indexing by condition to set elements, just as the other ways of indexing can be used to set elements. For instance, let’s set all the elements of x that are greater than 10 to the missing value NA:\n\nx[x &gt; 10] = NA\nx\n\n a  b  c  d  e \n10 NA NA NA NA \n\n\n\n\n\n5.3.3.5 Logic\nAll of the conditions we’ve seen so far have been written in terms of a single test. If you want to use more sophisticated conditions, R provides operators to negate and combine logical vectors. These operators are useful for working with logical vectors even outside the context of indexing.\n\nNegation\nThe NOT operator ! converts TRUE to FALSE and FALSE to TRUE:\n\nx = c(TRUE, FALSE, TRUE, TRUE, NA)\nx\n\n[1]  TRUE FALSE  TRUE  TRUE    NA\n\n!x\n\n[1] FALSE  TRUE FALSE FALSE    NA\n\n\nYou can use ! with a condition:\n\ny = c(\"hi\", \"hello\")\n!(y == \"hi\")\n\n[1] FALSE  TRUE\n\n\nThe NOT operator is vectorized.\n\n\nCombinations\nR also has operators for combining logical values.\nThe AND operator & returns TRUE only when both arguments are TRUE. Here are some examples:\n\nFALSE & FALSE\n\n[1] FALSE\n\nTRUE & FALSE\n\n[1] FALSE\n\nFALSE & TRUE\n\n[1] FALSE\n\nTRUE & TRUE\n\n[1] TRUE\n\nc(TRUE, FALSE, TRUE) & c(TRUE, TRUE, FALSE)\n\n[1]  TRUE FALSE FALSE\n\n\nThe OR operator | returns TRUE when at least one argument is TRUE. Let’s see some examples:\n\nFALSE | FALSE\n\n[1] FALSE\n\nTRUE | FALSE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE\n\nTRUE | TRUE\n\n[1] TRUE\n\nc(TRUE, FALSE) | c(TRUE, TRUE)\n\n[1] TRUE TRUE\n\n\nBe careful: everyday English is less precise than logic. You might say:\n\nI want all subjects with age over 50 and all subjects that like cats.\n\nBut in logic this means:\n(subject age over 50) OR (subject likes cats)\nSo think carefully about whether you need both conditions to be true (AND) or at least one (OR).\nRarely, you might want exactly one condition to be true. The XOR (eXclusive OR) function xor() returns TRUE when exactly one argument is TRUE. For example:\n\nxor(FALSE, FALSE)\n\n[1] FALSE\n\nxor(TRUE, FALSE)\n\n[1] TRUE\n\nxor(TRUE, TRUE)\n\n[1] FALSE\n\n\nThe AND, OR, and XOR operators are vectorized.\n\n\nShort-circuiting\nThe second argument is irrelevant in some conditions:\n\nFALSE & is always FALSE\nTRUE | is always TRUE\n\nNow imagine you have FALSE & long_computation(). You can save time by skipping long_computation(). A short-circuit operator does exactly that.\nR has two short-circuit operators:\n\n&& is a short-circuited &\n|| is a short-circuited |\n\nThese operators only evaluate the second argument if it is necessary to determine the result. Here are some of these:\n\nTRUE && FALSE\n\n[1] FALSE\n\nTRUE && TRUE\n\n[1] TRUE\n\nTRUE || TRUE\n\n[1] TRUE\n\n\nFor the final expression, notice R only combines the first element of each vector. The others are ignored. In other words, the short-circuit operators are not vectorized! Because of this, generally you should not use the short-circuit operators for indexing. Their main use is in writing conditions for control structures (@ref(control-structures)) and loops (@ref(iterating-loops)).\n\n\n\n5.3.3.6 Indexing Lists\nLists are a container for other types of R objects. When you select an element from a list, you can either keep the container (the list) or discard it. The indexing operator [ almost always keeps containers.\nAs an example, let’s get some elements from a small list:\n\nx = list(first = c(1, 2, 3), second = sin, third = c(\"hi\", \"hello\"))\ny = x[c(1, 3)]\ny\n\n$first\n[1] 1 2 3\n\n$third\n[1] \"hi\"    \"hello\"\n\nclass(y)\n\n[1] \"list\"\n\n\nThe result is still a list. Even if we get just one element, the result of indexing a list with [ is a list:\n\nclass(x[1])\n\n[1] \"list\"\n\n\nSometimes this will be exactly what we want. But what if we want to get the first element of x so that we can use it in a vectorized function? Or in a function that only accepts numeric arguments? We need to somehow get the element and discard the container.\nThe solution to this problem is the extraction operator [[, which is also called the double square bracket operator. The extraction operator is the primary way to get and set elements of lists and other containers.\nUnlike the indexing operator [, the extraction operator always discards the container:\n\nx[[1]]\n\n[1] 1 2 3\n\nclass(x[[1]])\n\n[1] \"numeric\"\n\n\nThe trade off is that the extraction operator can only get or set one element at a time. Note that the element can be a vector, as above. Because it can only get or set one element at a time, the extraction operator can only index by position or name. Blank and logical indexes are not allowed.\nThe final difference between the index operator [ and the extraction operator [[ has to do with how they handle invalid indexes. The index operator [ returns NA for invalid vector elements, and NULL for invalid list elements:\n\nc(1, 2)[10]\n\n[1] NA\n\nx[10]\n\n$&lt;NA&gt;\nNULL\n\n\nOn the other hand, the extraction operator [[ raises an error for invalid elements:\n\nx[[10]]\n\nError in x[[10]]: subscript out of bounds\n\n\nThe indexing operator [ and the extraction operator [[ both work with any data structure that has elements. However, you’ll generally use the indexing operator [ to index vectors, and the extraction operator [[ to index containers (such as lists).\n\n\n5.3.3.7 Indexing Data Frames\nFor two-dimensional objects, like matrices and data frames, you can pass the indexing operator [ or the extraction operator [[ a separate index for each dimension. The rows come first:\nDATA[ROWS, COLUMNS]\nFor instance, let’s get the first 3 rows and all columns of the dogs data:\n\ndogs[1:3, ]\n\n           breed    group datadog popularity_all popularity lifetime_cost\n1  Border Collie  herding    3.64             45         39         20143\n2 Border Terrier  terrier    3.61             80         61         22638\n3       Brittany sporting    3.54             30         30         22589\n  intelligence_rank longevity ailments price food_cost grooming   kids\n1                 1     12.52        2   623       324   weekly    low\n2                30     14.00        0   833       324   weekly   high\n3                19     12.92        0   618       466   weekly medium\n  megarank_kids megarank   size weight height\n1             1       29 medium     NA     20\n2             2        1  small   13.5     NA\n3             3       11 medium   35.0     19\n\n\nAs we saw in Section @ref(all-elements), leaving an index blank means all elements.\nAs another example, let’s get the 3rd and 5th row, and the 2nd and 4th column:\n\ndogs[c(3, 5), c(2, 4)]\n\n     group popularity_all\n3 sporting             30\n5 sporting            130\n\n\nMixing several different ways of indexing is allowed. So for example, we can get the same above, but use column names instead of positions:\n\ndogs[c(3, 5), c(\"breed\", \"longevity\")]\n\n                   breed longevity\n3               Brittany     12.92\n5 Welsh Springer Spaniel     12.49\n\n\nFor data frames, it’s especially common to index the rows by condition and the columns by name. For instance, let’s get the breed, popularity, and weight columns for all rows with toy dogs:\n\nresult = dogs[dogs$group == \"toy\", c(\"breed\", \"popularity\", \"weight\")]\nhead(result)\n\n           breed popularity weight\n8       Papillon         33     NA\n13 Affenpinscher         84     NA\n16     Chihuahua         14    5.5\n28       Maltese         23    5.0\n29    Pomeranian         17    5.0\n30      Shih Tzu         11   12.5\n\n\n\n\n\n\n\n\nThe Drop Parameter\n\n\n\nIf you use two-dimensional indexing with [ to select exactly one column, you get a vector:\n\nresult = dogs[1:3, 2]\nclass(result)\n\n[1] \"factor\"\n\n\nThe container is dropped, even though the indexing operator [ usually keeps containers. This also occurs for matrices. You can control this behavior with the drop parameter:\n\nresult = dogs[1:3, 2, drop = FALSE]\nclass(result)\n\n[1] \"data.frame\"\n\n\nThe default is drop = TRUE.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Files, Packages, and Data</span>"
    ]
  },
  {
    "objectID": "chapters/06_data-structures.html",
    "href": "chapters/06_data-structures.html",
    "title": "6  Data Structures",
    "section": "",
    "text": "6.1 What Are Data?\nMerriam-Webster’s Dictionary defines data as:\nSeveral key principals are introduced in the above definition:\nData Scientists (as differentiated from statisticians or computer scientists, for example) are expert in understanding the nature of data itself and the steps necessary to assess the suitability of a given data set for answering specific research questions and the work required to properly prepare data for successful analysis. In the broadest terms, we call this process data forensics.\nThe first step in the data forensics process is understanding the format(s) through which data are stored and transferred.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "chapters/06_data-structures.html#what-are-data",
    "href": "chapters/06_data-structures.html#what-are-data",
    "title": "6  Data Structures",
    "section": "",
    "text": "factual information (such as measurements or statistics) used as a basis for reasoning, discussion, or calculation\ninformation in digital form that can be transmitted or processed\ninformation output by a sensing device or organ that includes both useful and irrelevant or redundant information and must be processed to be meaningful\n\n\n\ndata is an intermediary step leading towards some form of analysis or or presentation, not typically an end in itself\ndata comes in multiple formats, both digital and analogue\ndata can be collected by both humans and machines\nnot all data in a given dataset is necessarily meaningful, correct nor useful",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "chapters/06_data-structures.html#tabular-data",
    "href": "chapters/06_data-structures.html#tabular-data",
    "title": "6  Data Structures",
    "section": "6.2 Tabular Data",
    "text": "6.2 Tabular Data\nTabular data is the most ubiquitous form of data storage and the one most familiar to most users. Tabular data consists of organizing data in a table of rows and columns. Traditionally, each column in the table represents a field or variable and each row represents an observation or entity. For example, the table below shows a tabular organization of a subset of the mtcars dataset:\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n\n\nValiant\n18.1\n6\n225.0\n105\n\n\nDuster 360\n14.3\n8\n360.0\n245\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n\n\nMerc 230\n22.8\n4\n140.8\n95\n\n\nMerc 280\n19.2\n6\n167.6\n123",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "chapters/06_data-structures.html#tree-document-data-structures",
    "href": "chapters/06_data-structures.html#tree-document-data-structures",
    "title": "6  Data Structures",
    "section": "6.3 Tree / Document Data Structures",
    "text": "6.3 Tree / Document Data Structures\nAnother popular form of data structure is the tree structure, sometimes referred to as a document-based data structure. Tree data structures present data in a hierarchical tree-like structure in which all items related back to a single, root node. A “Family Tree” is a good example of tree structured data:\n\nThe mtcars data from the above table can also be represented using a tree structure:\n\nThe above image visually depicts the mtcars data as a tree, which works well for a human reader but is not parsable by the computer. There are a variety of ways to represent tree data as a computer file (or data stream) so that it can be read and parsed by the computer. In this class, we will cover two of the most popular formats: XML and JSON.\n\n6.3.1 Structuring Data as XML\nXML stands for extensible markup language. Markup languages have been around since the 1960s and were originally developed as a means of adding structured information to an existing unstructured text. In the days of analog text preparation, professional editors typically used a blue or red pencil to make notes on typed manuscripts. The use of a specially colored pen or pencil for “marking up” documents, as the procedure was known in the industry, easily allowed subsequent readers to distinguish between editorial comments and formatting notes on typed manuscripts from the text itself. Computerized markup languages were developed as a means of allowing data specialists to markup a text in a manner that would allow the computer to distinguish between textual content and meta-information (information about the text) when both types of information appear in the same file.\nXML is the most widely used form of markup today. In fact, nearly every webpage that you have ever viewed is actually an XML document that contains both content to be displayed and instructions for the computer on how to display that content embedded in the file using XML tags, which are simply instructions contained with the special characters &lt; and &gt;. For example, consider the following short email text:\nTo: Tavi\nFrom: Jonna\nSubject: Meeting\nDate: Thursday, February 4, 2021 at 2:46 PM\n\nDon't forget about meeting with Sarah next week, 2pm in room 242.\n\nThanks,\n\nJonna\nThis email contains quite a bit of structured email (sender, receiver, date/time, etc.), but there is no easy way for the computer easily extract this structure. We can solve this problem by using XML to embed information about the structure directly in the document as follows:\n&lt;head&gt;\n   &lt;to&gt;Tavi&lt;/to&gt;\n   &lt;from&gt;Jonna&lt;/from&gt;\n   &lt;subject&gt;Meeting&lt;/subject&gt;\n   &lt;datetime&gt;\n      &lt;dayofweek&gt;Thursday&lt;/dayofweek&gt;\n      &lt;month&gt;February&lt;/month&gt;\n      &lt;day&gt;4&lt;/day&gt;\n      &lt;year&gt;2021&lt;/year&gt;\n      &lt;time&gt;2:46 PM&lt;/time&gt;\n   &lt;/datetime&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n   Don't forget about meeting with Sarah next week, 2pm in room 242.\n\n   Thanks,\n\n   &lt;signature&gt;Jonna&lt;/signuature&gt;\n&lt;/body&gt;\nBy using XML, we are able to identify specific information in the email in a way that the computer is a capable of parsing. This allows us to use computational methods to easily extract information in bulk from many emails and it also allows us to program a computer program, such as an email client, to organize and properly display all of the parts of the email.\nThe above XML example illustrates several important aspects of XML:\n\nAll XML tags are enclosed in &lt; and &gt; symbols.\nThere are 2 primary types of tags, opening tags, which designate the beginning character that is defined by the tag, and closing tags, which designate the end of the portion of the text to be associated with the opening tag.\nClosing tags are always indicated by slash character, as in &lt;/TAG&gt;, where TAG is the name of the opening tag that is being closed.\nTags be be embedded within each other in a tree-like structure. However, any tags opened within a tag must be closed before that tag can be closed. For example, &lt;name&gt;&lt;first&gt;John&lt;/first&gt; &lt;last&gt;Doe&lt;/last&gt;&lt;/name&gt; is valid, but &lt;name&gt;&lt;first&gt;John&lt;/first&gt; &lt;last&gt;Doe&lt;/name&gt;&lt;/last&gt; is not valid.\n\nWhile XML was originally developed as a means of embedding meta information about a text directly in a text, it also quickly evolved into a stand-alone means of representing tree-structured data for exchange between computer systems. To this end, many computer applications use XML to store, share, and retrieve data. For example, we can represent the data in our truncated mtcars dataset as XML as follows:\n&lt;cars&gt;\n   &lt;make id=\"mazda\"&gt;\n      &lt;model id=\"RX4\"&gt;\n         &lt;mpg&gt;21.0&lt;/mpg&gt;\n         &lt;cyl&gt;6&lt;/cyl&gt;\n         &lt;disp&gt;160.0&lt;/disp&gt;\n         &lt;hp&gt;110&lt;/hp&gt;\n      &lt;/model&gt;\n      &lt;model id=\"RX4 Wag\"&gt;\n         &lt;mpg&gt;21.0&lt;/mpg&gt;\n         &lt;cyl&gt;6&lt;/cyl&gt;\n         &lt;disp&gt;160.0&lt;/disp&gt;\n         &lt;hp&gt;110&lt;/hp&gt;\n      &lt;/model&gt;\n   &lt;/make&gt;\n   &lt;make id=\"Datsun\"&gt;\n      &lt;model id=\"710\"&gt;\n         &lt;mpg&gt;22.8&lt;/mpg&gt;\n         &lt;cyl&gt;4&lt;/cyl&gt;\n         &lt;disp&gt;108.0&lt;/disp&gt;\n         &lt;hp&gt;93&lt;/hp&gt;\n      &lt;/model&gt;\n   &lt;/make&gt;\n   &lt;make id=\"Hornet\"&gt;\n      &lt;model id=\"4 Drive\"&gt;\n         &lt;mpg&gt;21.4&lt;/mpg&gt;\n         &lt;cyl&gt;6&lt;/cyl&gt;\n         &lt;disp&gt;258.0&lt;/disp&gt;\n         &lt;hp&gt;110&lt;/hp&gt;\n      &lt;/model&gt;\n      &lt;model id=\"Sportabout\"&gt;\n         &lt;mpg&gt;18.7&lt;/mpg&gt;\n         &lt;cyl&gt;8&lt;/cyl&gt;\n         &lt;disp&gt;360.0&lt;/disp&gt;\n         &lt;hp&gt;175&lt;/hp&gt;\n      &lt;/model&gt;\n   &lt;/make&gt;\n   &lt;make id=\"Valiant\"&gt;\n      &lt;model id=\"valiant\"&gt;\n         &lt;mpg&gt;18.1&lt;/mpg&gt;\n         &lt;cyl&gt;6&lt;/cyl&gt;\n         &lt;disp&gt;225.0&lt;/disp&gt;\n         &lt;hp&gt;105&lt;/hp&gt;\n      &lt;/model&gt;\n   &lt;/make&gt;\n   &lt;make id=\"Duster\"&gt;\n      &lt;model id=\"360\"&gt;\n         &lt;mpg&gt;14.3&lt;/mpg&gt;\n         &lt;cyl&gt;8&lt;/cyl&gt;\n         &lt;disp&gt;360.0&lt;/disp&gt;\n         &lt;hp&gt;245&lt;/hp&gt;\n      &lt;/model&gt;\n   &lt;/make&gt;\n   &lt;make id=\"Merc\"&gt;\n      &lt;model id=\"240D\"&gt;\n         &lt;mpg&gt;24.4&lt;/mpg&gt;\n         &lt;cyl&gt;4&lt;/cyl&gt;\n         &lt;disp&gt;146.7&lt;/disp&gt;\n         &lt;hp&gt;62&lt;/hp&gt;\n      &lt;/model&gt;\n      &lt;model id=\"230\"&gt;\n         &lt;mpg&gt;22.8&lt;/mpg&gt;\n         &lt;cyl&gt;4&lt;/cyl&gt;\n         &lt;disp&gt;140.8&lt;/disp&gt;\n         &lt;hp&gt;95&lt;/hp&gt;\n      &lt;/model&gt;\n      &lt;model id=\"280\"&gt;\n         &lt;mpg&gt;19.2&lt;/mpg&gt;\n         &lt;cyl&gt;6&lt;/cyl&gt;\n         &lt;disp&gt;167.6&lt;/disp&gt;\n         &lt;hp&gt;123&lt;/hp&gt;\n      &lt;/model&gt;\n   &lt;/make&gt;\n&lt;/cars&gt;\nFor an XML dataset to be technically valid, the tags used to markup the dataset must themselves be defined according to a schema, another XML document that defines all tags that can be used in marking up a dataset and the allowable tree structure of the markup (for example, which tags can be parents of which other tags, etc.). You do not need to understand, or even know, the schema being used to present data in order to read and parse an XML document. However, schemas are extremely useful (and often necessary) for building applications that perform advanced processing of XML documents, such as web browsers, email clients, etc.\n\n\n\n\n\n\nSee also\n\n\n\nFor more information on XML and XML schemas, see the W3Schools XML Tutorial.\n\n\n\n\n6.3.2 Structuring Data as JSON\nXML provides an excellent framework for encoding, saving, and transferring all kinds of data, and it was the dominant mode of transferring data across the internet for many years. However, XML has an Achilles’ Heel from the data transfer perspective: a lack of sparsity. If you look closely at the XML mtcars data set example above, you will note that the markup accounts for more of the total characters in the document than the data itself. In a world where data is regularly being exchanged in real time across networks, the use of XML can result in the necessity to exchange a lot more data to accomplish the same task. This adds both time and cost to every data transaction.\nJavaScript object notation (JSON) was developed as a standard to address this problem and provides a sparse framework for representing data that introduces minimal, non-data elements into the overall data structure. JSON uses a key/value pair structure to represent data elements:\n\"model\": \"RX4\"\nIndividual data elements are then grouped to reflect more complex data structures:\n{\"model\": {\"id\": \"2\", \"hp\": \"120\"}}\nThe example below shows the subsetted mtcars dataset represented as JSON. Note the use of the [ character to indicated repeated elements in the data:\n{\n    \"cars\": [{\n            \"make\": \"Mazda\",\n            \"model\": [{\n                    \"id\": \"RX4\",\n                    \"mpg\": \"21.0\",\n                    \"cyl\": \"6\",\n                    \"disp\": \"160.0\",\n                    \"hp\": \"110\"\n                },\n                {\n                    \"id\": \"RX4 Wag\",\n                    \"mpg\": \"21.0\",\n                    \"cyl\": \"6\",\n                    \"disp\": \"160.0\",\n                    \"hp\": \"110\"\n                }\n            ]\n        },\n        {\n            \"make\": \"Datsun\",\n            \"model\": {\n                \"id\": \"710\",\n                \"mpg\": \"22.8\",\n                \"cyl\": \"4\",\n                \"disp\": \"108.0\",\n                \"hp\": \"93\"\n            }\n        },\n        {\n            \"make\": \"Hornet\",\n            \"model\": [{\n                    \"id\": \"4 Drive\",\n                    \"mpg\": \"21.4\",\n                    \"cyl\": \"6\",\n                    \"disp\": \"258.0\",\n                    \"hp\": \"110\"\n                },\n                {\n                    \"id\": \"Sportabout\",\n                    \"mpg\": \"18.7\",\n                    \"cyl\": \"8\",\n                    \"disp\": \"360.0\",\n                    \"hp\": \"175\"\n                }\n            ]\n        },\n        {\n            \"make\": \"Valiant\",\n            \"model\": {\n                \"id\": \"valiant\",\n                \"mpg\": \"18.1\",\n                \"cyl\": \"6\",\n                \"disp\": \"225.0\",\n                \"hp\": \"105\"\n            }\n        },\n        {\n            \"make\": \"Duster\",\n            \"model\": {\n                \"id\": \"360\",\n                \"mpg\": \"14.3\",\n                \"cyl\": \"8\",\n                \"disp\": \"360.0\",\n                \"hp\": \"245\"\n            }\n        },\n        {\n            \"make\": \"Merc\",\n            \"model\": [{\n                    \"id\": \"240D\",\n                    \"mpg\": \"24.4\",\n                    \"cyl\": \"4\",\n                    \"disp\": \"146.7\",\n                    \"hp\": \"62\"\n                },\n                {\n                    \"id\": \"230\",\n                    \"mpg\": \"22.8\",\n                    \"cyl\": \"4\",\n                    \"disp\": \"140.8\",\n                    \"hp\": \"95\"\n                },\n                {\n                    \"id\": \"280\",\n                    \"mpg\": \"19.2\",\n                    \"cyl\": \"6\",\n                    \"disp\": \"167.6\",\n                    \"hp\": \"123\"\n                }\n            ]\n        }\n    ]\n}\n\n\n\n\n\n\nSee also\n\n\n\nFor information on the JSON format, see the Tutorials Point JSON Tutorial.\nYou can also use the JSONLint JSON Validator to check the syntax of any JSON representation.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "chapters/06_data-structures.html#relational-databases",
    "href": "chapters/06_data-structures.html#relational-databases",
    "title": "6  Data Structures",
    "section": "6.4 Relational Databases",
    "text": "6.4 Relational Databases\n*Relational databases, frequently referred to as relational database management systems** (RDBMS), provide another way of structuring data. Unlike tabular, XML, and JSON data representations, RDBMS data is not easily human readable, and specialized software is usually required to interact with data stored as relational data. Most programming environments (including R) provide specialized drivers for communicating with RDBMS in order to facilitate working with data stored in these systems.\nRDBMS have three primary purposes as a data storage format:\n\nTo reduce duplication of data;\nTo speed-up access and insertion of new data;\nTo insure data integrity.\n\nItems 2 and 3 above are accomplished at the software level, by deploying strict checks on data input, complex data indexing systems, and implementing redundant, automated, backup systems, to name just a few of the functionalities offered by RDBMS. Item 1 above, reducing duplication of data, is accomplished by using a specific, relational data structure that encourages the use of controlled lists of data mapped to individual observations. Looking at our mtcars subset data, for example, we see that while there are ten observations, there are only 6 makes of cars. To represent this in RDBMS, we first create a table, a named collection of data, that contains a unique list of car makes:\n\n\n\n\n\n\n\n\n\nid\nMake\n\n\n\n\n1\nMazda\n\n\n2\nDatsun\n\n\n3\nHornet\n\n\n4\nValiant\n\n\n5\nDuster\n\n\n6\nMerc\n\n\n\n\n\n\n\n\nFigure 6.1: MAKE_TABLE\n\n\n\nOnce we have a table of unique lists, we then create and populate a table of our cars, associating each car with its appropriate make from the MAKE_TABLE table:\n\n\n\n\n\n\n\n\n\nMake\nModel\nmpg\ncyl\ndisp\nhp\n\n\n\n\n1\nRX4\n21.0\n6\n160.0\n110\n\n\n1\nRX4 Wag\n21.0\n6\n160.0\n110\n\n\n2\n710\n22.8\n4\n108.0\n93\n\n\n3\n4 Drive\n21.4\n6\n258.0\n110\n\n\n3\nSportabout\n18.7\n8\n360.0\n175\n\n\n4\nValiant\n18.1\n6\n225.0\n105\n\n\n5\n360\n14.3\n8\n360.0\n245\n\n\n6\n240D\n24.4\n4\n146.7\n62\n\n\n6\n230\n22.8\n4\n140.8\n95\n\n\n6\n280\n19.2\n6\n167.6\n123\n\n\n\n\n\n\n\n\nFigure 6.2: CARS_TABLE\n\n\n\nIn the above table, we only normalized the car Make field. In a fully normalized RDBMS data structure, we would also create a control table for the Model field in anticipation of the fact that we could have more than one observation for a given model. Fully normalized RBDMS data structures use control tables for all fields that contain string data.\nThe image below shows a sample entry relationship diagram (ERD) for a more complex dataset relating to course offerings and enrollments. Each line connecting two tables marks a field in a “join” table that uses the id field in a control table (known as a foreign key) to associate information in the control table with the records in the join table.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "chapters/06_data-structures.html#non-hierarchical-relational-data",
    "href": "chapters/06_data-structures.html#non-hierarchical-relational-data",
    "title": "6  Data Structures",
    "section": "6.5 Non-Hierarchical Relational Data",
    "text": "6.5 Non-Hierarchical Relational Data\nIn the era of the social network, it is becoming increasingly necessary to represent relationships between entities that are not hierarchical. Unlike a family tree, the fact that you are connected to someone on Facebook or Instagram does not imply any type of hierarchical relationship. Such networks are typically represented using the graph data structure:\n\nGraphs consist of collections of vertices or nodes, the entities being graphed, and edges, the relationships between nodes.\n\nAnother important aspect of graph data is the concept of directionality. A directed graph indicates the direction of the relationship identified by the edge. We might, for example, wish to draw edges that indicate that one node was influenced by another node, in which case we could identify an “influence” edge and use directionality to indicate who influenced whom:\n\nGraph data can be stored and or transferred using any of the data formats discussed above or using specialized graph databases management software.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "chapters/06_data-structures.html#geospatial-data",
    "href": "chapters/06_data-structures.html#geospatial-data",
    "title": "6  Data Structures",
    "section": "6.6 Geospatial Data",
    "text": "6.6 Geospatial Data\nGeospatial data represents a final type of data with its own unique data structure. Geospatial data is unique because it always relates directly to the physical world, and because it relies on world-wide standards which have been in development and communally accepted for hundreds of years. Because of its uniqueness as a data type, geospatial data will be covered as a stand-alone topic later in the course.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Structures</span>"
    ]
  },
  {
    "objectID": "chapters/07_data-forensics.html",
    "href": "chapters/07_data-forensics.html",
    "title": "7  Data Forensics",
    "section": "",
    "text": "7.1 Structural Summaries & Cleaning\nWhenever you load a data set into R, your next step should be to investigate the data’s structure. This step is important because it can help you identify whether:\nSection @ref(inspecting-data) and Section @ref(inspecting-the-data) demonstrated several functions for getting structural summaries of data. Some of these are:\nLet’s look at some examples using a data set collected from the classified advertisements website Craigslist. The data set contains information from ads for rentals in the Sacramento area. First we need to load the data set:\ncl = read.csv(\"data/cl_rentals.csv\")\nNow we can use the str function to check the classes of the columns:\nstr(cl)\n\n'data.frame':   2987 obs. of  20 variables:\n $ title       : chr  \"$1,125 / 1br - 550ft2 - 1Bedroom Prime Location -2520 S Limited Access/Gated $1125 Avail Now (2520 S St)\" \"$1,449 / 1br - 680ft2 - 1x1 with washer & dryer in unit! Move in ready! (The Phoenix/Sacramento/Folsom/SF)\" \"$1,449 / 1br - 680ft2 - 1x1 with washer & dryer in unit! Move in ready! (The Phoenix/Sacramento/Folsom/SF)\" \"$1,479 / 1br - 680ft2 - 1x1 with washer & dryer in unit! Move in ready! (The Phoenix/Sacramento/Folsom/SF)\" ...\n $ text        : chr  \"QR Code Link to This Post\\n            \\n        \\n* SEE MY OTHER MIDTOWN 1 bedroom apts-text for web site\\n*An\"| __truncated__ \"QR Code Link to This Post\\n            \\n        \\n Lease our 1x1 Apartment with Che starting at $1449+    Pric\"| __truncated__ \"QR Code Link to This Post\\n            \\n        \\n Lease our 1x1 Apartment with Che starting at $1449+    Pric\"| __truncated__ \"QR Code Link to This Post\\n            \\n        \\n Lease our 1x1 Apartment with Che starting at $1479+    Pric\"| __truncated__ ...\n $ latitude    : num  38.6 38.6 38.6 38.6 38.6 ...\n $ longitude   : num  -121 -121 -121 -121 -121 ...\n $ city        : chr  \"2520 S St\" \"The Phoenix/Sacramento/Folsom/SF\" \"The Phoenix/Sacramento/Folsom/SF\" \"The Phoenix/Sacramento/Folsom/SF\" ...\n $ date_posted : chr  \"2021-02-04 15:03:12\" \"2021-03-02 12:41:17\" \"2021-03-02 13:26:17\" \"2021-03-03 10:02:05\" ...\n $ date_updated: chr  \"2021-03-03 08:41:39\" NA NA NA ...\n $ price       : int  1125 1449 1449 1479 1414 1441 1615 1660 1877 1611 ...\n $ deleted     : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ sqft        : int  550 680 680 680 680 680 816 816 916 916 ...\n $ bedrooms    : int  1 1 1 1 1 1 2 2 2 2 ...\n $ bathrooms   : num  1 1 1 1 1 1 1 1 2 2 ...\n $ pets        : chr  NA \"both\" \"both\" \"both\" ...\n $ laundry     : chr  \"shared\" \"in-unit\" \"in-unit\" \"in-unit\" ...\n $ parking     : chr  \"off-street\" \"covered\" \"covered\" \"covered\" ...\n $ craigslist  : chr  \"sacramento\" \"sacramento\" \"sacramento\" \"sacramento\" ...\n $ shp_place   : chr  \"Sacramento\" \"Sacramento\" \"Sacramento\" \"Sacramento\" ...\n $ shp_city    : chr  \"Sacramento\" \"Sacramento\" \"Sacramento\" \"Sacramento\" ...\n $ shp_state   : chr  \"CA\" \"CA\" \"CA\" \"CA\" ...\n $ shp_county  : chr  \"Sacramento\" \"Sacramento\" \"Sacramento\" \"Sacramento\" ...\nOften when you load a new data set, some of the columns won’t have the correct data type (or class) for what you want to do. For instance, in the Craigslist data, the pets, laundry, and parking columns all contain categorical data, so they should be factors.\nYou can convert these columns to factors with the factor function from Section @ref(factors):\ncl$pets = factor(cl$pets)\ncl$laundry = factor(cl$laundry)\ncl$parking = factor(cl$parking)\nThere’s another way we could’ve done this that uses only two lines of code, no matter how many columns there are:\ncols = c(\"pets\", \"laundry\", \"parking\")\ncl[cols] = lapply(cl[cols], factor)\nWe’ll learn more about the lapply function in Section @ref(apply-functions).\nYou can use whichever approach is more convenient and makes more sense to you. If there were other columns to convert, we’d go through the same steps with the appropriate conversion function.\nR provides as. functions to convert to the most common data types. For instance, as.character converts an object to a string:\nx = 3.1\nclass(x)\n\n[1] \"numeric\"\n\ny = as.character(x)\ny\n\n[1] \"3.1\"\n\nclass(y)\n\n[1] \"character\"\nThe read.csv function does a good job at identifying columns of numbers, so it’s rarely necessary to convert columns of numbers manually. However, you may have to do this for data you got some other way (rather than loading a file). For instance, it’s common to make these conversions when scraping data from the web.\nIt’s also a good idea to convert categorical columns into factors with the factor function, and to convert columns of dates into dates (more about this in the next section).",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Forensics</span>"
    ]
  },
  {
    "objectID": "chapters/07_data-forensics.html#structural-summaries-cleaning",
    "href": "chapters/07_data-forensics.html#structural-summaries-cleaning",
    "title": "7  Data Forensics",
    "section": "",
    "text": "The data was loaded correctly\nThere are structural problems with the data that will make it difficult to use if they aren’t fixed\n\n\n\nstr to get a detailed structural summary\nhead, tail to preview the data\nnrow, ncol, dim, length to get dimension information\nnames, colnames, rownames to get element names\nclass, typeof to get classes and types\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.1.1 Dates\nThere several built-in functions and also many packages for date processing. In particular, there are three Tidyverse packages for processing dates and times:\n\nlubridate, the primary package for working with dates and times\nhms, a package specifically for working with times\nclock, a new package for working with dates and times\n\nWe’ll focus on the lubridate package. As always, you’ll have to install the package if you haven’t already, and then load it:\n\n# install.packages(\"lubridate\")\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\nThe most common task is to convert a string into a date or time class. For instance, when you load a data set, you might have dates that look like this:\n\ndates = c(\"Jan 10, 2021\", \"Sep 3, 2018\", \"Feb 28, 1982\")\ndates\n\n[1] \"Jan 10, 2021\" \"Sep 3, 2018\"  \"Feb 28, 1982\"\n\n\nThese are strings, so it’s relatively difficult to sort the dates, do arithmetic on them, or extract just one part (such as the year). There are several lubridate functions to automatically convert strings into dates. They are named with one letter for each part of the date. For instance, the dates in the example have the month (m), then the day (d), and then the year (y), so we can use the mdy function:\n\nresult = mdy(dates)\nresult\n\n[1] \"2021-01-10\" \"2018-09-03\" \"1982-02-28\"\n\nclass(result)\n\n[1] \"Date\"\n\n\nNotice that the dates now have class Date, one of R’s built-in classes for representing dates, and that they print differently. You can find a full list of the automatic string to date conversion functions in the lubridate documentation.\nOccasionally, a date string may have a format that lubridate can’t convert automatically. In that case, you can use the fast_strptime function to describe the format in detail. At a minimum, the function requires two arguments: the vector of strings to convert and a format string.\nThe format string describes the format of the dates, and is based on the syntax of strptime, a function provided by many programming languages for converting strings to dates (including R). In a format string, a percent sign % followed by a character is called a specification and has a special meaning. Here are a few of the most useful ones:\n\n\n\nSpecification\nDescription\nJanuary 29, 2015\n\n\n\n\n%Y\n4-digit year\n2015\n\n\n%y\n2-digit year\n15\n\n\n%m\n2-digit month\n01\n\n\n%B\nfull month name\nJanuary\n\n\n%b\nshort month name\nJan\n\n\n%d\nday of month\n29\n\n\n%%\nliteral %\n%\n\n\n\nYou can find a complete list in ?fast_strptime. Other characters in the format string do not have any special meaning. Write the format string so that it matches the format of the dates you want to convert.\nFor example, let’s try converting an unusual time format:\n\nodd_time = \"6 minutes, 32 seconds after 10 o'clock\"\nfast_strptime(odd_time, \"%M minutes, %S seconds after %H o'clock\")\n\n[1] \"0-01-01 10:06:32 UTC\"\n\n\nR usually represents dates with the class Date, and date-times with the classes POSIXct and POSIXlt. The difference between the two date-time classes is somewhat technical, but you can read more about it in ?POSIXlt.\nThere is no built-in class to represent times alone, which is why the result in the example above includes a date. Nonetheless, the hms package provides the hms class to represent times without dates.\nOnce you’ve converted a string to a date, the lubridate package provides a variety of functions to get or set the parts individually. Here are a few examples:\n\nday(result)\n\n[1] 10  3 28\n\nmonth(result)\n\n[1] 1 9 2\n\n\nYou can find a complete list in the lubridate documentation.\nNow let’s convert the date_updated column in the Craigslist data. It’s always a good idea to test your format string before saving the results back into the data frame:\n\ndates = ymd_hms(cl$date_updated)\nhead(dates)\n\n[1] \"2021-03-03 08:41:39 UTC\" NA                       \n[3] NA                        NA                       \n[5] NA                        NA                       \n\n\nThe as.Date function returns NA if conversion failed, so in this case it looks like the dates were converted correctly. Now we can save the dates back into the data frame.\n\ncl$date_updated = dates\n\n\n\n7.1.2 Tidy Data\nMany functions require data frames that are in tidy form. Before we see the requirements for a data set to be tidy, we need to define or review some terminology from statistics.\nA feature (also called a covariate) is measurement of something, usually across multiple subjects. For example, we might decide to measure the heights of everyone in the class. Each person in the class is a subject, and the height measurement is a feature. Features don’t have to be quantitative. If we also asked each person their favorite color, then favorite color would be another feature in our data set. Features are usually, but not always, the columns in a tabular data set.\nAn observation is a set of features measured for a single subject or at a single time. So in the preceding example, the combined height and favorite color measurement for one student is one observation. Observations are usually, but not always, the rows in a tabular data set.\nNow we can define what it means to be tidy. A tabular data set is tidy if and only if:\n\nEach observation has its own row.\nEach feature has its own column.\nEach value has its own cell.\n\nThese rules ensure that all of the values are visually organized and are easy to access with R’s built-in indexing operations. For instance, the $ operator gets a column, and in a tidy data set, columns are features. The rules also reflect the way statisticians traditionally arrange tabular data sets.\nWhen you first look at a data set, think about what the observations are and what the features are. If the data set comes with documentation, it may help you figure this out. Since this data set is a tidy data set, we already know each row is an observation and each column is a feature.\nChapter @ref(reshaping-tabular-data) gives examples of tidy and untidy data, as well as explanations of how to make untidy data tidy.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Forensics</span>"
    ]
  },
  {
    "objectID": "chapters/07_data-forensics.html#statistical-forensics",
    "href": "chapters/07_data-forensics.html#statistical-forensics",
    "title": "7  Data Forensics",
    "section": "7.2 Statistical Forensics",
    "text": "7.2 Statistical Forensics\nAfter investigating the data’s structure, it’s a good idea to check some basic statistical properties. This step is important because it can help you identify limitations of and patterns in the data.\nWhich statistics are appropriate for a given feature often depends on the type of the feature. Recall from Section @ref(data-types-classes) that the types statisticians typically think about are:\n\nCategorical\n\nNominal - data separated into specific categories, with no order. For example, hair color (red, brown, blonde, …) is categorical.\nOrdinal - data separated into specific categories, with an order. For example, school level (elementary, middle, high, college) is ordinal.\n\nNumerical\n\nDiscrete - integers, or a finite set of decimal numbers with no values in between. Sometimes discrete values can also be treated as ordinal. For example, month as a number (1, 2, …, 12) is discrete.\nContinuous - decimal numbers. There are no specific categories, but there is an order. For example, height in inches is numerical.\n\n\nThe table function, which was introduced in Section @ref(inspecting-data), is great for summarizing categorical (and sometimes discrete) data. For example:\n\ntable(cl$pets)\n\n\nboth cats dogs none \n2511   46   31  385 \n\n\nWhat about numerical data?\nTwo important questions to ask about data are:\n\nWhere is it? This is the location of the data.\nHow spread out is it? This is the scale of the data.\n\nLet’s use the data\nx = c(-2, -1, -1, -1, 0, 2, 6)\nas an example.\nLocation is generally summarized with a number near the middle or center of the data. A few options are:\n\nMode - the value that appears most frequently. The mode can be calculated for any kind of data, but doesn’t work well for continuous data.\nFor our example, the mode of x is -1. You can compute the mode with table:\ntable(x)\nMedian - sort the data, then find the value in the middle. The median can be calculated for ordinal or numerical data.\nFor our example, the median is -1. Compute this with median:\nmedian(x)\nMean - the balancing point of the data, if a waiter was trying to balance the data on a tray. The mean can only be calculated for numerical data.\nFor our example the mean is 0.4285. Compute this with mean:\nmean(x)\n\nAdding large values to the data affects the mean more than the median:\ny = c(x, 100)\nmean(y)\nmedian(y)\nBecause of this, we say that the median is robust.\nThe mean is good for getting a general idea of where the center of the data is, while comparing it with the median reveals whether there are any unusually large or small values.\nScale is generally summarized by a number that says how far the data is from the center (mean, median, etc…). Two options are:\n\nStandard Deviation - square root of the average squared distance to the mean (the distance from a point to a mean is called a deviation). You can think of this as approximately the average distance from a data point to the mean. As a rule of thumb, most of the data will be within 3 standard deviations of the mean.\nYou can compute the standard deviation with sd:\nsd(x)\nInterquartile Range (IQR) - difference between the 75th and 25th percentile. The median is the 50th percentile of the data; it’s at the middle of the sorted data. We can also consider other percentiles. For instance, the 25th percentile is the value one-quarter of the way through the sorted data.\nQuantile is another word for percentile. Quartile specifically refers to the 25th, 50th, and 75th percentiles because they separate the data into four parts (hence “quart-”).\nYou can compute quantiles with quantile, or compute the IQR directly with IQR:\nquantile(x)\n\n# IQR\nIQR(x)\n\nThe IQR is more robust than the standard deviation.\nMany of the functions for computing statistical summaries have a parameter na.rm to ignore missing values. Setting na.rm = TRUE is often useful when you’re just trying to do an initial investigation of the data. However, in a more complete analysis, you should think carefully about what the missing values mean, whether they follow any patterns, and whether there are enough non-missing values for statistical summaries to be good representatives of the data.\nFinally, the summary function computes a detailed statistical summary of an R object. For data frames, the function computes a summary of each column, guessing an appropriate statistic based on the column’s data type.\n\n7.2.1 Missing Values\nIf your data contains missing values, it’s important to think about why the values are missing. Statisticians use two different terms to describe why data is missing:\n\nmissing at random (MAR)\nmissing not at random (MNAR) - causes bias!\n\nWhen values are missing at random, the cause for missingness is not related to any of the other features. This is rare in practice. For example, if people in a food survey accidentally overlook some questions.\nWhen values are missing not at random, the cause for missingness depends on other features. These features may or may not be in the data set. Think of this as a form of censorship. For example, if people in a food survey refuse to report how much sugar they ate on days where they ate junk food, data is missing not at random. Values MNAR can bias an analysis.\nThe default way to handle missing values in R is to ignore them. This is just a default, not necessarily the best or even an appropriate way to deal with them. You can remove missing values from a data set by indexing:\n\ncl_no_sqft_na = cl[!is.na(cl$sqft), ]\n\nhead(cl_no_sqft_na)\n\n                                                                                                       title\n1   $1,125 / 1br - 550ft2 - 1Bedroom Prime Location -2520 S Limited Access/Gated $1125 Avail Now (2520 S St)\n2 $1,449 / 1br - 680ft2 - 1x1 with washer & dryer in unit! Move in ready! (The Phoenix/Sacramento/Folsom/SF)\n3 $1,449 / 1br - 680ft2 - 1x1 with washer & dryer in unit! Move in ready! (The Phoenix/Sacramento/Folsom/SF)\n4 $1,479 / 1br - 680ft2 - 1x1 with washer & dryer in unit! Move in ready! (The Phoenix/Sacramento/Folsom/SF)\n5 $1,414 / 1br - 680ft2 - 1x1 with washer & dryer in unit! Move in ready! (The Phoenix/Sacramento/Folsom/SF)\n6 $1,441 / 1br - 680ft2 - 1x1 with washer & dryer in unit! Move in ready! (The Phoenix/Sacramento/Folsom/SF)\ntext\node Link to This Post\\n            \\n        \\n* SEE MY OTHER MIDTOWN 1 bedroom apts-text for web site\\n*An upstairs apt @ 2520 S is coming available 3/18/21\\n*I have 4 apts coming avail in midtown\\n*New flooring in lower apt and redone hardwood flooring in upper unit\\n*1 Bedroom  lower unit in 20 unit complex (2-10 unit buildings-courtyard in middle) with manager on site\\n*Gated front and back\\n*9 parking spots in back\\n*Laundry on site with new washers and dryers (coin op)\\n*Owner pays water/sewer/garbage\\n*Wall heat and window air\\n*New paint and new Pergo-type wood flooring \\n*Updated lighting\\n*Nicely maintained building and grounds\\n*$500 deposit\\n*Non-Smoking/vaping Complex\\n*Long time Mgr on Site\\n*No dogs\\n*Pictures of a like unit\\n*Text/call showing Wes  show contact info\\n to get copy of video\\n*You need to make 3X rent, have good rental history and credit score of 600 or greater to qualify-no dogs.\n2    QR Code Link to This Post\\n            \\n        \\n Lease our 1x1 Apartment with Che starting at $1449+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n3    QR Code Link to This Post\\n            \\n        \\n Lease our 1x1 Apartment with Che starting at $1449+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n4    QR Code Link to This Post\\n            \\n        \\n Lease our 1x1 Apartment with Che starting at $1479+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n5 QR Code Link to This Post\\n            \\n        \\n Lease our 1x1 Apartment with Juliet starting at $1414+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n6    QR Code Link to This Post\\n            \\n        \\n Lease our 1x1 Apartment with Che starting at $1441+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n  latitude longitude                             city         date_posted\n1  38.5728 -121.4675                        2520 S St 2021-02-04 15:03:12\n2  38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-02 12:41:17\n3  38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-02 13:26:17\n4  38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-03 10:02:05\n5  38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-04 08:47:21\n6  38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-04 10:20:09\n         date_updated price deleted sqft bedrooms bathrooms pets laundry\n1 2021-03-03 08:41:39  1125   FALSE  550        1         1 &lt;NA&gt;  shared\n2                &lt;NA&gt;  1449   FALSE  680        1         1 both in-unit\n3                &lt;NA&gt;  1449   FALSE  680        1         1 both in-unit\n4                &lt;NA&gt;  1479   FALSE  680        1         1 both in-unit\n5                &lt;NA&gt;  1414   FALSE  680        1         1 both in-unit\n6                &lt;NA&gt;  1441   FALSE  680        1         1 both in-unit\n     parking craigslist  shp_place   shp_city shp_state shp_county\n1 off-street sacramento Sacramento Sacramento        CA Sacramento\n2    covered sacramento Sacramento Sacramento        CA Sacramento\n3    covered sacramento Sacramento Sacramento        CA Sacramento\n4    covered sacramento Sacramento Sacramento        CA Sacramento\n5    covered sacramento Sacramento Sacramento        CA Sacramento\n6    covered sacramento Sacramento Sacramento        CA Sacramento\n\n\nThe na.omit function is less precise than indexing, because it removes rows that have a missing value in any column. This means lots of information gets lost.\nAnother way to handle missing values is to impute, or fill in, the values with estimates based on other data in the data set. We won’t get into the details of how to impute missing values here, since it is a fairly deep subject. Generally it is safe to impute MAR values, but not MNAR values.\n\n\n7.2.2 Outliers\nAn outlier is an anomalous or extreme value in a data set. We can picture this as a value that’s far away from most of the other values. Sometimes outliers are a natural part of the data set. In other situations, outliers can indicate errors in how the data were measured, recorded, or cleaned.\nThere’s no specific definition for “extreme” or “far away”. A good starting point for detecting outliers is to make a plot that shows how the values are distributed. Box plots and density plots work especially well for this (you’ll learn about how to make plots in a later lesson):\n\nlibrary(ggplot2)\n\nggplot(cl, aes(x = sqft)) + geom_boxplot()\n\nWarning: Removed 347 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nStatisticians tend to use the rule of thumb that any value more than 3 standard deviations away from the mean is an outlier. You can use the scale function to compute how many standard deviations the elements in a column are from their mean:\n\nz = scale(cl$sqft)\nhead(z)\n\n           [,1]\n[1,] -0.1910838\n[2,] -0.1161393\n[3,] -0.1161393\n[4,] -0.1161393\n[5,] -0.1161393\n[6,] -0.1161393\n\nwhich(z &lt;= -3 | 3 &lt;= z)\n\n[1] 1261 2461\n\n\nBe careful to think about what your specific data set measures, as this definition isn’t appropriate in every situation.\nHow can you handle outliers? First, try inspecting other features from the row to determine whether the outlier is a valid measurement or an error. When an outlier is valid, keep it.\nIf the outlier interferes with a plot you want to make, you can adjust the x and y limits on plots as needed to “ignore” the outlier. Make sure to mention this in the plot’s title or caption.\nWhen an outlier is not valid, first try to correct it. For example:\n\nCorrect with a different covariate from the same observation.\nEstimate with a mean or median of similar observations. This is another example of imputing values.\n\nFor example, in the Craigslist data, we can use the text column to try to correct outliers:\n\ncat(cl$text[1261])\n\nQR Code Link to This Post\n            \n        \nVillages of the Galleria\n701 Gibson Drive, Roseville, CA, 95678\nWant more information? Follow this link:\nhttp://rcmi.aptdetails.com/49u13n\nCall Now:  show contact info\n\nRoseville's Premier Luxury Condominium Rentals\nThis is a 1 Bedroom, 1 Bath, approximately 819 Sq. Ft. \nSignature Collection\nThis collection of fully renovated homes is limited to a select few. These unique homes are renting quickly. \nThe beautifully remodeled floor plan offers an entertainment style kitchen, gracious living area, formal dining room with access to your outdoor balcony, designer two tone paint with crown molding, spacious bathroom with relaxing oval bath tub, linen closet and large vanity. The bedroom offers a sliding glass door giving you additional access to the private balcony over looking the picturesque courtyard. \nBrand New Featured Interiors:\nEntertainment Style Kitchen\n•   Beautiful warm espresso custom built cabinets with brush nickel hardware\n•   Opulent Granite Countertops with backsplash\n•   Satin finish under mount sink with disposal and upgraded Moen faucet and fixtures\n•   Stainless steel appliances, spacious built in microwave, multi-cycle dishwasher and self-cleaning oven\n•   Plant/décor cabinet ledge \n•   Spacious pantry and personalized custom shelving in all cabinets\n•   Attractive bright recessed lighting\n•   Private in home personal laundry room with full size washer & dryer\nLiving and Dining\n•   Hand laid tile resembling hard wood flooring \n•   Designer two-tone paint with white accent crown molding and baseboards\n•   Upgraded wooden style blinds\n•   Dual pane windows featuring custom framed molding\n•   Spacious coat closet\nBath\n•   Oval Roman soaking tub with surround Opulent granite walls \n•   Warm espresso custom built cabinets with brush nickel hardware\n•   Spacious linen closet and personal cabinet storage\n•   Hand selected Opulent Granite countertops\n•   Unique hand crafted above counter sink\n•   Contemporary waterfall faucet\n•   Custom wood-look framed mirror\n•   White glass contemporary light fixture with brush nickel base\n•   Upgraded brush nickel accents (towel bars and holders)\n•   Hand laid tile resembling hard wood flooring \nBedroom and Closet\n•   Rich plush carpeting\n•   Spacious walk in closets with personalized built in custom organizers and compartments\nOther Features and Amenities \n•   Brilliant bright recessed lighting\n•   Central heat and air\n•   Private balcony or terrace\n•   Pre-wired for high-speed internet, multi-line phone and cable\n•   Brushed nickel hardware accents (door knobs, latches, deadbolts, locks, door knocker and light fixtures)\n•   Covered parking\n•   Additional patio storage\nSelect Homes Offer\n•   Private detached garage\n•   Additional linen or storage space\n•   Cozy Gas Fireplace with carved stone-look mantel and molding\nStyle, sophistication, beautiful landscaping and stunning architecture accent the Villages of the \nGalleria apartment homes, located in dynamic Roseville, California. Villages of the Galleria is just minutes from the Galleria Mall and Fountains at Roseville and offers easy freeway access to downtown, Sacramento International Airport, Arco Arena and major employers such as NEC, Oracle and HP. Select from a variety of one, two or three bedroom floor plans. All apartment homes offer gracious living areas with designer two-tone paint, crown molding, large walk-in closets and in home full size washer and dryer. Enjoy the many fine conveniences offered, such as an expansive fitness center, executive business center and refreshing pool. Villages of the Galleria is the perfect place to call home. \nFeatures\n- Contemporary Recessed Lighting \n- Built-In Linen Closet in Bathroom * \n- Entertainment Style Kitchens \n- Private Balconies and Patios \n- Crown Molding Accents \n- Six-Panel Interior Doors \n- Custom Maple-Front Cabinetry \n- Nine-Foot Ceilings \n- Microwave \n- Pre-Wired for High Speed Internet \n- Private Garages * \n- Full Size Washer/Dryer \n- Pantry * \n- Oval Roman Soaking Tub * \n- Cozy Gas Fireplace with Mantel * \n- Covered Parking * \n- Spacious Walk-In Closet(s) * \n- Energy-Saving Multi-Cycle Dishwasher \nCommunity Amenities\n- Community Garden \n- Executive Business Center \n- Sand Volleyball \n- Close to Shopping \n- Beautiful Landscaped Court Yards \n- Playground \n- Fitness Center \n- Clubhouse \n- Open Air Cabanas \n- Easy Access to Freeways \n- Pool and Spa \n- Gated Community \n- Professional Onsite Management w/ 24-Hour Emergency Maintenance \n- Picnic Area with Barbecue \nOffice Hours\nMonday - Friday 9:00 AM - 6:00 PM\nSaturday 10:00 AM - 5:00 PM\nSunday 12:00 PM - 5:00 PM \nPet Policy\nMaximum of 2 pets cats or dogs. No weight limit. Additional $25 rent per month and additional $500 deposit per pet. Inquire about our breed restrictions. \nEqual Housing Opportunity \nVJWLzl1wXG\n\n\nBased on the text, this apartment is 819 square feet, not 8190 square feet. So we can reassign the value:\n\ncl$sqft[1261] = 819\n\nIf other features don’t help with correction, try getting information from external sources. If you can’t correct the outlier but know it’s invalid, replace it with a missing value NA.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Forensics</span>"
    ]
  },
  {
    "objectID": "chapters/07_data-forensics.html#apply-functions",
    "href": "chapters/07_data-forensics.html#apply-functions",
    "title": "7  Data Forensics",
    "section": "7.3 Apply Functions",
    "text": "7.3 Apply Functions\nSection @ref(vectorization) introduced vectorization, a convenient and efficient way to compute multiple results. That section also mentioned that some of R’s functions—the ones that summarize or aggregate data—are not vectorized.\nThe class function is an example of a function that’s not vectorized. If we call the class function on the Craigslist data set, we get just one result for the data set as a whole:\n\nclass(cl)\n\n[1] \"data.frame\"\n\n\nWhat if we want to get the class of each column? We can get the class for a single column by selecting the column with $, the dollar sign operator:\n\nclass(cl$pets)\n\n[1] \"factor\"\n\n\nBut what if we want the classes for all the columns? We could write a call to class for each column, but that would be tedious. When you’re working with a programming language, you should try to avoid tedium; there’s usually a better, more automated way.\nSection @ref(lists) pointed out that data frames are technically lists, where each column is one element. With that in mind, what we need here is a line of code that calls class on each element of the data frame. The idea is similar to vectorization, but since we have a list and a non-vectorized function, we have to do a bit more than just call class(cl).\nThe lapply function calls, or applies, a function on each element of a list or vector. The syntax is:\nlapply(X, FUN, ...)\nThe function FUN is called once for each element of X, with the element as the first argument. The ... is for additional arguments to FUN, which are held constant across all the elements.\nLet’s try this out with the Craigslist data and the class function:\n\nlapply(cl, class)\n\n$title\n[1] \"character\"\n\n$text\n[1] \"character\"\n\n$latitude\n[1] \"numeric\"\n\n$longitude\n[1] \"numeric\"\n\n$city\n[1] \"character\"\n\n$date_posted\n[1] \"character\"\n\n$date_updated\n[1] \"POSIXct\" \"POSIXt\" \n\n$price\n[1] \"integer\"\n\n$deleted\n[1] \"logical\"\n\n$sqft\n[1] \"numeric\"\n\n$bedrooms\n[1] \"integer\"\n\n$bathrooms\n[1] \"numeric\"\n\n$pets\n[1] \"factor\"\n\n$laundry\n[1] \"factor\"\n\n$parking\n[1] \"factor\"\n\n$craigslist\n[1] \"character\"\n\n$shp_place\n[1] \"character\"\n\n$shp_city\n[1] \"character\"\n\n$shp_state\n[1] \"character\"\n\n$shp_county\n[1] \"character\"\n\n\nThe result is similar to if the class function was vectorized. In fact, if we use a vector and a vectorized function with lapply, the result is nearly identical to the result from vectorization:\n\nx = c(1, 2, pi)\n\nsqrt(x)\n\n[1] 1.000000 1.414214 1.772454\n\nlapply(x, sqrt)\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 1.414214\n\n[[3]]\n[1] 1.772454\n\n\nThe only difference is that the result from lapply is a list. In fact, the lapply function always returns a list with one element for each element of the input data. The “l” in lapply stands for “list”.\nThe lapply function is one member of a family of functions called apply functions. All of the apply functions provide ways to apply a function repeatedly to different parts of a data structure. We’ll meet a few more apply functions soon.\nWhen you have a choice between using vectorization or an apply function, you should always choose vectorization. Vectorization is clearer—compare the two lines of code above—and it’s also significantly more efficient. In fact, vectorization is the most efficient way to call a function repeatedly in R.\nAs we saw with the class function, there are some situations where vectorization is not possible. That’s when you should think about using an apply function.\n\n7.3.1 The sapply Function\nThe related sapply function calls a function on each element of a list or vector, and simplifies the result. That last part is the crucial difference compared to lapply. When results from the calls all have the same type and length, sapply returns a vector or matrix instead of a list. When the results have different types or lengths, the result is the same as for lapply. The “s” in sapply stands for “simplify”.\nFor instance, if we use sapply to find the classes of the columns in the Craigslist data, we get a character vector:\n\nsapply(cl, class)\n\n$title\n[1] \"character\"\n\n$text\n[1] \"character\"\n\n$latitude\n[1] \"numeric\"\n\n$longitude\n[1] \"numeric\"\n\n$city\n[1] \"character\"\n\n$date_posted\n[1] \"character\"\n\n$date_updated\n[1] \"POSIXct\" \"POSIXt\" \n\n$price\n[1] \"integer\"\n\n$deleted\n[1] \"logical\"\n\n$sqft\n[1] \"numeric\"\n\n$bedrooms\n[1] \"integer\"\n\n$bathrooms\n[1] \"numeric\"\n\n$pets\n[1] \"factor\"\n\n$laundry\n[1] \"factor\"\n\n$parking\n[1] \"factor\"\n\n$craigslist\n[1] \"character\"\n\n$shp_place\n[1] \"character\"\n\n$shp_city\n[1] \"character\"\n\n$shp_state\n[1] \"character\"\n\n$shp_county\n[1] \"character\"\n\n\nLikewise, if we use sapply to compute the sqrt values, we get a numeric vector, the same as from vectorization:\n\nsapply(x, sqrt)\n\n[1] 1.000000 1.414214 1.772454\n\n\nIn spite of that, vectorization is still more efficient than sapply, so use vectorization instead when possible.\nApply functions are incredibly useful for summarizing data. For example, suppose we want to compute the medians for all of the columns in the Craigslist data set that are numeric.\nFirst, we need to identify the columns. One way to do this is with the is.numeric function. Despite the name, this function actually tests whether its argument is a real number, not whether it its argument is a numeric vector. In other words, it also returns true for integer values. We can use sapply to apply this function to all of the columns in the Craigslist data set:\n\nis_number = sapply(cl, is.numeric)\nis_number\n\n       title         text     latitude    longitude         city  date_posted \n       FALSE        FALSE         TRUE         TRUE        FALSE        FALSE \ndate_updated        price      deleted         sqft     bedrooms    bathrooms \n       FALSE         TRUE        FALSE         TRUE         TRUE         TRUE \n        pets      laundry      parking   craigslist    shp_place     shp_city \n       FALSE        FALSE        FALSE        FALSE        FALSE        FALSE \n   shp_state   shp_county \n       FALSE        FALSE \n\n\nIn general, it’s a good habit to use R to do things rather than do them manually. You’ll get more practice programming, and your code will be more flexible if you want to adapt it to other data sets.\nNow that we know which columns are numeric, we can use the median function to compute medians. We only want to compute medians for those columns, so we need to subset the data:\n\nsapply(cl[, is_number], median, na.rm = TRUE)\n\n latitude longitude     price      sqft  bedrooms bathrooms \n  38.5878 -121.4410 1730.0000  801.0000    2.0000    1.0000 \n\n\n\n\n7.3.2 The Split-Apply Pattern\nIn a data set with categorical features, it’s often useful to compute something for each category. The lapply and sapply functions can compute something for each element of a data structure, but categories are not necessarily elements.\nFor example, the Craigslist data set has four different categories in the laundry column. If we want all of the rows in one category, one way to get them is by indexing:\n\nshared = cl[cl$laundry == \"shared\", ]\nhead(shared)\n\n                                                                                                            title\n1        $1,125 / 1br - 550ft2 - 1Bedroom Prime Location -2520 S Limited Access/Gated $1125 Avail Now (2520 S St)\n7  $1,615 / 2br - 816ft2 - 2x1 with w/d in unit..  available NOW! APPLY TODAY! (The Phoenix/Sacramento/Folsom/SF)\n8  $1,660 / 2br - 816ft2 - 2x1 with w/d in unit..  available NOW! APPLY TODAY! (The Phoenix/Sacramento/Folsom/SF)\n9  $1,877 / 2br - 916ft2 - 2x2 with w/d in unit..  available NOW! APPLY TODAY! (The Phoenix/Sacramento/Folsom/SF)\n10 $1,611 / 2br - 916ft2 - 2x2 with w/d in unit..  available NOW! APPLY TODAY! (The Phoenix/Sacramento/Folsom/SF)\n11 $1,736 / 2br - 916ft2 - 2x2 with w/d in unit..  available NOW! APPLY TODAY! (The Phoenix/Sacramento/Folsom/SF)\ntext\node Link to This Post\\n            \\n        \\n* SEE MY OTHER MIDTOWN 1 bedroom apts-text for web site\\n*An upstairs apt @ 2520 S is coming available 3/18/21\\n*I have 4 apts coming avail in midtown\\n*New flooring in lower apt and redone hardwood flooring in upper unit\\n*1 Bedroom  lower unit in 20 unit complex (2-10 unit buildings-courtyard in middle) with manager on site\\n*Gated front and back\\n*9 parking spots in back\\n*Laundry on site with new washers and dryers (coin op)\\n*Owner pays water/sewer/garbage\\n*Wall heat and window air\\n*New paint and new Pergo-type wood flooring \\n*Updated lighting\\n*Nicely maintained building and grounds\\n*$500 deposit\\n*Non-Smoking/vaping Complex\\n*Long time Mgr on Site\\n*No dogs\\n*Pictures of a like unit\\n*Text/call showing Wes  show contact info\\n to get copy of video\\n*You need to make 3X rent, have good rental history and credit score of 600 or greater to qualify-no dogs.\n7  QR Code Link to This Post\\n            \\n        \\n Lease our 2x1 Apartment with Juliet starting at $1615+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n8  QR Code Link to This Post\\n            \\n        \\n Lease our 2x1 Apartment with Juliet starting at $1660+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n9  QR Code Link to This Post\\n            \\n        \\n Lease our 2x2 Apartment with Juliet starting at $1877+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n10    QR Code Link to This Post\\n            \\n        \\n Lease our 2x2 Apartment with Che starting at $1611+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n11    QR Code Link to This Post\\n            \\n        \\n Lease our 2x2 Apartment with Che starting at $1736+    Prices Subject to change daily!  \\n Apartment Features:  \\nPrivate Balconies & Patios \\nLuxury Vinyl Wood Flooring \\nDesigner Interior Paint \\nUpgraded cabinets and countertops \\nModern white doors and trim \\nModern white base boards  \\nEnergy efficient appliances \\nSpacious bathroom \\nTONS of closet and storage space \\nSac State Shuttle-including Sac State Shuttle App! PET FRIENDLY - MEOW! WOOF!   \\n\\nUpgraded Fitness Centers \\nTanning Booth \\nHydro Massage Table \\nResident Business Center \\nResort-Style Pool Furniture \\nSparkling Waterfall Wall \\nFire pit locations \\nBeach Area for lounging \\nOutdoor Recreation Area \\nSand Volleyball Court \\nGrilling Locations   Call today to schedule your tour ... show contact info\\n -or- \\nStop in to visit Mon - Sat 10:00a - 5:00p for more info! :D  \\n\\n\\nCommunity Amenities:  \\nComplete fitness center \\nFour sparkling pools  \\nLighted tennis courts  \\nFull basketball court  \\nWhirlpool Jacuzzi  \\n24 hour Emergency Maintenance  Hornet Shuttle Access to Sacramento State University  \\n Easy Access to Public Transportation (lightrail and bus) \\n Easy Access to the American River Trail   And so much more!  \\n\\n Check us out online @ www.thephoenixsacramento.com TODAY!  \\n  Connect with us:   \\nFacebook = The Phoenix Apartment Living \\nTwitter = @thephoenixlife     Prices and availability are subject to change. Offered prices are starting prices for base rent only. Other charges, conditions, fees, and terms may apply. Equal housing opportunity provider\n   latitude longitude                             city         date_posted\n1   38.5728 -121.4675                        2520 S St 2021-02-04 15:03:12\n7   38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-02 08:36:51\n8   38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-04 08:57:47\n9   38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-02 08:36:17\n10  38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-02 13:16:29\n11  38.5511 -121.4068 The Phoenix/Sacramento/Folsom/SF 2021-03-03 10:02:38\n          date_updated price deleted sqft bedrooms bathrooms pets laundry\n1  2021-03-03 08:41:39  1125   FALSE  550        1         1 &lt;NA&gt;  shared\n7                 &lt;NA&gt;  1615   FALSE  816        2         1 both  shared\n8                 &lt;NA&gt;  1660   FALSE  816        2         1 both  shared\n9                 &lt;NA&gt;  1877   FALSE  916        2         2 both  shared\n10                &lt;NA&gt;  1611   FALSE  916        2         2 both  shared\n11                &lt;NA&gt;  1736   FALSE  916        2         2 both  shared\n      parking craigslist  shp_place   shp_city shp_state shp_county\n1  off-street sacramento Sacramento Sacramento        CA Sacramento\n7     covered sacramento Sacramento Sacramento        CA Sacramento\n8     covered sacramento Sacramento Sacramento        CA Sacramento\n9     covered sacramento Sacramento Sacramento        CA Sacramento\n10    covered sacramento Sacramento Sacramento        CA Sacramento\n11    covered sacramento Sacramento Sacramento        CA Sacramento\n\n\nTo get all four categories, we’d have to do this four times. If we want to compute something for each category, say the mean of the price column, we also have to repeat that computation four times. Here’s what it would look like for just the shared category:\n\nmean(shared$price, na.rm = TRUE)\n\n[1] 1522.869\n\n\nIf the categories were elements, we could avoid writing code to index each category, and just use the sapply (or lapply) function to apply the mean function to each.\nThe split function splits a vector or data frame into groups based on a vector of categories. The first argument to split is the data, and the second argument is a congruent vector of categories.\nWe can use split to elegantly compute means of price broken down by laundry. First, we split the data by category. Since we only want to compute on the price column, we only split that column:\n\nby_laundry = split(cl$price, cl$laundry)\nclass(by_laundry)\n\n[1] \"list\"\n\nnames(by_laundry)\n\n[1] \"hookup\"  \"in-unit\" \"none\"    \"shared\" \n\n\nThe result from split is a list with one element for each category. The individual elements contain pieces of the original price column:\n\nhead(by_laundry$hookup)\n\n[1] 1250 3300 3328 3300 3280 3328\n\n\nSince the categories are elements in the split data, now we can use sapply the same way we did in previous examples:\n\nsapply(by_laundry, mean, na.rm = TRUE)\n\n   hookup   in-unit      none    shared \n2059.6111 1880.8592  982.2381 1522.8691 \n\n\nThis two-step process is a data science idiom called the split-apply pattern. First you use split to convert categories into list elements, then you use an apply function to compute something on each category. Any time you want to compute results by category, you should think of this pattern.\nThe split-apply pattern is so useful that R provides the tapply function as a shortcut. The tapply function is equivalent to calling split and then sapply. Like split, the first argument is the data and the second argument is a congruent vector of categories. The third argument is a function to apply, like the function argument in sapply.\nWe can use tapply to compute the price means by laundry type for the Craigslist data:\n\ntapply(cl$price, cl$laundry, mean, na.rm = TRUE)\n\n   hookup   in-unit      none    shared \n2059.6111 1880.8592  982.2381 1522.8691 \n\n\nNotice that the result is identical to the one we computed before.\nThe “t” in tapply stands for “table”, because the tapply function is a generalization of the table function. If you use length as the third argument to tapply, you get the same results as you would from using the table function on the category vector.\nThe aggregate function is closely related to tapply. It computes the same results, but organizes them into a data frame with one row for each category. In some cases, this format is more convenient. The arguments are the same, except that the second argument must be a list or data frame rather than a vector.\nAs an example, here’s the result of using aggregate to compute the price means:\n\naggregate(cl$price, list(cl$laundry), mean, na.rm = TRUE)\n\n  Group.1         x\n1  hookup 2059.6111\n2 in-unit 1880.8592\n3    none  982.2381\n4  shared 1522.8691\n\n\nThe lapply, sapply, and tapply functions are the three most important functions in the family of apply functions, but there are many more. You can learn more about all of R’s apply functions by reading this Stack Overflow post.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Forensics</span>"
    ]
  },
  {
    "objectID": "chapters/08_data-visualization.html",
    "href": "chapters/08_data-visualization.html",
    "title": "8  Data Visualization",
    "section": "",
    "text": "8.1 Principles & Perception\nData visualization is the graphical display of abstract information to help us make sense of phenomena and to communicate these findings. It is a powerful tool to help us uncover and share the stories of our data. Visualizations help us retain and analyze all the information in our data, uncover and share our insights, and describe our research in a useful way. If a picture is worth a thousand words, then a good data visualization is worth millions.\nBut how many of us have ever taken a course explicitly on data visualization? It’s typically not taught in standard data analysis courses, yet it is a mainstay for nearly every sector in today’s data-driven world. Today we’ll dive into the what, how, and why of data visualization and describe some best practices that you can immediately implement into your research workflows. Along the way we’ll also focus on building up our collective data literacy skills, and employ critical approaches to produce science that is more robust, transparent, and equitable.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/08_data-visualization.html#principles-perception",
    "href": "chapters/08_data-visualization.html#principles-perception",
    "title": "8  Data Visualization",
    "section": "",
    "text": "8.1.1 A Brief History of Data Visualization\n\n\n\n\n\n\nFigure 8.1: (source)\n\n\n\nData visualization is not a modern invention. Quantitative information display has been traced back to prehistory with the locations of stars mapped on the Lasaux cave drawings. Clay tokens, quipu, and stick charts dating back as far as 5500 BC also illustrate our long history of creating shared representations of data. The oldest known data visualization dates to 1160 BC with the Turin Papyrus Map, which accurately illustrates the distribution of geological resources in a region in Egypt. These earliest forms of data visualization served purposes of navigating culture and living within society—from accounting to agriculture, transportation, religion, and medicine. They were used to help us explore and understand natural phenomena and the workings of the universe.\nThe French philosopher Rene Descartes is attributed as developing the precursor to today’s modern plot in the 17th century—a two-dimensional coordinate system for displaying values. Later in the 18th century William Playfair began creating left to right oriented plots, allowing the viewer to explore how values change over time. He’s also attributed to inventing the bar graph and, unfortunately, the pie chart (we’ll get to why that’s unfortunate, later). Into the 19th and 20th centuries we see an explosion of chart types\nUnsurprisingly, the invention of tools like paper and computers shaped our relationship with knowledge and information, playing a strong role in how we collect, analyze, store and visualize data. As we gather more and more complex data, we seek more ways to visualize its meaning and in the 19th and 20th centuries we see an explosion of chart types and techniques for communicating with statistical graphics.\n\n\n\n\n\n\nSee also\n\n\n\nFor a more complete history of data visualization, check out A Brief History of Data Visualization by M. Friendly.\n\n\nIn particular, check out the following famous data visualizations.\n\n8.1.1.1 Famous Data Visualizations\nFlorence Nightingale, the “mother of nursing,” produced in 1857 a rose diagram depicting seasonal sources of British soldier’s fatalities in the Crimean War. Out of the 18,000 soldiers who had died, 16,000 had died of disease in a hospital (blue shading) rather than from their wounds (black shading). This image is credited with helping to persuade the British government to improve conditions in military hospitals.\n\n\n\n\n\n\nFigure 8.2: The context surrounding this rose diagram is actually quite bit more complex. For additional background, check out this podcast based on the book The Data Detective by Tim Harford.\n\n\n\nJohn Snow, a London physician, traced the source of an 1854 cholera outbreak in Soho. By examining the locations of reported cholera deaths, Snow demonstrated that the disease was connected to a contaminated well on Broad Street, contributing to growing understanding that cholera was a waterborne disease and not caused by foul ‘miasmas’ in the air. He later used a map in his publication to show the concentration of the cholera cases around the contaminated pump. On this map, the height of the dark bars correspond to the number of deaths at a given location. While Snow didn’t invent the mapping technique of layering thematic data on top of topographic maps, nor actually compose the map himself (it was created by cartographer Charles Cheffins), this map was so effective that history often calls Snow the “father of epidemiology.” Learn more about the history of the map in this recent post by Kenneth Field.\n\n\n\n\n\n\nFigure 8.3\n\n\n\nLastly, no discussion of the history of data visualization is complete without a nod to Charles Minard’s acclaimed depiction of Napoleon Bonaparte’s ill-fated invasion of Russia. Edward Tufte declared in his popular 1983 book The Visual Display of Quantitative Information that Napoleon’s March “may well be the best statistical graphic ever produced.” The thick band denotes the size of the army at each position, beginning at the Polish-Russian border. The dark lower band is tied to temperature and time scales, and shows the path of Napoleon’s retreat from Moscow and shrinking army size during the bitterly cold winter.\n\n\n\n\n\n\nFigure 8.4\n\n\n\nThis image has also been recreated with modern plotting software, including the ggplot2 package in R, which you will learn about in the next lesson.\n\n\n\n\n\n\nFigure 8.5: (source: ggplot2: Grammar of Graphics in R by Hadley Wickam)\n\n\n\n\n\n\n8.1.2 What is Data Visualization?\nAt their core, data visualizations are products that:\n\nRepresent data.\nHave a specific purpose.\nTell a data-driven story.\n\nThere are two main types of data visualizations:\n\nInformation visualizations (aka infographics or infoviz) tend to be visually striking, dramatizing a problem with unique and visually appealing imagery that draws the casual viewer in.\nStatistical graphics aim to make comparisons, to reveal patterns and discrepancies. We use statistical graphs to communicate our research results, often for viewers who are already immersed or interested in the problem.\n\nWhile many topics within this reader will apply to infoviz as well, our emphasis is on creating judicious and accurate statistical graphics.\n\n\n\n\n\n\nSee also\n\n\n\nFor more info comparing infoviz and statistical graphs, see Gelman and Unwin 2013.\n\n\n\n8.1.2.1 Why Viz?\nThere are lots of ways to represent our data. In fact, tables are often the most common way to report data, and they are great at conveying exact values. But interpretation of data displayed in a table is largely up to the viewer. It’s hard to perceive the overall summary of the data from a table, unless it’s really simple and, in that case, you often don’t even need a table and can just report those statistics as text.\nData visualization, on the other hand, takes advantage of our ability to process information by shifting the balance between our natural perceptive and cognitive abilities to convey a specific message. Most of the information that’s sent to our brains is visual. In fact, it’s been found that the human brain processes visual imagery 60,000 times faster than text! Data visualizations allow us to move from a predominantly thinking perspective to a seeing perspective. The cerebral cortex, which primarily handles our cognition, is slow and less efficient than the visual cortex, which processes images. Thus, visual diagrams are often easier for us to process than pages of words describing our research. Absorbing information quickly allows us to make novel inferences, and make more productive and informed decisions. Not surprisingly, well composed data visualizations are the most effective type of scientific communication.\n\n\n\n\n\n\nSee also\n\n\n\nFor guidance on how to convert a table into a plot, see this paper by Andrew Gelman.\n\n\nUltimately, the utility of a data visualization depends on how well it’s composed.\n\n\n8.1.2.2 Good Data Visualizations\n\nProvide rapid access to data.\nFaithfully represent the data and tell a story.\nAre expressive.\nAre effective.\n\nHelpful data visualizations intuitively, clearly, accurately, and efficiently explain complex ideas. The patterns and relationships presented must be valid, and the visual relevant to the data it presents. A data visualization cannot exist without a narrative, and good data visualizations always include context. Good plots grab our attention and create a positive visual impact. This aids our ability to make connections and recall the features of the data. They can be aesthetically pleasing but that’s not the end goal. Good plots are accessible (not everyone perceives the visual world the same way). They leverage aspects of human perception to allow for intuitive inference of relationships between abstract concepts (our data).\n\n\n\n\n\n\nSee also\n\n\n\nWant to feel inspired? Check out Information is Beautiful and Flowing Data.\n\n\n\n\n\n\n\n\nFigure 8.6: (source)\n\n\n\n\n\n8.1.2.3 Bad Data Visualizations\n\nHave too much, or too little, information.\nAre inconsistent.\nIgnore limits of human perception.\nMisrepresent the data.\nUse inappropriate (or garbage) data.\n\nHave you ever seen a pie chart where the labeled slices add up to something other than 100%? That’s a poorly executed data visualization. Goal: don’t end up on WTF Viz.\n\n\n\n\n\n\nFigure 8.7: (source)\n\n\n\n\n\n\n8.1.3 Before You Viz, Make a Plan\nModern software makes it easy to quickly create a plot. But before you fire up your computer and start plotting, stop and think. Write out your visualization plan. This will save you time in the long run, and result in a more robust data visualization.\nAsk yourself:\n\nWhy am I making this visualization? (purpose)\nWho am I making it for? (audience)\nHow will I use and share it? (medium)\nWhat can I use to make it? (tools)\nWhat story does it tell? (message)\nWho does it affect? Who is left out? (critical approach)\n\n\n\n\n\n\n\nTip\n\n\n\nHow many plots you need is always the wrong question. You need exactly as many as you need to tell your story.\n\n\n\n8.1.3.1 Purpose\nFirst, identify why you are making a visualization. We use data visualizations in different ways across the iterative steps of the research data pipeline:\n\n\n\n\n\n\nFigure 8.8\n\n\n\n\nCollection: plots can help us understand who, what, and where the data represent. It can help us track our progress, and help us project required effort to complete this phase of the project.\nCleaning: plotting is a quick and effective way to spot errors in our data. It allows us to grasp the extent of issues such as outliers and missing data.\nExploration: plots are a powerful tool for exploratory data analysis (EDA). Plots help us identify patterns, summarize variables and relationships. (see Tukey 1960)\nConfirmation: plots also help us conduct confirmatory data analysis (CDA). We can plot diagnostics like the model fit, residuals, and model comparisons that confirm whether a model is correct. CDA is an iterative process over the course of research, one reason why we advocate using scripting languages and other reproducible workflows for generating graphics.\nValidation: plots also help us to debug and validate our code. We can visually inspect the results at each step of the code we are writing and verify whether it satisfies our expectations.\nCommunication: sharing the insights from our data with others is probably the most commonly understood and emphasized purpose of data visualizations. This is also often the hardest type of data visualization to “get right,” because we don’t always remember to design the visual to speak specifically to who we are sharing it with.\n\n\n\n8.1.3.2 Audience\nWho are you making the data visualization for? There is no such thing as a “generic” data visualization. Are you making the figure for:\n\nYourself, to help you clean or explore your data?\nYour immediate colleagues or research team to update them on your research progress?\nExperts in your field reading your publication or listening to your presentation?\nA general audience as part of your public outreach?\nPolicy makers who might not know all the details but might be making big decisions based on your results?\n\nKnowing who you’re making the visualization for will help you think through the following steps to create something of value for your intended purpose. It will also help you determine how effort is needed to compose a plot to achieve your goal.\n\n\n8.1.3.3 Medium\nThere are always constraints when creating a data visualization. It’s best to discover these before you start, rather than after you’ve created a beautiful data visualization that’s completely inappropriate for your intended use.\nIf you’re creating the visual to accompany a journal article, you probably need to use a static figure and not an interactive or dynamic dashboard. Does your journal allow for color figures? When in doubt, start with greyscale—it’s a lot easier to add color, rather than take it away, as you revise your figures.\nIf you’re showing the figure during a presentation, you probably want to simplify it—you audience will have 5 seconds max to read, understand, and interpret your visualization. A really complex figure that requires minutes to comprehend will just distract your audience away from what you—and your data—are saying. It might be more effective to compose and display the same plot in different ways to best communicate your points.\nFor a poster presentation where your audience is expected to spend significant time pondering over your findings, you might want to have one very large, clear figure that disentangles the complexity of your project.\nIf you’re creating a visual for a website, you might be able to go nuts—bring on the interactivity, the dynamic data display—until you crash the server because it requires too much compute time.\n\n\n\n\n\n\nChecklist\n\n\n\n\nStatic or dynamic/interactive?\nDashboard/apps?\nProjector, paper, website?\nResolution?\nColor?\n\n\n\n\n\n8.1.3.4 Tools\nAt the UC Davis DataLab, we advocate for the use of open-source software and scripting languages for data-driven research projects, including for generating data visualizations.\nUsing scripting languages makes it easy for you to reproduce your data visualizations. As you clean and update your data, you can re-create your visuals easily by re-running your code. You can also return to a figure later and know exactly what it represents and how you made it. You don’t have to worry about remembering which buttons you clicked, and in what order, like you would when using a GUI based software.\nUsing free, open-source software also means that you can easily and freely share your data, code, and output with your collaborators, reducing the equity and reproducibility barriers posed by the use of proprietary software. Open-source software that’s great for plotting—like R—also has amazing user communities and resources to help you learn the code and create your ideal visualization.\n\n\n\n\n\n\nTip\n\n\n\nBe practical with yourself: you probably aren’t going to learn a new package or other plotting software overnight. If your conference talk is tomorrow, using familiar software like Excel for plotting can be fine, especially if you know some tricks to clean up and customize the appearance of your plots.\n\n\n\n\n\n\n\n\nSee also\n\n\n\n\n\nHere’s a non-exhaustive list of open source tools we recommend for data visualization:\n\nStatic visualizations:\n\nggplot for R, Python, and Julia\nSeaborn for Python\n\nGeospatial visualizations:\n\nQGIS\n\nDynamic and interactive visualizations:\n\nLeaflet for mapping\nD3\nPlotly for R, Python, and Julia\nBokeh for R and Python\n\n\n\n\n\n\n\n8.1.3.5 Message\nResearch is storytelling with data. Every data visualization is an important piece of that story. It may help you confirm (or reject) a hypothesis, discover new correlations, or predict the likelihood of a future event.\nCreating statistical graphics is like writing a novel—you get to decide who and what will be featured in your data story. And just like one page of a novel, your data visualization alone doesn’t tell the whole story. Every data visualization should contain the details required for explanation, and they require narratives.\nWrite out captions for each plot before you make it. What does the plot show? After creating the plot, go back and update the caption with the take home points for your viewer. How might others focus on a different message? If you can’t articulate what the plot is about then you probably should rethink what you are choosing to display and how you are showing it.\n\n\n8.1.3.6 Critical Approaches\n\n\n\n\n\n\nImportant\n\n\n\nDon’t skip this step. It’s last on this list but is the most important on your journey to making useful data visualizations. Data are information, and information is power. Use this power intentionally and mindfully throughout the process of creating and sharing your visualizations.\n\n\nAs you reflect on your answers to the planning prompts above, critically review the features of your data:\n\nWhat do the variables you’ve selected for your visualization mean? How are they defined? How did those definitions come to be? Why did you select them?\nWho will your data visualizations affect? What groups are left out? How does this affect the story your data tells? How might someone misrepresent or misunderstand your story? Bring back the bodies.\n\nConducting these connotative and denotative explorations of your data will not only result in a more robust visualization, but will make you a better researcher and support a more inclusive and equitable society.\n\n\n\n\n\n\nSee also\n\n\n\nTo learn more and practice these steps on some case studies, check out our Critical Approach to Data Visualization workshop and Data Feminism research and learning cluster.\n\n\n\n\n\n8.1.4 Graphical Elements of a Plot\nA data visualization is useful only if it encodes information in a way that our eyes can perceive and our brain can understand. Marks and channels are the building blocks of all data visualizations and are employed to accomplish this encoding.\nMarks are the the basic geometries, or graphical elements, in a plot that depict our data items or their linkages. Marks indicate “where” something is and include points (0d), lines (1d), areas (2d), and volumes (3d).\nChannels are the attributes of that control how the marks appear. Channels are used to encode (or indicate) the values or meaning of our data. Channels were first described in the mid-20th century by Jacques Bertin in his book Semilogie graphique (the Semiology of Graphics [1967]), which argues that visual perception operates according to rules that can be followed to express information visually in intuitive, accurate and efficient ways. He described seven main categories of visual variables (channels): location or position, size, shape, orientation, color, and texture. More recent publications list up to 12 channels useful for encoding meaning in data visualizations (Roth 2017).\nBy understanding the nature of our data in combination with the principles of visual perception, we can decide which marks and channels to use for a given data visualizations.\n\n\n\n\n\n\nFigure 8.9: (source: Visualization Analysis and Design by Tamara Munzner)\n\n\n\n\n\n8.1.5 Principles of Visual Perception\nLeveraging principles of visual perception (the ability to see and interpret surrounding visual information) will help us identify appropriate plot types and design better, more informative graphics. Humans are wired to look for structure, patterns, and logic. Our brains are amazing—they take ambiguous visual information and transform it into something organized, symmetrical, or familiar so we can understand it. But, we don’t process all visual information equally.\n\n8.1.5.1 Visual Magic Tricks\nTake a look at the following questions and images.\n\n\n\n\n\n\nFigure 8.10: Which line is bigger?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThey’re the same length, if you pay careful attention to the scales of the axes!\n\n\n\n\n\n\n\n\n\nFigure 8.11: Which inner circle is bigger?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe circles are the same size.\n\n\n\n\n\n\n\n\n\nFigure 8.12: Do these lines connect?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe lines do NOT connect. Hold up a ruler or straight edge and prove it for yourself.\n\n\n\n\n\n\n\n\n\nFigure 8.13: Is the center bar in this image by Dodek a gradient?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nNope! It’s a solid color.\n\n\n\n\n\n\n\n\n\nFigure 8.14: What shape(s) do you see in this image?\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nDid you see a vase or two faces?\n\n\n\nThese visual “magic tricks” work because they capitalize on innate weaknesses in our visual perception.\n\n\n8.1.5.2 Steven’s Psychophysical Power Law\nResearch studies by Stanley Smith Stevens and others have shown that we exhibit innate biases in how we perceive magnitude changes in the intensity of various types of stimuli.\nFor example, we perceive the intensity of an electrical shock to a greater degree than its actual, physical intensity would seem to warrant. We’re also poor at accurately perceiving changes in brightness and estimate it to increasing less than it actually does. However, we have near perfect perception of length proportional to its actual increase. This is especially true if lengths are aligned and on the same scale. Knowing this can help us design more intuitively useful plots.\n\n\n\n\n\n\nFigure 8.15: (source: Figure 5.7 in Visualization Analysis and Design by Tamara Munzner)\n\n\n\n\n\n8.1.5.3 Perception and Encodings\nBased on psychophysics, we can rank encodings to help us identify which ones will more accurately allow us to judge differences in relative magnitudes, which is important when working with ordinal, interval or ratio data.\n\n\n\n\n\n\nFigure 8.16: (source: Jock Mackinlay, 1986, Computer Science ACM Trans. Graph.)\n\n\n\nFrom most to least accurate by magnitude perception:\n\nPosition along a common scale. Spatial position is the easiest feature for us to recognize and evaluate, and unsurprisingly is used in the most common plot types: bar charts, scatterplots.\nPositions along identical but nonaligned scales. Small multiples, grid, lattice, panel, and Rellis charts.\nLength. We can easily recognize proportions and evaluate lengths, especially when they are aligned, such as in bar charts.\nDirection. We recognize directionality fairly easily. Trend charts utilize this to demonstrate changes over time.\nAngle, slope. It’s harder to evaluate angles than length or position. Pie charts can be as efficient as stacked bar charts, unless there are more than 3 parts to the whole. But ask yourself—if there are fewer than 3 or fewer parts, do you really need a visualization?\nArea. Determining the relative magnitude of areas is much harder compared to lengths, and should be used (like in bubble charts) for indicating the relative importance, and not absolute magnitude changes.\nVolume. 3D objects as represented in 2-D space are hard to evaluate. Avoid them. I’m looking at you, exploding 3D pie chart.\nCurvature. Perceiving changes in the degree of a curve magnifies the difficulties in detecting direction, angle, and non-aligned lengths.\nDensity, color saturation and shading. Color is the least accurate way to convey patterns. Saturation is the intensity of a single hue, and increasing color intensity is intuitively perceived as correlating to an increasing value. But individual hues are hard to compare to one another. Heatmaps along the same color gradient can be a good way to convey an overall picture of change in values over a range. We’ll talk more about color later on.\nColor hue. For data visualizations, color hue is the most challenging encoding to detect changes in magnitude.\n\n\n\n8.1.5.4 Evaluating Graphics\n\nNo matter how clever the choice of the information, and no matter how technologically impressive the encoding, a visualization fails if the decoding fails. (Cleveland 1983)\n\nHow do we detect if our encodings have failed? Munzner uses the principles of expressiveness and effectiveness to help us evaluate our data visualizations.\nThe expressiveness of a visual encoding should “express all of, and only, the attributes of the data.” It is violated when we use encodings that do not match our data type or our visualization goals. When it fails, a chart is not only sub-optimal and confusing, it can be incorrect and misleading. Charts can fail the expressiveness test if their encodings imply ordering when there actually is none, or they mis-order a variable.\nThe effectiveness of a visual encoding addresses how accurately can the interpreter of the chart decode the encodings within it and derive accurate knowledge. According to Munzner, “the importance of the attribute should match the salience of the channel,” meaning we should use channels at the top of the list to encode the variables that are the most important to communicating our data story.\nWhen looking at a plot, can you accurately detect differences is the sizes of the bubbles? Can you discriminate between all of the colors, compare the shades? Can you separate the dimensions of the data?\nTaking these principles together, when we want to compare magnitudes of ordinal data (numeric, continuous, or ordered qualitative data—like height, weight, number of children in a family, or a rating), we should use encodings at the top of Mackinlay’s list above.\nConversely, for nominal data (categorical or un-ordered qualitative data—like gender), use these identity channels:\n\nShape: glyphs are effective at grouping categorical attributes together. But be mindful that the more shapes you use, the harder it will be for a viewer to remember what corresponds to which specific data attribute.\nColor: while color can be very effective in data visualizations (see the Gestalt principles below) typically less is more. Apply contrasting colors only to differences in meanings in the data, or to emphasize the main elements. Start with grey, and add color only as necessary. And, be mindful when defining your color palette. Color brewer and Viz Palette provide palettes that optimize our perceptive abilities and design for accessibility. Do a color check—how will a person with colorblindness perceive your graphics?\nTexture: similar to shape and color, texture can be useful for differentiating between categories or separate areas. Textures can be particularly effective at replacing colors, such as in black and white figures, and for increasing accessibility by reinforcing a color encoding.\n\nCombining channels can result in integral or separable coding pairs, respectively allowing attributes to be perceived holistically or with separate judgments regarding their graphical dimension.\n\n\n\n\n\n\nFigure 8.17: (source: Colin Ware (2019) “Information Visualization”)\n\n\n\n\n\n8.1.5.5 Gestalt Principles\nIn addition to decoding specific elements, our brains have an amazing ability to create and perceive structure along visual objects. This is commonly referred to as the Gestalt principles of visual perception. This framework, combined with Steven’s Law, can help us think through how to use marks and channels together to create expressive and effective data visualizations:\n\nSimilarity: objects with the same visual properties are assumed to be similar and are grouped together.\n\nExample: use design elements such as shape, color, and organization to indicate groupings of the data. In design theory these are called “preattentive features” because we actually see and perceive them before we really think about them. In some experiments it was found to take less than 0.5 seconds for the eye and brain to process a preattentive property of an image.\n\nProximity: objects that are close together are perceived as a group.\n\nExample: since physical distance connotes similarity, grouping bars on a chart can indicate similarities among their data. Instead of listing it in a legend, directly label data groupings by adding informative text directly onto the graph.\n\nContinuity: elements that are aligned (on the same line, curve, or plane) are perceived to be more closely related to each other than to other elements.\n\nExample: it is often easier for us to perceive the groupings if the shapes are curves, rather than lines with sharp edges.\n\nEnclosure: objects that appear to have a boundary around them (i.e., are found within the same common or enclosed region) are perceived as being related.\n\nExample: Add line boundaries or shades to group objects.\n\nConnection: objects that are connected, such as by a line, are perceived as a group.\n\nExample: connect different data together to indicate a relationship. This connectedness is highly effective as it often over-rules the other principles for group perception. Every line plot is an example of connectedness.\n\nClosure: complex arrangements of visual elements are perceived as a single, recognizable pattern.\n\nExample: open structures are often perceived as closed, complete and regular.\n\nFigure and Ground: objects are perceived as either standing out prominently in the foreground (or front figure) of an image, or recede into the background.\n\nExample: shading or color blocking can be employed to to distinguish between the more important figure and less important ground features of an image. Place elements of the most importance in the foreground figure.\n\nFocal Point: whatever stands out visually is perceived as the most important. It will grabs our attention first, and holds it for the longest.\n\nExample: use design elements selectively to draw attention to the most important features of the data.\n\n\n\n\n\n\n\n\nFigure 8.18: Gestalt principles for perpetual grouping and figure-ground segregation. (source: Gestalt Principles for Attention and Segmentation in Natural and Artificial Vision Systems by G. Kootstra, N. Bergstrom, D. Kragic (2011).)\n\n\n\n\n\n\n8.1.6 Accessible Data Visualizations\n\n8.1.6.1 Color\nColor can be one of the most challenging—and important—attributes to apply to a plot. Special care must be taken when applying color to our data visualizations to ensure they are accessible to persons with color blindness. Color blindness prevents viewers from distinguishing between certain colors, their brightness, and/or shades of a color. Affecting approximately 1 in 12 men (8%) and 1 in 200 women (0.5%) around the world, it is likely that some viewers of your data visualization will perceive its colors differently.\nOverall we’re not doing a good job at using color mindfully in our science communication. If you want to use color, the following are some recommendations to keep in mind.\nRecommendation 1: Avoid problematic color combinations. The most common types of color blindness makes it hard to tell the difference between red and green (deuteranope and protanope color blindness). Blue-yellow color blindness (tritanope) is less common. Avoid using: red/green, green/brown, green/blue, blue/gray combinations. Many graphing software unfortunately use these combinations as a default and you will have to manually change this on your figures.\nTo demonstrate why these combinations are problematic, here is a color vision test:\n\n\n\n\n\n\nFigure 8.19: (source: Crameri, F., Shephard, G.E. & Heron, P.J. The misuse of colour in science communication. Nat Commun 11, 5444 (2020))\n\n\n\nRecommendation 2: Use an online tool to help you pick a colorblind friendly palette depending on your data and visualization needs. Examples include:\n\ncolorbrewer: palettes, color advice for mapping, and good general tips\ncoolors\n\n\n\n\n\n\n\nFigure 8.20\n\n\n\nRecommendation 3: Use a colorblindness simulator to check your visualization. Who won’t be able to see the differences you’re trying to display with color? Here are a few simulators:\n\nCoblis\nColor Oracle\n\nRecommendation 4: Add textures, symbols, or other channels to reinforce the grouping attributes on your plot.\n\n\n\n\n\n\nFigure 8.21: (source)\n\n\n\nRecommendation 5: Rethink your plot. You may not actually need color at all to effectively display your data.\n\n\n\n\n\n\nFigure 8.22: (source)\n\n\n\n\n\n\n\n\n\nSee also\n\n\n\n\n\nHere are some more resources to help you use color effectively and mindfully in your data visualizations.\nColor and design:\n\nVisualization-Aware Color Design: Aesthetic, Perceptual & Functional Constraints\nModeling Color Difference for Visualization Design (n experiment showing how mark type influences color perception in data viz)\nTextures and patterns for colorblindness\n\n\nColor accessibility in R:\n\nRColorBrewer package\nviridis package\nggpattern package\nR color cheatsheet\n\n\n\n\n\n\n8.1.6.2 Alternative Text\nSo far we’ve taken for granted that visualization is an accessible mode of communication, but researchers and audiences alike are not all sighted. RStudio is behind on vision impairment accessibility, but some packages can provide text descriptions and sonification/audification of plots to improve accessibility for non-visual data interaction.\nFor example, the BrailleR package, has a VI function that wraps around ggplot objects and provides a text-description output. This description is a starting point but it does not summarize the data itself, so it is important to consider also informative figure captions or embedded alternative text so that all viewers are able to interpret the visualization.\nOther packages like the sonification package’s sonify function can be used to represent data in audio form. With the function, the x-axis can span sound across time, so that the length of time a sound plays follows the data long the x-axis from left to right; the y-axis can be expressed as pitch, so that the pitch of the sound matches to the values of the data (lower value means lower pitch).\n\n\n\n8.1.7 Designing Statistical Graphics\nYou are now ready to make your plot! You can combine marks and channels to create nearly any plot type, and there are many established types of statistical graphics that you can choose from to showcase your data. Each type has its benefits, and drawbacks, based on how it encodes your data.\n\n\n\n\n\n\nTip\n\n\n\nMatch the chart type to your data—and what you want it to show—and not the other way around.\n\n\n\nStep 1: Identify Your Data Type\nData can be quantitative or qualitative:\n\nQuantitative data is either continuous (numerical data like height and weight), or discrete (constrained values, such as the number of children in a family).\nQualitative data can be ordered (categories that have a relationship but no meaningful distance between them, such as movie star ratings), or nominal (categories that have no meaningful order, such as gender).\n\n\n\nStep 2: Determine Your Functional Approach\nAsk ask yourself:\n\nWhat are the tasks you want the visual to support?\n\nShowing how values compare to each other? How the data are distributed? How they are composed? How values relate?\n\nWhat specific visual best supports those tasks?\nWhat do you expect people to naturally do in their “visual queries” as they explore the plot?\nHow can you modify the graphical marks and channels to support faster queries?\n\n\n\nStep 3: Select a Plot Type\nNow that you’ve identified your data types and what you need your visualization to show, explore your different chart type options! Start with this nifty From Data to Viz tool. Select your data type(s) and click through for the pros, cons, and alternate options for a bevy of charts.\n\n\n\n\n\n\nFigure 8.23\n\n\n\nFor example, if you want to enable accurate comparisons of individual quantitative values and their relationships, try a scatterplot or a chart with lines or bars sitting aligned on a single axis.\nThe following list contains an overview of some of the most common plot types you may encounter:\nSingle quantitative variables are plotted to show the frequency distribution of the data. While histograms are the most common density plots, a single quantitative variable can also be plotted using a rug plot/strip chart, boxplot, or violin plot (described below, where they’re most commonly employed).\nTwo quantitative variables can be plotted using a:\n\nScatterplot: each axis encodes the values of a different quantitative variable, and individual data are represented as points (or dots) on the chart.\nLine plot: data points are connected by straight lines. Line-scatter plots are are common for time series or trend data.\n\nOne quantitative and one qualitative variable are suitable for a:\n\nBar chart: bars represent the amount of data in different categories of a variable. One axis encodes the frequencies of the quantitative data, and the other axis the categories of the qualitative data.\nBoxplot: shows the median, quartiles, and bounds of your data.\nViolin plot: in essence, a boxplot that also shows the distribution of your quantitative variable.\nWord cloud: these eye-catching visualizations display a list of words with their font size corresponding to their importance. But, they require huge sample sizes and are not very useful as they often distort reality. For example, long words will look more prominent just because they have more letters and cover more area—our eyes don’t intuitively parse out word height from length.\nPie chart: uses relative frequencies to show how large each category is in relation to the whole.\n\n\n\n\n\n\n\nWarning\n\n\n\nPie charts are grudgingly listed here because you will see them in the wild, but resist the temptation to use them!\nBased on our visual perception, pie charts are inherently problematic because they encode values as visual attributes. Pie charts encode data as the area of each slice, as well as the angle that it forms in the center of the pie, making it difficult to easily perceive and compare differences.\nOver 492 posts on WTF Visualizations are tagged as pie charts! Almost any other chart type is better than a pie chart.\n\n\nOther complex plot types you may encounter that layer additional marks and channels on the above chart types are:\n\nLollipop chart: a dot chart where the dots are connected by lines to an axis.\nMosaic plot: also called a treemap, these plots display hierarchical data as sets of nested rectangles sized proportionately to their values.\nBubble plots: scatterplots where the size of a dot corresponds to a third numerical or ordered categorical value.\nRadar plots / star chart: line plots where each variable has its own axis and all axes are joined at the center of the figure.\nNetwork diagrams: also called graphs, these plots show connections (edges) between entities (nodes).\n\n\n\n\n\n\n\nSee also\n\n\n\nTo learn more about network diagrams, check out DataLab’s network toolkit and network analysis workshop.\n\n\n\n\n\n\n\n\nSee also\n\n\n\nGoogle also has an interactive plot gallery. And this Stack Exchange post has even more chart type resources.\nBut remember, some encodings are more difficult to accurately decode. When in doubt, stick to simple figures with points and lines.\n\n\n\n\n\n\n\n\nWhat About Maps?!\n\n\n\nGeospatial data visualization by nature is complex and encodes a lot of attributes. Interested in learning more? Check our DataLab’s Spatial Sciences research and learning cluster and workshops.\n\n\n\n\nStep 4: Iterate\nCreate your visual, and run through step 2 again keeping in mind the principles of visual perception, effectiveness and efficiency. Does it meet your needs? If not, try a different type. Graphing, like writing, requires continuous editing.\n\n\n\n8.1.8 Tips for Better Plots\nMaking effective data visualizations takes practice and experience. The more plots you look at, the more you will intuitively recognize what works—and what doesn’t—for data visual storytelling. One takeaway I hope you discover is the need to avoid unnecessary complexities.\n\n\n\n\n\n\nTip\n\n\n\nIf the “story” is simple, keep it simple. If the “story” is complex, make it look simple.\n\n\nBelow are some tips to help achieve those goals.\n\n8.1.8.1 Get Rid of Chartjunk\nAn easy way to instantly improve your plots is to eliminate superfluous material. Extra tick marks and grid lines; unnecessary text and arrows; decimal places beyond the measurement error of the level of difference; cute little butterfly clip art: this chartjunk has no meaning and it clutters up a chart, making it hard for your viewer to see what’s most important—your data. The amount of ink on your figure should directly correspond with the amount of data you present. If it doesn’t, you have a lot of chartjunk. (Evidence #10298 that pie charts are never a good choice.)\nTry these de-cluttering steps to improve your charts:\n\nShift from center to left-justified text\nRetain white space\nClear contrasts\nRemove chart borders\nRemove (or strongly mute) gridlines\nRemove data markers and point labels (unless they are important)\nRemove unnecessary polygon filling\nCleanup and rename axis labels to be intuitive\nReplace the title with something informative\nLabel the data directly using the principle of proximity\nLeverage consistent color and other aesthetics\n\nCreating visual order and reducing chartjunk will dramatically improve your graphic by helping your data stand out.\n\n\n8.1.8.2 Facilitate Comparisons\n\nAvoid having the graph elements interfere with the data\nJuxtapose or supepose plots (using the same scales)\nUse visually prominent symbols\nAvoid over-plotting; try jittering, or smoothing\nDon’t change a scale mid-axis\nUse only one scale on one axis\nUse color, judiciously\nAvoid jiggling the baseline\nDon’t distort the data; take care when selecting the encodings\n\nA common mistake is to use more encodings than there are dimensions of the data. If you data only has two dimensions (say number of students in STEM by gender identity), your figure could reasonably use points, rarely area, and never volume. (I’m looking at you, 3D pie chart.)\n\n\n8.1.8.3 Create Information-Rich Plots\nData visualizations cannot exist without text. They require context to infer meaning. Ask yourself:\n\nDoes the caption describe what has been graphed? Does it draw attention to the important features? Describe the conclusions drawn by the graph?\nAre the legends and labels clear and intuitive?\nAre important reference lines and points labeled?\n\n\n\n8.1.8.4 Don’t Distort the Data\nThere’s a bestselling book called [“How to Lie with Statistics”][]. Written by the journalist (and not a statistician) Darrell Huff in 1954, the book focuses on how decisions we make in selecting the data and analysis method, along with errors in interpretation, can generate incorrect conclusions. Similarly, visualization principles can be mis-applied when graphing such that the takeaway message from a graphic distorts reality. Review your plots to make sure they both tell, and show, the truth.\n\n\n8.1.8.5 Practice\nJust as an author edits before publishing the novel, and an artist sketches before making the masterpiece, plotting is an iterative process. Proofread for clarity and consistency. Check whether your plots pass the expressiveness and effectiveness tests. Does a viewer draw the same conclusions from the figure that you do?\nHere’s a cheat sheet and checklist to help you design and improve your data visualizations. Happy plotting!\n\n\n\n\n\n\nReferences and Additional Resources\n\n\n\n\n\nWebsites:\n\nMilestones in the History of Thematic Cartography, Statistical Graphics, and Data Visualization\nFrom Data to Viz\nInformation is Beautiful\nFlowing Data\nWTF Visualizations\nPerception in Visualization, a computer scientist’s viewpoint\n\nArticles:\n\nMickinlay, Jock. 1986. Automating the design of graphical presentations of relational information. ACM Transactions on Graphics. https://doi.org/10.1145/22949.22950\nCleveland, William S. & Kleiner, Beat. 1975. A Graphical Technique for Enhancing Scatterplots with Moving Statistics. In Proceedings of the Annual Meeting. Atlanta, GA.\nFisher, Ronald Alymer. (1915). Theory of Statistical Estimation. Proceedings of the Cambridge Philosophical Society. 22. 700-725.\n\nContemporary books and chapters:\n\nCleveland, William. 1994. The elements of graphing data, 2nd edition. Hobart Press.\nDrucker, J. 2014. Graphesis: Visual Forms of Knowledge Production. Harvard UP. Cambridge, MA.\nFriendly, M. 2007. A Brief History of Data Visualization. In Handbook of Computational Statistics: Data Visualization. III. Springer-Verlag. Heidelberg. 1-34.\nMunzner, Tamara. 2014. Visualization analysis and design.\nHuff, Darrell. 1954. How to Lie with statistics. W. W. Norton & Company. New York.\nTufte, Edward R. 1983. The Visual Display of Quantitative Information. Graphics Press. Cheshire, CT.\nWainer, Howard. 2007. Graphic discovery: a trout in the milk and other visual adventures.\nWilkinson, Leland. 2005. The Grammar of Graphics, 2nd ed.. Springer. New York. Yau, Visualize this: The flowing data guide to design, visualization, and statistics\n\nHistorical books:\n\nBertin, Jacques. 1983. Semiology of Graphics. University of Wisconsin Press. Madison, WI. (trans. W. Berg) 1967\nDescartes, Réne. 1637. La Géométrie. In Discours de la Méthode. Essellier. Paris.\nMinard, Charles Joseph. 1861. Des Tableaux Graphiques et des Cartes Figuratives. E. Thunot et Cie. Paris.\nPlayfair, William. 1786. Commercial and Political Atlas: Representing, by Copper-Plate Charts, the Progress of the Commerce, Revenues, Expenditure, and Debts of England, during the Whole of the Eighteenth Century. Corry. London.\nSnow, John. 1855. On the Mode of Communication of Cholera. (n.p.). London.\nTukey, John Wilder. 1977. Exploratory Data Analysis. Addison-Wesley. Reading, MA.\nTukey, John Wilder. 1960. A survey of sampling from contaminated distributions. In Contributions to Probability and Statistics: Essays in Honor of Harold Hotelling (I. Olkin et al., eds.) 448–485. Stanford Univ. Press.\n\nR graphics references:\n\nMurrell, Paul. 2019. R Graphics (3rd Edition). Chapman and Hall/CRC.\nSarkar, Deepayan. 2008. Lattice: Multivariate data visualization with R. Springer.\nggplot2: Elegant Graphics for Data Analysis (3e) by Wickham, Navarro, and Pedersen\nR Graphics Cookbook (2e) by Chang",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/08_data-visualization.html#data-viz-with-ggplot-in-r",
    "href": "chapters/08_data-visualization.html#data-viz-with-ggplot-in-r",
    "title": "8  Data Visualization",
    "section": "8.2 Data Viz with ggplot in R",
    "text": "8.2 Data Viz with ggplot in R\n\n8.2.1 R Graphics Overview\nThere are three popular systems for creating visualizations in R:\n\nThe base R functions (primarily the plot function)\nThe lattice package\nThe ggplot2 package\n\nThese three systems are not interoperable! Consequently, it’s best to choose one to use exclusively. Compared to base R, both lattice and ggplot2 are better at handling grouped data and generally require less code to create a nice-looking visualization.\nThe ggplot2 package is so popular that there are now knockoff packages for other data-science-oriented programming languages like Python and Julia. The package is also part of the Tidyverse. Because of these advantages, we’ll use ggplot2 for visualizations in this and all future lessons.\n\n\n8.2.2 The Grammar of Graphics\nggplot2 has detailed documentation and also a cheatsheet.\nThe “gg” in ggplot2 stands for grammar of graphics. The idea of a grammar of graphics is that visualizations can be built up in layers. In ggplot2, the three layers every plot must have are:\n\nData\nGeometry\nAesthetics\n\nThere are also several optional layers. Here are a few:\n\n\n\nLayer\nDescription\n\n\n\n\nscales\nTitle, label, and axis value settings\n\n\nfacets\nSide-by-side plots\n\n\nguides\nAxis and legend position settings\n\n\nannotations\nShapes that are not mapped to data\n\n\ncoordinates\nCoordinate systems (Cartesian, logarithmic, polar)\n\n\nthemes\nDisplay of non-data elements\n\n\n\n\n8.2.2.1 Making a Plot\nFor the plotting examples, let’s take the wine reviews data that we have been working with, and subset it to focus in on Cabernet Sauvignon from the Central Valley.\n\nwine_revs = read.csv(\"data/wine_enthusiast_rankings.csv\")\nwine_cv = subset(wine_revs, region_2 == \"Central Valley\" &\n                   variety == \"Cabernet Sauvignon\")\n\nNext we need to load ggplot2. As always, if this is your first time using the package, you’ll have to install it. Then you can load the package:\n\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nWhat kind of plot should we make? It depends on what data we want the plot to show. Let’s make a plot that shows the price of the wine against the points awarded to that wine by the reviewers. Both the price and the points are recorded as numbers. A scatter plot is a good choice for displaying two numeric features. Later we’ll learn about other options, but for now we’ll make a scatter plot.\n\nLayer 1: Data\nThe data layer determines the data set used to make the plot. ggplot and most other Tidyverse packages are designed for working with tidy data frames. Tidy means:\n\nEach observation has its own row.\nEach feature has its own column.\nEach value has its own cell.\n\nTidy data sets are convenient in general. A later lesson will cover how to make an untidy data set tidy. Until then, we’ll take it for granted that the data sets we work with are tidy.\nTo set up the data layer, call the ggplot function on a data frame:\n\nggplot(wine_cv)\n\n\n\n\n\n\n\n\nThis returns a blank plot. We still need to add a few more layers.\n\n\nLayer 2: Geometry\nThe geometry layer determines the shape or appearance of the visual elements of the plot. In other words, the geometry layer determines what kind of plot to make: one with points, lines, boxes, or something else.\nThere are many different geometries available in ggplot2. The package provides a function for each geometry, always prefixed with geom_.\nTo add a geometry layer to the plot, choose the geom_ function you want and add it to the plot with the + operator:\n\nggplot(wine_cv) + geom_point()\n\nError in `geom_point()`:\n! Problem while setting up geom.\nℹ Error occurred in the 1st layer.\nCaused by error in `compute_geom_1()`:\n! `geom_point()` requires the following missing aesthetics: x and y.\n\n\nThis returns an error message that we’re missing aesthetics x and y. We’ll learn more about aesthetics in the next section, but this error message is especially helpful: it tells us exactly what we’re missing. When you use a geometry you’re unfamiliar with, it can be helpful to run the code for just the data and geometry layer like this, to see exactly which aesthetics need to be set.\nAs we’ll see later, it’s possible to add multiple geometries to a plot.\n\n\nLayer 3: Aesthetic Mappings\nThe aesthetic mapping determines the relationship between the data and the geometry. Use this mapping to connect features in the data to aesthetics (visual elements) of the geometry.\nThe aes function creates an aesthetic mapping. The syntax is:\naes(AESTHETIC = FEATURE, ...)\nWhich aesthetics are relevant depends on the geometry, but some common ones are x, y, color, fill, shape, alpha, and size. There is more information about and examples of aesthetic names in the documentation.\nFor example, if we want to put the price feature on the x-axis, the aesthetic mapping should be:\naes(x = price)\nIn the aes function, column names are never quoted.\nThere are a few ways to attach the aesthetic mapping to your plot. The simplest method is to add the aesthetic mapping to the plot like any other layer. This embeds an assumption that there is only one mapping for this plot. When this is not the case, we will soon see that specifying the mapping as the mapping argument of the geometry is a more precise way to say what data features map to what aesthetics. For now, we use the simple method.\n\nggplot(wine_cv) +\n  aes(x = price, y = points) +\n  geom_point()\n\n\n\n\n\n\n\n\nAesthetics can be informed by data (e.g. the price column) or by constant values (e.g. the color “blue”). Whether the value is informed by the data or constant will determine where to place that piece of information.\n\n\n\n\n\n\nCaution\n\n\n\n\n\nGenerally, constant values should not be placed inside an aesthetic mapping (a call to the aes function) because a mapping connects data features to aethetics and a constant value is not a data feature.\nIf you set a constant value inside of the aesthetic mapping, the results you get might not be what you expect. For instance, suppose we want to make the points blue:\n\nggplot(wine_cv) +\n  aes(x = price, y = points, color = \"blue\") +\n  geom_point()\n\n\n\n\n\n\n\n\nInstead, if you want to set an aesthetic to a constant value, rather than one that’s data dependent, do so outside of the aesthetic mapping.\n\nggplot(wine_cv) +\n  aes(x = price, y = points) +\n  geom_point(color = \"blue\")\n\n\n\n\n\n\n\n\nNotice that when we specify the color “blue” (outside of aesthetic mapping), R understands what we mean.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nThere is a long list of color names that R recognizes. But you can also use specific hex codes or palettes like were recommended in the previous section on Accessible Data Visualizations.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nAnother useful constant aesthetic is the alpha argument, which adjusts the transparency of the points using a range from 0 to 1 (0 is fully transparent and 1 is fully opaque). This can be useful because geom_point plots points with identical coordinates on top of one another, and semi-transparent points make it visually clear where there are multiple points stacked up.\n\nggplot(wine_cv) +\n  aes(x = price, y = points) +\n  geom_point(color = \"blue\", alpha = .3)\n\n\n\n\n\n\n\n\n\n\n\n\n\nPer-geometry Aesthetics\nWhen you add an aesthetic mapping to the ggplot function, it applies to the entire plot. You can also set an aesthetic mapping individually for each geometry, by passing the mapping as the mapping argument in the geom_ function. Before we test this out, let’s make a smaller subset of our wines, what we’ll called underrated_wines, because they cost less than $20 and have scores higher than 85.\n\nunderrated_wines &lt;- subset(wine_cv, price &lt; 20 & points &gt; 85)\nnrow(underrated_wines)\n\n[1] 40\n\n\nNow, let’s first add the aesthetic mapping to the ggplot functions, and add color by region to take a look at where these wines are from within the Central Valley.\n\nggplot(underrated_wines) +\n  aes(x = price, y = points, color = region_1) +\n  geom_point()\n\n\n\n\n\n\n\n\nNow let’s add another geometry to better understand the effect of aesthetic placements. Let’s add a geom_text layer to add labels to the plot based on who ranked this wine (taster_name):\n\nggplot(underrated_wines) +\n  aes(x = price, y = points, color = region_1, label = taster_name) +\n  geom_point() +\n  geom_text(size = 3)\n\n\n\n\n\n\n\n\nIn the example above, both geometries (geom_point and geom_text), take on the same color aesthetic mapping. So, where we put the aesthetics matters. If we move the color aesthetic to the geom_text layer, how does the plot change?\n\nggplot(underrated_wines) +\n  aes(x = price, y = points, label = taster_name) +\n  geom_point() +\n  geom_text(mapping=aes(color = region_1), size = 3)\n\n\n\n\n\n\n\n\nWe can also move the color aesthetic to the geom_point layer to experiment:\n\nggplot(underrated_wines) +\n  aes(x = price, y = points, label = taster_name) +\n  geom_point(mapping = aes(color = region_1)) +\n  geom_text(size = 3)\n\n\n\n\n\n\n\n\nHow might we be able to better see all 40 of the observations? Let’s try the position argument within each geometry, where position = position_jitter() will adjust (or “jitter”) the points.\n\nggplot(underrated_wines) +\n  aes(x = price, y = points, label = taster_name) +\n  geom_point(aes(color = region_1), position = position_jitter(seed = 1)) +\n  geom_text(size = 3, position = position_jitter(seed = 1))\n\n\n\n\n\n\n\n\n\n\nOther Layers: Scales and Themes\nThe scales layer controls the title, axis labels, and axis scales of the plot. Most of the functions in the scales layer are prefixed with scale_, but not all of them.\nThe labs function is especially important, because it’s used to set the title and axis labels:\n\nggplot(wine_cv) +\n  aes(x = price, y = points, color = region_1) +\n  geom_point() +\n  labs(title = \"Central Valley Cabernet Sauvignon price by wine score points\",\n       x = \"Price ($)\", y = \"Points\", color = \"Region\")\n\n\n\n\n\n\n\n\nYou can add theme layers that change the non-data components of the figure.\n\n\n\n\n\n\nTip\n\n\n\nggplot2 comes with several themes which can be useful to quickly change the look of your visualization. Popular themes include theme_classic, theme_minimal, and theme_light.\n\n\n\nggplot(wine_cv) +\n  aes(x = price, y = points, color = region_1) +\n  geom_point() +\n  labs(title = \"Central Valley Cabernet Sauvignon price by wine score points\",\n       x = \"Price ($)\", y = \"Points\", color = \"Region\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nYou can assign plots to variables:\n\nwine_plot &lt;- ggplot(wine_cv) +\n  aes(x = price, y = points, color = region_1) +\n  geom_point() +\n  labs(title = \"Central Valley Cabernet Sauvignon price by wine score points\",\n       x = \"Price ($)\", y = \"Points\", color = \"Region\") +\n  theme_minimal()\n\nNote what kind of object this is:\n\ntypeof(wine_plot)\n\n[1] \"list\"\n\nclass(wine_plot)\n\n[1] \"gg\"     \"ggplot\"\n\n\n\n\n\n\n8.2.3 Saving Plots\n\nggsave\nIn ggplot2, use the ggsave function to save the most recent plot you created:\nggsave(plot = wine_plot, \"scatter_plot.png\")\nThe file format is selected automatically based on the extension. Common formats are PNG and PDF.\n\n\nThe Plot Device\nYou can also save a plot with one of R’s “plot device” functions. The steps are:\n\nCall a plot device function: png, jpeg, pdf, bmp, tiff, or svg.\nRun your code to make the plot.\nCall dev.off to indicate that you’re done plotting.\n\nThis strategy works with any of R’s graphics systems (not just ggplot2).\nHere’s an example:\n\n# Run these lines in the console, not the notebook!\njpeg(\"scatter_plot.jpeg\")\nwine_plot\ndev.off()\n\n\n\n\n8.2.4 Example: Bar Plot\nLet’s say we want to plot the number of wines for each region in the Central Valley. A bar plot is an appropriate way to represent this visually.\nThe geometry for a bar plot is geom_bar. Since bar plots are mainly used to display frequencies, the geom_bar function automatically computes frequencies when given mapped to a categorical feature. So we can write:\n\nggplot(wine_cv, aes(x = region_1)) + geom_bar()\n\n\n\n\n\n\n\n\nTo prevent geom_bar from computing frequencies automatically, set stat = \"identity\". This is mainly useful if you want to plot quantities you’ve computed manually on the y-axis.\n\n8.2.4.1 Position Adjustment\nJust as you added color to group the scatter plot data, you may want to add a color grouping to the bar plot. For bar plots, this will take the fill argument instead of the color argument. (The color argument will outline the bars in a color, whereas the fill argument will fill them in with a default color scheme.)\n\nggplot(wine_cv) +\n  aes(x = region_1) +\n  geom_bar(aes(fill = taster_name))\n\n\n\n\n\n\n\n\nThe geom_bar function automatically positions the grouped colors or fills on top of one another (default argument position = \"identity\"). If you want to change the position of the groupings, you can set position = \"dodge\" to display the groups side-by-side.\n\nggplot(wine_cv) +\n  aes(x = region_1) +\n  geom_bar(mapping = aes(fill = taster_name), position = \"dodge\")\n\n\n\n\n\n\n\n\n\n\n\n8.2.5 Remembering Factors\nA feature is categorical if it measures a qualitative category. For example, the genres rock, blues, alternative, folk, pop are categories.\nR uses the class factor to represent categorical data. Visualizations and statistical models sometimes treat factors differently than other data types, so it’s important to make sure you have the right data type. If you’re ever unsure, remember that you can check the class of an object with the class function.\nWhen you load a data set, R usually can’t tell which features are categorical. That means identifying and converting the categorical features is up to you. This can be especially helpful to know if you are plotting categories, but want them to have a particular order, other than the default (alphabetical).\nLet’s think about which features are categorical in the class wine reviews data.\n\nstr(wine_cv)\n\n'data.frame':   104 obs. of  14 variables:\n $ X                    : int  954 2765 3397 4549 4686 4944 5426 5975 6964 8633 ...\n $ country              : chr  \"US\" \"US\" \"US\" \"US\" ...\n $ description          : chr  \"Full-bodied and smooth in texture, this generous-tasting wine has lots of ripe plum flavors and sweet-seeming oak accents.\" \"This full-bodied wine has earthy, woodsy aromas, ripe and mature fruit flavors and a broad, almost soft texture\"| __truncated__ \"This is on the light side, with simple flavors and a juicy, soft texture that shows very little tannin. Aromas \"| __truncated__ \"A very basic Cabernet Sauvignon, very low in alcohol, with a harshness on the finish.\" ...\n $ designation          : chr  \"Reserve Bottling\" \"Judy's Vineyard\" \"\" \"\" ...\n $ points               : int  87 84 84 81 91 86 88 87 86 86 ...\n $ price                : num  15 29 13 11 20 11 12 10 13 14 ...\n $ province             : chr  \"California\" \"California\" \"California\" \"California\" ...\n $ region_1             : chr  \"Lodi\" \"Lodi\" \"Lodi\" \"Lodi\" ...\n $ region_2             : chr  \"Central Valley\" \"Central Valley\" \"Central Valley\" \"Central Valley\" ...\n $ taster_name          : chr  \"Jim Gordon\" \"Jim Gordon\" \"Jim Gordon\" \"Virginie Boone\" ...\n $ taster_twitter_handle: chr  \"@gordone_cellars\" \"@gordone_cellars\" \"@gordone_cellars\" \"@vboone\" ...\n $ title                : chr  \"Archgate Cellars 2014 Reserve Bottling Cabernet Sauvignon (Lodi)\" \"Housley's Century Oak 2013 Judy's Vineyard Cabernet Sauvignon (Lodi)\" \"Cable Car 2013 Cabernet Sauvignon (Lodi)\" \"Harlow Ridge 2011 Cabernet Sauvignon (Lodi)\" ...\n $ variety              : chr  \"Cabernet Sauvignon\" \"Cabernet Sauvignon\" \"Cabernet Sauvignon\" \"Cabernet Sauvignon\" ...\n $ winery               : chr  \"Archgate Cellars\" \"Housley's Century Oak\" \"Cable Car\" \"Harlow Ridge\" ...\n\n\nThe numeric columns in this data set (price, points) are all quantitative, so they’re not categorical. That leaves the character columns.\nBecause we have subsetted only the Cabernet Sauvignon varieties in the Central Valley, we know that features like province, region_2, and variety have no variation. So that leaves us with the other character variables. Some of these, like winery, have too many groups to really consider useful:\n\ntable(wine_cv$winery)\n\n\n         337 Wine Cellars          Archgate Cellars           Black's Station \n                        1                         1                         2 \n                Cable Car                Caricature          Christine Andrew \n                        2                         1                         1 \n                 Concrete            Cooper Station                 Cosentino \n                        2                         2                         1 \n              Criss Cross          Cycles Gladiator                Earthquake \n                        2                         1                         4 \n                Five Rows                 Freakshow                      Gen5 \n                        1                         2                         3 \n             Harlow Ridge            Herman Walters     Housley's Century Oak \n                        1                         1                         1 \n               Insatiable                 Ironstone            James Mitchell \n                        1                         3                         4 \n            Klinker Brick                LangeTwins                Lapis Luna \n                        1                         4                         1 \nLeonardo Family Vineyards              Lodi Estates                      Loft \n                        1                         2                         1 \n                Matchbook  Mettler Family Vineyards             Michael David \n                        1                         7                         6 \n                Moon Eyes               Noble Vines                  Oak Farm \n                        1                         3                         3 \n                Oak Ridge                  Old Soul         Pavilion Crossing \n                        1                         1                         1 \n       Pavillion Crossing                   Peirano                   Peltier \n                        1                         5                         3 \n              Plungerhead                Sand Point     Scotto Family Cellars \n                        1                         1                         2 \n         Sharabella Wines               Shenanigans               Table No. 7 \n                        1                         1                         1 \n              The Crusher           The Dancing Fox            The Federalist \n                        1                         1                         1 \n              Toad Hollow            Tortoise Creek             Twisted Cedar \n                        1                         7                         1 \n                  un4seen                Van Ruiten          Victor Vineyards \n                        1                         2                         1 \n              Vino Vargas \n                        1 \n\n\nOthers, such as region_1 and taster_name, have fewer groupings—which is why we have used them so far for simplifying our visualizations. To reorder our region_1 feature, lets’ convert to to a factor using the factor.\n\nfactor(wine_cv$region_1)\n\n  [1] Lodi           Lodi           Lodi           Lodi           Lodi          \n  [6] Lodi           Lodi           Lodi           Lodi           Lodi          \n [11] Lodi           Lodi           Lodi           Clarksburg     Lodi          \n [16] Lodi           Lodi           Lodi           Lodi           Lodi          \n [21] Lodi           Lodi           Lodi           Lodi           Yolo County   \n [26] Lodi           Lodi           Lodi           Lodi           Lodi          \n [31] Dunnigan Hills Lodi           Lodi           Lodi           Lodi          \n [36] Lodi           Lodi           Lodi           Clements Hills Lodi          \n [41] Yolo County    Lodi           Lodi           Lodi           Lodi          \n [46] Lodi           Lodi           Lodi           Lodi           Lodi          \n [51] Lodi           Lodi           Lodi           Lodi           Lodi          \n [56] Lodi           Lodi           Lodi           Lodi           Lodi          \n [61] Lodi           Lodi           Lodi           Lodi           Lodi          \n [66] Clarksburg     Lodi           Lodi           Lodi           Lodi          \n [71] Lodi           Lodi           Lodi           Lodi           Lodi          \n [76] Lodi           Lodi           Lodi           Lodi           Lodi          \n [81] Lodi           Lodi           Lodi           Lodi           Lodi          \n [86] Lodi           Lodi           Lodi           Clarksburg     Lodi          \n [91] Lodi           Lodi           Lodi           Lodi           Lodi          \n [96] Lodi           Lodi           Lodi           Clarksburg     Lodi          \n[101] Lodi           Lodi           Lodi           Lodi          \nLevels: Clarksburg Clements Hills Dunnigan Hills Lodi Yolo County\n\n\nThe categories of a factor are called levels. You can list the levels with the levels function:\n\nlevels(factor(wine_cv$region_1))\n\n[1] \"Clarksburg\"     \"Clements Hills\" \"Dunnigan Hills\" \"Lodi\"          \n[5] \"Yolo County\"   \n\n\nNotice that factors default the level order to be in alphabetical order. This is also true when we plot characters, which you can notice if we again call the bar plot we made that counted up the regions in our wine reviews data.\n\nggplot(wine_cv) +\n  aes(x = region_1) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n8.2.5.1 Assigning Factor Levels\nBut what if we wanted to change the order of the x axis to be in descending order? We can change the level assignments. The easier way to do this is to re-write the feature as a factor again, but specify the order of the levels as an argument in the factor function.\n\nregions = c(\n  \"Lodi\", \"Clarksburg\", \"Yolo County\", \"Clements Hills\", \"Dunnigan Hills\"\n)\nwine_cv$region_1_f &lt;- factor(wine_cv$region_1, levels = regions)\nlevels(wine_cv$region_1_f)\n\n[1] \"Lodi\"           \"Clarksburg\"     \"Yolo County\"    \"Clements Hills\"\n[5] \"Dunnigan Hills\"\n\n\nNow we can run the same plotting code, but see that the order of the x axis changed, based on the levels of the region_1 factor.\n\nggplot(wine_cv) +\n  aes(x = region_1_f) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n8.2.6 Designing a Visualization\nWhat plot is appropriate?\n\n\n\nFeature 1\nFeature 2\nPlot\n\n\n\n\ncategorical\n\nbar, dot\n\n\ncategorical\ncategorical\nbar, dot, mosaic\n\n\nnumerical\n\nbox, density, histogram\n\n\nnumerical\ncategorical\nbox, density, ridge\n\n\nnumerical\nnumerical\nline, scatter, smooth scatter\n\n\n\nIf you want to add a:\n\n3rd numerical feature, use it to change point/line sizes.\n3rd categorical feature, use it to change point/line styles.\n4th categorical feature, use side-by-side plots.\n\nAlso:\n\nAlways add a title and axis labels. These should be in plain English, not variable names!\nSpecify units after the axis label if the axis has units. For instance, “Height (ft)”.\nDon’t forget that many people are colorblind! Also, plots are often printed in black and white. Use point and line styles to distinguish groups; color is optional.\nAdd a legend whenever you’ve used more than one point or line style.\nAlways write a few sentences explaining what the plot reveals. Don’t describe the plot, because the reader can just look at it. Instead, explain what they can learn from the plot and point out important details that are easily overlooked.\nSometimes points get plotted on top of each other. This is called over plotting. Plots with a lot of over plotting can be hard to read and can even misrepresent the data by hiding how many points are present. Use a two-dimensional density plot or jitter the points to deal with over plotting.\nFor side-by-side plots, use the same axis scales for both plots so that comparing them is not deceptive.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/09_data-from-the-web.html",
    "href": "chapters/09_data-from-the-web.html",
    "title": "9  Getting Data from the Web",
    "section": "",
    "text": "9.1 How the Web Works\nThe discipline of Data Science was, in large part, ushered into being by the increasing availability of information available on the World Wide Web or through other internet sources. Prior to the popularization of the internet as a publishing and communications platform, the majority of scientific research involved controlled studies in which researchers would collect their own data through various direct means (surveys, medical testing, etc.) in order to test a stated hypothesis.\nThe vast amount of information available on the internet disrupted this centuries-long dominance. Today, the dominant form of scientific research involves using data collected or produced by others for reasons having little or nothing to do with the research question being investigated by scholar. Users who post items about their favorite political candidate are not, for example, doing this so that sociologists can better under how politics function in America. However, their Tweets are being used in that and many other unforeseen capacities.\nBecause the internet provides such a rich trove of information for study, understanding how to effectively get, process, and prepare information from the internet for scientific research is a crucial skill for any data scientist. And in order to understand these workflows, the data scientist must first understand how the internet itself functions.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Getting Data from the Web</span>"
    ]
  },
  {
    "objectID": "chapters/09_data-from-the-web.html#how-the-web-works",
    "href": "chapters/09_data-from-the-web.html#how-the-web-works",
    "title": "9  Getting Data from the Web",
    "section": "",
    "text": "9.1.1 Client-Server Architecture\nThe base architecture and functioning of the internet is quite simple:\n\n\n\n\n\n\nFigure 9.1\n\n\n\n\nA content producer puts information on a computer called the server for others to retrieve;\nA user uses their local computer, called the client, to request the information from the sever;\nThe server delivers the information to the client.\n\nEach of the above detailed steps is accomplished using a technically complex but conceptually simple set of computer protocols. The technical details are beyond the scope of this course. We are here concerned with their conceptual architecture.\n\n9.1.1.1 Communication Between Clients and Servers\nAnytime a computer connects to any network, that computer is assigned a unique identifier known as an internet protocol (IP) address that uniquely identifies that computer on the network. IP addresses have the form x.x.x.x, where each x can be any integer from 0 to 255. For example, 169.237.102.141 is the current IP address of the computer that hosts the DataLab website. IP addresses are sometimes pre-designated for particular computers. A pre-designated IP address is known as static IP address. In other cases IP addresses are dynamically assigned from a range of available IP Address using a system known as the Dynamic Host Configuration Protocol (DHCP). Servers are typically assigned static IP addresses and clients are typically assigned dynamic IP addresses.\n\n\n\n\n\n\nFigure 9.2\n\n\n\nAs humans, we are used to accessing websites via a domain name (which we’ll discuss shortly), but you can also contact any server on the internet by simply typing the IP address into your browser address bar where you would normally enter the URL. For example, you can simply click on https://169.237.102.144 to access the DataLab website.\n\n\n\n\n\n\nNote\n\n\n\nYour browser may give you a security warning if you try to access a server directly using an IP address. For the link above, it is safe to proceed to the site.\n\n\n\n\n9.1.1.2 Domain Name Resolution\nIP addresses are the unique identifiers that make the internet work, but they are not very human friendly. To solve this problem, a system of domain name resolution was created. Under this system, internet service providers access a universal domain registry database that associates human readable domain names with machine readable IP addresses, and a secondary set of of internet connected servers known as domain name servers (DNS) provide a lookup service that translates domain names into IP addresses in the background. As the end-user, you enter and see only domain names, but the actual request process is a multi-step process in which domain names are translated to IP address in the background:\n\n\n\n\n\n\nFigure 9.3\n\n\n\n\nA content producer puts information on a computer called the server for others to retrieve;\nA user uses their local computer, called the client, to request the information from the sever using a domain name using request software such as a web browser;\nThe user’s client software first sends a request to a DNS server to retrieve the IP address of the server on the network associated with the entered domain name;\nThe DNS server returns the associated IP address to the client;\nThe client then makes the information request to the server using its retrieved IP address;\nThe server delivers the information to the client.\n\n\n\n9.1.1.3 Request Routing\nOur simple diagram of the client server process shows only two computers. But when you connect to the internet you are not, of course, creating a direct connection to a single computer. Rather, you are connecting to vase network of literally millions of computers, what we have come to refer to as the cloud.\nIn order to solve this problem, the internet backbone also deploys a routing system that directs requests and responses across the network to the appropriate servers and clients.\nWhen you connect to the WiFi network in your home, office, or the local coffee house, you are connecting to a router. That router receives all of your requests and, provided you are not requesting something directly from another computer that is connected to the same router, passes that request on to a larger routing network at your internet service provider (ISP). When the ISP routers receive your request, they check to see if you’re requesting something from a computer that is connected to their network. If it is, they deliver the request. If it is not, they pass the request on to another, regional routing network. And this routing process is repeated until your request if finally routed to the correct server.\n\n\n\n\n\n\nFigure 9.4\n\n\n\n\n\n9.1.1.4 The Server Response\nWhen a request is sent to a server across the internet, the request includes both the specific URL of the resource being request and also an hidden request header. The request header provides information to the server such as the IP address and the operating system of the client, the transfer protocol being used, and the software on the client that is making the request. The server uses this information to properly format its response and to route it back to the requesting client using the same IP routing process as described above.\n\n\n9.1.1.5 Internet Transfer Protocols\nAll of the information transferred between computers over the network is transferred as streams of binary data. In order to ensure data integrity, these streams are usually broken up into smaller packets of data which are transmitted independent of each other and then reassembled by the receiving computer once it has received all of the packets in the stream. The first packet returned (a header packet) typically delivers information about how many packets the client should expect to receive and about how they should be reassembled to recreate the original data stream.\nThere are many different standards for how data streams are divided into packets. One standard might, for example, break the stream into a collection of 50-byte packets, while another might use 100-byte packages. These standards are called protocols. The two protocols that are familiar to most users are HTTP and HTTPS, which define the hypertext transfer protocol and its sibling the hypertext transfer secure protocol. When you type a URL like https://datalab.ucdavis.edu into your browser, you are instructing the browser to use the HTTPS protocol to exchange information. Because HTTP and HTTPS are so common, most modern browsers do not require you to type the protocol name. They will simply insert the protocol for you in the background.\n\n\n\n9.1.2 Understanding URLs\nURL is an acronym for uniform resource locator. “Uniform” is a key term in this context. URLs are not arbitrary pointers to information. They are machine parsable, human readable, and can contain a lot of information.\nAll URLs are constructed using a standardized format. Consider the following URL:\nhttps://sfbaywildlife.info/species/common_birds.htm\nThere are actually several distinct components to the above URL:\n\n\n\n\n\n\nprotocol\nserver\npath to file\n\n\n\n\nhttps://\nsfbaywildlife.info\n/species/common_birds.htm\n\n\n\n\n\n\nWe’ve already discussed internet protocols and domain names. The file path portion of the URL can also provide valuable information about the server. It reads exactly like a Unix file path on the command line. The path /species/common_birds.htm indicates that the file common_birds.htm is in the species directory on the server.\n\n9.1.2.1 Dynamic Files\nIn the above example, when you enter the URL https://sfbaywildlife.info/species/common_birds.htm, your browser requests the file at /species/common_birds.html on the server. The server simply finds the file and delivers it to your web browser. We call this a static web server because the server itself does not do any processing of files prior to delivery. It simply receives requests for files living on the server and then sends them to the client, whose browser renders the file for viewing.\nMany websites, however, use dynamic processing. Pages with file extensions such as .php or .jsp, for example, include computer code in them. When these pages are requested by the server, the server executes the code in the designated file and sends the output of that execution to the requesting client rather than the actual file. Many sites, such as online stores and blogs, use this functionality to connect their web pages to active databases that track inventory and orders, for example.\n\n\n9.1.2.2 Query Strings\nDynamic websites, such as e-commerce sites that are connected to databases, require a mechanism for users to submit information to the server for processing. This is accomplished through one of two HTTP requests: GET or POST.\nPOST requests send submitted information to the server via a hidden HTTP header that is invisible to the end user. Scraping sites that require POST transactions is possible but can require significant sleuthing to determine the correct parameters and is beyond the scope of this course.\nGET requests, which are, happily for web scrapers more ubiquitous than POST requests, are much easier to understand. They are submitted via a query string that is simply appended to the request URL as in the following example:\nhttps://ebba.english.ucsb.edu/search_combined/?ft=dragon&numkw=52\nHere we see a query string appended to the end of the actual URL:\n\n\n\n\n\n\n\n\n\n\n\n\nprotocol\nserver\npath to file\nquery string\n\n\n\n\nhttps://\nebba.english.ucsb.edu\n/search_combined/index.php\n?ft=dragon&numkw=52\n\n\n\n\n\n\nQuery strings always appear at the end of the URL and begin with the ? character followed by a series of key/value pairs separated by the & character. In the above example we see that two parameters are submitted to the server via the query string as follows:\n\nft=dragon\nnumkw=52\n\nThe server will use these parameter values as input to perform a dynamic operation, in this case searching a database.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Getting Data from the Web</span>"
    ]
  },
  {
    "objectID": "chapters/09_data-from-the-web.html#accessing-data-online",
    "href": "chapters/09_data-from-the-web.html#accessing-data-online",
    "title": "9  Getting Data from the Web",
    "section": "9.2 Accessing Data Online",
    "text": "9.2 Accessing Data Online\nWhile there are many methods (and R packages) for acquiring data from the web, all fall into one of three general categories of data acquisition:\n\nDirect download describes the case where a data provider has provided a specific URL or web link from which you can download the data. For example, when you download data from the “Files” section of Canvas, you are using the direct download method of data acquisition.\nWeb application programming interfaces (web APIs) are web-accessible endpoints that you access via a URL, just as you would any website, but that are designed specifically to interact with computers (as opposed to humans). APIs receive requests and return data to the requester in machine, as opposed to human, readable formats, such as JSON or XML. We will learn more about working with APIs in this unit.\nScraping a web page means extracting information from human readable internet sources so that it can be used programmatically (for instance, in R). We will also learn more about Scraping in this unit.\n\nEach of the above general methods can be accomplished by applying any number of sub-methods and packages. And each brings with it its own degree of complexity and difficulty. As a general rule, the various ways you can get data from the web can be ranked according to difficulty from most to least convenient as follows:\n\nDirect download or “data dump”\nR or Python package (there are packages for many popular web APIs)\nDocumented web API\nUndocumented web API\nScraping",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Getting Data from the Web</span>"
    ]
  },
  {
    "objectID": "chapters/09_data-from-the-web.html#web-apis",
    "href": "chapters/09_data-from-the-web.html#web-apis",
    "title": "9  Getting Data from the Web",
    "section": "9.3 Web APIs",
    "text": "9.3 Web APIs\nAs noted earlier, a web application programming interface (API) provides a machine readable gateway for accessing data from the web. Most APIs provide programmatic access to the data that lives behind a human readable website. For example, most social media platforms such as Twitter, Facebook, and Instagram provide web APIs that allow computers to programmatically access the same data that you, as a human, see when you interact with these platforms via a web browser of mobile app. Some web APIs, however, are standalone, in that they provide machine access to data sources that have no human readable interface.\nOne of the challenges with working with web APIs is that, while there are some conventions for behavior, you need to know what and how to query a specific API in order to interact with it. Some APIs are well documented, while others are not. And some, for example the Twitter API, have extensive documentation that is frequently erroneous, incomplete, or out of date. As a result, working with web APIs can sometimes be challenging.\nFor this unit, we will work with the RESTCountries API which stores data on countries all over the world: their currencies, flags, population, etc. There are a large number of public web APIs out there, such as those listed by the public-api project.\n\n9.3.1 Querying a Web API\nThe R community has developed packages to facilitate interaction with many popular web APIs (Twitter, Facebook, etc.). Because web APIs are web-accessible, however, all can be accessed programmatically using basic internet request protocols, just as if you were going to a human readable webpage, provided you know how to formulate your request as a URL. The RESTcountries webpage publishes guidelines for accessing its API.\nWe can see from the documentation that the API will allow us to query a list of country features that appear in the database using a URL with the following construction:\n\"https://restcountries.com/v3.1/all?fields=name\"\nYou can actually go to this URL in your web browser and see the response, a portion of which is reproduced here:\n[{\"name\":{\"common\":\"American Samoa\",\"official\":\"American Samoa\",\"nativeName\":{\"eng\":{\"official\":\"American Samoa\",\"common\":\"American Samoa\"},\"smo\":{\"official\":\"Sāmoa Amelika\",\"common\":\"Sāmoa Amelika\"}}}},{\"name\":{\"common\":\"Peru\",\"official\":\"Republic of Peru\",\"nativeName\":{\"aym\":{\"official\":\"Piruw Suyu\",\"common\":\"Piruw\"},\"que\":{\"official\":\"Piruw Ripuwlika\",\"common\":\"Piruw\"},\"spa\":{\"official\":\"República del Perú\",\"common\":\"Perú\"}}}},{\"name\":{\"common\":\"Tonga\",\"official\":\"Kingdom of Tonga\",\"nativeName\":{\"eng\":{\"official\":\"Kingdom of Tonga\",\"common\":\"Tonga\"},\"ton\":{\"official\":\"Kingdom of Tonga\",\"common\":\"Tonga\"}}}}\nIf you look closely at this extract form the response, you will see that it contains HTML but is not HTML. Remember that APIs exist to deliver machine readable information. In this case, the API is delivering data in the JSON format, and some of the fields in the JSON object contain information provided as HTML.\nBecause the response is machine readable, we can make better use of the query if we run it in R rather than our web browser. Before we can do so, we need to setup our R environment to execute HTTP queries against the API and to process JSON. We’ll use the httr package to process our http transactions and the jsonlite package to process the JSON that we receive\ninstall.packages(\"httr\")\ninstall.packages(\"jsonlite\")\nWith our packages installed, we execute our query in R with one simple command:\n\nlibrary(httr)\nlibrary(jsonlite)\n\nresponse &lt;- GET(\"https://restcountries.com/v3.1/all?fields=name\")\n\nThe above executes an HTTP GET request (just like your web browser) to the identified query URL and loads it into an httr “response” object. If you take some time to examine the response object, you will see that it is a container object that contains a lot of useful information in addition to the actual JSON response that you see when you load the URL in your browser. For example, we can check the status of the response to see if it was successful by look at the response “status_code” which should be 200 if the query executed successfully.\n\ncat(response$status_code)\n\n200\n\n\nThe actual content of the response can be found in the response object’s “content” element. Note, however, that we have to do some formatting on the object in order to access it. Go ahead and look at the actual response$content object:\n\nresponse$content\n\n    [1] 5b 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6f 75 74\n   [25] 68 20 47 65 6f 72 67 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53\n   [49] 6f 75 74 68 20 47 65 6f 72 67 69 61 20 61 6e 64 20 74 68 65 20 53 6f 75\n   [73] 74 68 20 53 61 6e 64 77 69 63 68 20 49 73 6c 61 6e 64 73 22 2c 22 6e 61\n   [97] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63\n  [121] 69 61 6c 22 3a 22 53 6f 75 74 68 20 47 65 6f 72 67 69 61 20 61 6e 64 20\n  [145] 74 68 65 20 53 6f 75 74 68 20 53 61 6e 64 77 69 63 68 20 49 73 6c 61 6e\n  [169] 64 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6f 75 74 68 20 47 65 6f 72\n  [193] 67 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n  [217] 6e 22 3a 22 47 72 65 6e 61 64 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n  [241] 22 47 72 65 6e 61 64 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n  [265] 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 72 65 6e 61\n  [289] 64 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 72 65 6e 61 64 61 22 7d 7d\n  [313] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 77\n  [337] 69 74 7a 65 72 6c 61 6e 64 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53\n  [361] 77 69 73 73 20 43 6f 6e 66 65 64 65 72 61 74 69 6f 6e 22 2c 22 6e 61 74\n  [385] 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69\n  [409] 61 6c 22 3a 22 43 6f 6e 66 c3 a9 64 c3 a9 72 61 74 69 6f 6e 20 73 75 69\n  [433] 73 73 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 75 69 73 73 65 22 7d 2c\n  [457] 22 67 73 77 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 63 68 77 65\n  [481] 69 7a 65 72 69 73 63 68 65 20 45 69 64 67 65 6e 6f 73 73 65 6e 73 63 68\n  [505] 61 66 74 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 63 68 77 65 69 7a 22 7d\n  [529] 2c 22 69 74 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 6e 66\n  [553] 65 64 65 72 61 7a 69 6f 6e 65 20 53 76 69 7a 7a 65 72 61 22 2c 22 63 6f\n  [577] 6d 6d 6f 6e 22 3a 22 53 76 69 7a 7a 65 72 61 22 7d 2c 22 72 6f 68 22 3a\n  [601] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 6e 66 65 64 65 72 61 7a 69\n  [625] 75 6e 20 73 76 69 7a 72 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 76 69\n  [649] 7a 72 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n  [673] 6e 22 3a 22 53 69 65 72 72 61 20 4c 65 6f 6e 65 22 2c 22 6f 66 66 69 63\n  [697] 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 53 69 65 72 72 61\n  [721] 20 4c 65 6f 6e 65 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65\n  [745] 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69\n  [769] 63 20 6f 66 20 53 69 65 72 72 61 20 4c 65 6f 6e 65 22 2c 22 63 6f 6d 6d\n  [793] 6f 6e 22 3a 22 53 69 65 72 72 61 20 4c 65 6f 6e 65 22 7d 7d 7d 7d 2c 7b\n  [817] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 48 75 6e 67 61 72\n  [841] 79 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 48 75 6e 67 61 72 79 22 2c\n  [865] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 68 75 6e 22 3a 7b 22 6f 66\n  [889] 66 69 63 69 61 6c 22 3a 22 4d 61 67 79 61 72 6f 72 73 7a c3 a1 67 22 2c\n  [913] 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 67 79 61 72 6f 72 73 7a c3 a1 67 22\n  [937] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n  [961] 54 61 69 77 61 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75\n  [985] 62 6c 69 63 20 6f 66 20 43 68 69 6e 61 20 28 54 61 69 77 61 6e 29 22 2c\n [1009] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 7a 68 6f 22 3a 7b 22 6f 66\n [1033] 66 69 63 69 61 6c 22 3a 22 e4 b8 ad e8 8f af e6 b0 91 e5 9c 8b 22 2c 22\n [1057] 63 6f 6d 6d 6f 6e 22 3a 22 e5 8f b0 e7 81 a3 22 7d 7d 7d 7d 2c 7b 22 6e\n [1081] 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 57 61 6c 6c 69 73 20 61\n [1105] 6e 64 20 46 75 74 75 6e 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 54\n [1129] 65 72 72 69 74 6f 72 79 20 6f 66 20 74 68 65 20 57 61 6c 6c 69 73 20 61\n [1153] 6e 64 20 46 75 74 75 6e 61 20 49 73 6c 61 6e 64 73 22 2c 22 6e 61 74 69\n [1177] 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61\n [1201] 6c 22 3a 22 54 65 72 72 69 74 6f 69 72 65 20 64 65 73 20 c3 ae 6c 65 73\n [1225] 20 57 61 6c 6c 69 73 20 65 74 20 46 75 74 75 6e 61 22 2c 22 63 6f 6d 6d\n [1249] 6f 6e 22 3a 22 57 61 6c 6c 69 73 20 65 74 20 46 75 74 75 6e 61 22 7d 7d\n [1273] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 61\n [1297] 72 62 61 64 6f 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 61 72 62\n [1321] 61 64 6f 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67\n [1345] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 61 72 62 61 64 6f 73 22\n [1369] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 61 72 62 61 64 6f 73 22 7d 7d 7d 7d\n [1393] 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 50 69 74 63\n [1417] 61 69 72 6e 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22\n [1441] 3a 22 50 69 74 63 61 69 72 6e 20 47 72 6f 75 70 20 6f 66 20 49 73 6c 61\n [1465] 6e 64 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22\n [1489] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 50 69 74 63 61 69 72 6e 20 47\n [1513] 72 6f 75 70 20 6f 66 20 49 73 6c 61 6e 64 73 22 2c 22 63 6f 6d 6d 6f 6e\n [1537] 22 3a 22 50 69 74 63 61 69 72 6e 20 49 73 6c 61 6e 64 73 22 7d 7d 7d 7d\n [1561] 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 49 76 6f 72\n [1585] 79 20 43 6f 61 73 74 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70\n [1609] 75 62 6c 69 63 20 6f 66 20 43 c3 b4 74 65 20 64 27 49 76 6f 69 72 65 22\n [1633] 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f\n [1657] 66 66 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 65\n [1681] 20 43 c3 b4 74 65 20 64 27 49 76 6f 69 72 65 22 2c 22 63 6f 6d 6d 6f 6e\n [1705] 22 3a 22 43 c3 b4 74 65 20 64 27 49 76 6f 69 72 65 22 7d 7d 7d 7d 2c 7b\n [1729] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 54 75 6e 69 73 69\n [1753] 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 54 75 6e 69 73 69 61 6e 20\n [1777] 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n [1801] 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84 d8\n [1825] ac d9 85 d9 87 d9 88 d8 b1 d9 8a d8 a9 20 d8 a7 d9 84 d8 aa d9 88 d9 86\n [1849] d8 b3 d9 8a d8 a9 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 aa d9 88 d9 86\n [1873] d8 b3 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n [1897] 22 3a 22 49 74 61 6c 79 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 74\n [1921] 61 6c 69 61 6e 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e\n [1945] 61 6d 65 22 3a 7b 22 69 74 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n [1969] 22 52 65 70 75 62 62 6c 69 63 61 20 69 74 61 6c 69 61 6e 61 22 2c 22 63\n [1993] 6f 6d 6d 6f 6e 22 3a 22 49 74 61 6c 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61\n [2017] 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 65 6e 69 6e 22 2c 22 6f\n [2041] 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 42 65\n [2065] 6e 69 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22\n [2089] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75\n [2113] 65 20 64 75 20 42 c3 a9 6e 69 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42\n [2137] c3 a9 6e 69 6e 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d\n [2161] 6d 6f 6e 22 3a 22 49 6e 64 6f 6e 65 73 69 61 22 2c 22 6f 66 66 69 63 69\n [2185] 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 49 6e 64 6f 6e 65 73\n [2209] 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 69 6e 64 22 3a\n [2233] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 6b 20 49 6e\n [2257] 64 6f 6e 65 73 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 49 6e 64 6f 6e\n [2281] 65 73 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n [2305] 6f 6e 22 3a 22 43 61 70 65 20 56 65 72 64 65 22 2c 22 6f 66 66 69 63 69\n [2329] 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 43 61 62 6f 20 56 65\n [2353] 72 64 65 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 70 6f 72 22\n [2377] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61\n [2401] 20 64 65 20 43 61 62 6f 20 56 65 72 64 65 22 2c 22 63 6f 6d 6d 6f 6e 22\n [2425] 3a 22 43 61 62 6f 20 56 65 72 64 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n [2449] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 61 69 6e 74 20 4b 69 74 74 73\n [2473] 20 61 6e 64 20 4e 65 76 69 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n [2497] 46 65 64 65 72 61 74 69 6f 6e 20 6f 66 20 53 61 69 6e 74 20 43 68 72 69\n [2521] 73 74 6f 70 68 65 72 20 61 6e 64 20 4e 65 76 69 73 22 2c 22 6e 61 74 69\n [2545] 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61\n [2569] 6c 22 3a 22 46 65 64 65 72 61 74 69 6f 6e 20 6f 66 20 53 61 69 6e 74 20\n [2593] 43 68 72 69 73 74 6f 70 68 65 72 20 61 6e 64 20 4e 65 76 69 73 22 2c 22\n [2617] 63 6f 6d 6d 6f 6e 22 3a 22 53 61 69 6e 74 20 4b 69 74 74 73 20 61 6e 64\n [2641] 20 4e 65 76 69 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f\n [2665] 6d 6d 6f 6e 22 3a 22 4c 61 6f 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n [2689] 22 4c 61 6f 20 50 65 6f 70 6c 65 27 73 20 44 65 6d 6f 63 72 61 74 69 63\n [2713] 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n [2737] 7b 22 6c 61 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e0 ba aa e0\n [2761] ba b2 e0 ba 97 e0 ba b2 e0 ba a5 e0 ba b0 e0 ba 99 e0 ba b0 20 e0 ba 8a\n [2785] e0 ba b2 e0 ba 97 e0 ba b4 e0 ba 9b e0 ba b0 e0 bb 84 e0 ba 95 20 e0 ba\n [2809] 84 e0 ba bb e0 ba 99 e0 ba a5 e0 ba b2 e0 ba a7 20 e0 ba 82 e0 ba ad e0\n [2833] ba 87 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e0 ba aa e0 ba 9b e0 ba 9b e0\n [2857] ba a5 e0 ba b2 e0 ba a7 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n [2881] 63 6f 6d 6d 6f 6e 22 3a 22 43 61 72 69 62 62 65 61 6e 20 4e 65 74 68 65\n [2905] 72 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 6f 6e 61\n [2929] 69 72 65 2c 20 53 69 6e 74 20 45 75 73 74 61 74 69 75 73 20 61 6e 64 20\n [2953] 53 61 62 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6e 6c 64\n [2977] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 6f 6e 61 69 72 65 2c 20\n [3001] 53 69 6e 74 20 45 75 73 74 61 74 69 75 73 20 65 6e 20 53 61 62 61 22 2c\n [3025] 22 63 6f 6d 6d 6f 6e 22 3a 22 43 61 72 69 62 69 73 63 68 20 4e 65 64 65\n [3049] 72 6c 61 6e 64 22 7d 2c 22 70 61 70 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n [3073] 22 3a 22 42 6f 6e 65 69 72 75 2c 20 53 69 6e 74 20 45 75 73 74 61 74 69\n [3097] 75 73 20 79 20 53 61 62 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 6f 6e\n [3121] 65 69 72 75 2c 20 53 69 6e 74 20 45 75 73 74 61 74 69 75 73 20 79 20 53\n [3145] 61 62 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n [3169] 6e 22 3a 22 55 67 61 6e 64 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n [3193] 52 65 70 75 62 6c 69 63 20 6f 66 20 55 67 61 6e 64 61 22 2c 22 6e 61 74\n [3217] 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69\n [3241] 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 55 67 61 6e 64 61 22\n [3265] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 55 67 61 6e 64 61 22 7d 2c 22 73 77 61\n [3289] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20\n [3313] 6f 66 20 55 67 61 6e 64 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 55 67 61\n [3337] 6e 64 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n [3361] 6e 22 3a 22 41 6e 64 6f 72 72 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n [3385] 22 50 72 69 6e 63 69 70 61 6c 69 74 79 20 6f 66 20 41 6e 64 6f 72 72 61\n [3409] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 63 61 74 22 3a 7b 22\n [3433] 6f 66 66 69 63 69 61 6c 22 3a 22 50 72 69 6e 63 69 70 61 74 20 64 27 41\n [3457] 6e 64 6f 72 72 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 41 6e 64 6f 72 72\n [3481] 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22\n [3505] 3a 22 42 75 72 75 6e 64 69 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n [3529] 65 70 75 62 6c 69 63 20 6f 66 20 42 75 72 75 6e 64 69 22 2c 22 6e 61 74\n [3553] 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69\n [3577] 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 75 20 42 75 72 75\n [3601] 6e 64 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 75 72 75 6e 64 69 22 7d\n [3625] 2c 22 72 75 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75\n [3649] 62 6c 69 6b 61 20 79 27 55 62 75 72 75 6e 64 69 20 22 2c 22 63 6f 6d 6d\n [3673] 6f 6e 22 3a 22 55 62 75 72 75 6e 64 69 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d\n [3697] 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6f 75 74 68 20 41 66 72 69\n [3721] 63 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63\n [3745] 20 6f 66 20 53 6f 75 74 68 20 41 66 72 69 63 61 22 2c 22 6e 61 74 69 76\n [3769] 65 4e 61 6d 65 22 3a 7b 22 61 66 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n [3793] 22 3a 22 52 65 70 75 62 6c 69 65 6b 20 76 61 6e 20 53 75 69 64 2d 41 66\n [3817] 72 69 6b 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6f 75 74 68 20 41 66\n [3841] 72 69 63 61 22 7d 2c 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n [3865] 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 53 6f 75 74 68 20 41 66 72 69\n [3889] 63 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6f 75 74 68 20 41 66 72 69\n [3913] 63 61 22 7d 2c 22 6e 62 6c 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n [3937] 49 52 69 70 68 61 62 6c 69 6b 69 20 79 65 53 65 77 75 6c 61 20 41 66 72\n [3961] 69 6b 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 65 77 75 6c 61 20 41 66\n [3985] 72 69 6b 61 22 7d 2c 22 6e 73 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n [4009] 3a 22 52 65 70 68 61 62 6f 6c 69 6b 69 20 79 61 20 41 66 72 69 6b 61 2d\n [4033] 42 6f 72 77 61 20 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 41 66 72 69 6b 61\n [4057] 2d 42 6f 72 77 61 22 7d 2c 22 73 6f 74 22 3a 7b 22 6f 66 66 69 63 69 61\n [4081] 6c 22 3a 22 52 65 70 68 61 62 6f 6c 69 6b 69 20 79 61 20 41 66 72 69 6b\n [4105] 61 20 42 6f 72 77 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 41 66 72 69 6b\n [4129] 61 20 42 6f 72 77 61 22 7d 2c 22 73 73 77 22 3a 7b 22 6f 66 66 69 63 69\n [4153] 61 6c 22 3a 22 49 52 69 70 68 61 62 68 75 6c 69 6b 68 69 20 79 65 4e 69\n [4177] 6e 67 69 7a 69 6d 75 20 41 66 72 69 6b 61 22 2c 22 63 6f 6d 6d 6f 6e 22\n [4201] 3a 22 4e 69 6e 67 69 7a 69 6d 75 20 41 66 72 69 6b 61 22 7d 2c 22 74 73\n [4225] 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 68 61 62 6f 6c\n [4249] 69 6b 69 20 79 61 20 41 66 6f 72 69 6b 61 20 42 6f 72 77 61 22 2c 22 63\n [4273] 6f 6d 6d 6f 6e 22 3a 22 41 66 6f 72 69 6b 61 20 42 6f 72 77 61 22 7d 2c\n [4297] 22 74 73 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 69 70 68 61\n [4321] 62 6c 69 6b 69 20 72 61 20 41 66 72 69 6b 61 20 44 7a 6f 6e 67 61 22 2c\n [4345] 22 63 6f 6d 6d 6f 6e 22 3a 22 41 66 72 69 6b 61 20 44 7a 6f 6e 67 61 22\n [4369] 7d 2c 22 76 65 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 69 70\n [4393] 68 61 62 75 e1 b8 bd 69 6b 69 20 79 61 20 41 66 75 72 69 6b 61 20 54 73\n [4417] 68 69 70 65 6d 62 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 41 66 75 72 69\n [4441] 6b 61 20 54 73 68 69 70 65 6d 62 65 22 7d 2c 22 78 68 6f 22 3a 7b 22 6f\n [4465] 66 66 69 63 69 61 6c 22 3a 22 49 52 69 70 68 61 62 6c 69 6b 69 20 79 61\n [4489] 73 65 4d 7a 61 6e 74 73 69 20 41 66 72 69 6b 61 22 2c 22 63 6f 6d 6d 6f\n [4513] 6e 22 3a 22 4d 7a 61 6e 74 73 69 20 41 66 72 69 6b 61 22 7d 2c 22 7a 75\n [4537] 6c 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 52 69 70 68 61 62 6c\n [4561] 69 6b 69 20 79 61 73 65 4e 69 6e 67 69 7a 69 6d 75 20 41 66 72 69 6b 61\n [4585] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 69 6e 67 69 7a 69 6d 75 20 41 66\n [4609] 72 69 6b 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n [4633] 6f 6e 22 3a 22 46 72 61 6e 63 65 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n [4657] 22 46 72 65 6e 63 68 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76\n [4681] 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n [4705] 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 66 72 61 6e c3 a7 61 69 73\n [4729] 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 46 72 61 6e 63 65 22 7d 7d 7d 7d\n [4753] 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 69 62 79\n [4777] 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 74 61 74 65 20 6f 66 20\n [4801] 4c 69 62 79 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72\n [4825] 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84 d8 af d9 88\n [4849] d9 84 d8 a9 20 d9 84 d9 8a d8 a8 d9 8a d8 a7 22 2c 22 63 6f 6d 6d 6f 6e\n [4873] 22 3a 22 e2 80 8f d9 84 d9 8a d8 a8 d9 8a d8 a7 22 7d 7d 7d 7d 2c 7b 22\n [4897] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 65 78 69 63 6f 22\n [4921] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 55 6e 69 74 65 64 20 4d 65 78 69\n [4945] 63 61 6e 20 53 74 61 74 65 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n [4969] 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 45 73 74\n [4993] 61 64 6f 73 20 55 6e 69 64 6f 73 20 4d 65 78 69 63 61 6e 6f 73 22 2c 22\n [5017] 63 6f 6d 6d 6f 6e 22 3a 22 4d c3 a9 78 69 63 6f 22 7d 7d 7d 7d 2c 7b 22\n [5041] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 47 61 62 6f 6e 22 2c\n [5065] 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 61 62 6f 6e 65 73 65 20 52 65 70\n [5089] 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72\n [5113] 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69\n [5137] 71 75 65 20 67 61 62 6f 6e 61 69 73 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n [5161] 22 47 61 62 6f 6e 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f\n [5185] 6d 6d 6f 6e 22 3a 22 4e 6f 72 74 68 65 72 6e 20 4d 61 72 69 61 6e 61 20\n [5209] 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 6d\n [5233] 6d 6f 6e 77 65 61 6c 74 68 20 6f 66 20 74 68 65 20 4e 6f 72 74 68 65 72\n [5257] 6e 20 4d 61 72 69 61 6e 61 20 49 73 6c 61 6e 64 73 22 2c 22 6e 61 74 69\n [5281] 76 65 4e 61 6d 65 22 3a 7b 22 63 61 6c 22 3a 7b 22 6f 66 66 69 63 69 61\n [5305] 6c 22 3a 22 43 6f 6d 6d 6f 6e 77 65 61 6c 74 68 20 6f 66 20 74 68 65 20\n [5329] 4e 6f 72 74 68 65 72 6e 20 4d 61 72 69 61 6e 61 20 49 73 6c 61 6e 64 73\n [5353] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 6f 72 74 68 65 72 6e 20 4d 61 72\n [5377] 69 61 6e 61 20 49 73 6c 61 6e 64 73 22 7d 2c 22 63 68 61 22 3a 7b 22 6f\n [5401] 66 66 69 63 69 61 6c 22 3a 22 53 61 6e 6b 61 74 74 61 6e 20 53 69 68 61\n [5425] 20 4e 61 20 49 73 6c 61 73 20 4d 61 72 69 c3 a5 6e 61 73 22 2c 22 63 6f\n [5449] 6d 6d 6f 6e 22 3a 22 4e 61 20 49 73 6c 61 73 20 4d 61 72 69 c3 a5 6e 61\n [5473] 73 22 7d 2c 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 43\n [5497] 6f 6d 6d 6f 6e 77 65 61 6c 74 68 20 6f 66 20 74 68 65 20 4e 6f 72 74 68\n [5521] 65 72 6e 20 4d 61 72 69 61 6e 61 20 49 73 6c 61 6e 64 73 22 2c 22 63 6f\n [5545] 6d 6d 6f 6e 22 3a 22 4e 6f 72 74 68 65 72 6e 20 4d 61 72 69 61 6e 61 20\n [5569] 49 73 6c 61 6e 64 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n [5593] 6f 6d 6d 6f 6e 22 3a 22 4e 6f 72 74 68 20 4d 61 63 65 64 6f 6e 69 61 22\n [5617] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66\n [5641] 20 4e 6f 72 74 68 20 4d 61 63 65 64 6f 6e 69 61 22 2c 22 6e 61 74 69 76\n [5665] 65 4e 61 6d 65 22 3a 7b 22 6d 6b 64 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n [5689] 22 3a 22 d0 a0 d0 b5 d0 bf d1 83 d0 b1 d0 bb d0 b8 d0 ba d0 b0 20 d0 a1\n [5713] d0 b5 d0 b2 d0 b5 d1 80 d0 bd d0 b0 20 d0 9c d0 b0 d0 ba d0 b5 d0 b4 d0\n [5737] be d0 bd d0 b8 d1 98 d0 b0 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 9c d0\n [5761] b0 d0 ba d0 b5 d0 b4 d0 be d0 bd d0 b8 d1 98 d0 b0 22 7d 7d 7d 7d 2c 7b\n [5785] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 43 68 69 6e 61 22\n [5809] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 50 65 6f 70 6c 65 27 73 20 52 65\n [5833] 70 75 62 6c 69 63 20 6f 66 20 43 68 69 6e 61 22 2c 22 6e 61 74 69 76 65\n [5857] 4e 61 6d 65 22 3a 7b 22 7a 68 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n [5881] 3a 22 e4 b8 ad e5 8d 8e e4 ba ba e6 b0 91 e5 85 b1 e5 92 8c e5 9b bd 22\n [5905] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e4 b8 ad e5 9b bd 22 7d 7d 7d 7d 2c 7b\n [5929] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 59 65 6d 65 6e 22\n [5953] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66\n [5977] 20 59 65 6d 65 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61\n [6001] 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84 d8 ac d9\n [6025] 85 d9 87 d9 88 d8 b1 d9 8a d8 a9 20 d8 a7 d9 84 d9 8a d9 85 d9 86 d9 8a\n [6049] d8 a9 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 a7 d9 84 d9 8a d9 8e d9 85\n [6073] d9 8e d9 86 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n [6097] 6f 6e 22 3a 22 53 61 69 6e 74 20 42 61 72 74 68 c3 a9 6c 65 6d 79 22 2c\n [6121] 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 6c 6c 65 63 74 69 76 69 74 79\n [6145] 20 6f 66 20 53 61 69 6e 74 20 42 61 72 74 68 c3 a9 6c 65 6d 79 22 2c 22\n [6169] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66\n [6193] 69 63 69 61 6c 22 3a 22 43 6f 6c 6c 65 63 74 69 76 69 74 c3 a9 20 64 65\n [6217] 20 53 61 69 6e 74 2d 42 61 72 74 68 c3 a9 6c 65 6d 79 22 2c 22 63 6f 6d\n [6241] 6d 6f 6e 22 3a 22 53 61 69 6e 74 2d 42 61 72 74 68 c3 a9 6c 65 6d 79 22\n [6265] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n [6289] 47 75 65 72 6e 73 65 79 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 61\n [6313] 69 6c 69 77 69 63 6b 20 6f 66 20 47 75 65 72 6e 73 65 79 22 2c 22 6e 61\n [6337] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63\n [6361] 69 61 6c 22 3a 22 42 61 69 6c 69 77 69 63 6b 20 6f 66 20 47 75 65 72 6e\n [6385] 73 65 79 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 65 72 6e 73 65 79 22\n [6409] 7d 2c 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 61 69\n [6433] 6c 6c 69 61 67 65 20 64 65 20 47 75 65 72 6e 65 73 65 79 22 2c 22 63 6f\n [6457] 6d 6d 6f 6e 22 3a 22 47 75 65 72 6e 65 73 65 79 22 7d 2c 22 6e 66 72 22\n [6481] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 44 67 c3 a8 72 6e c3 a9 73 69\n [6505] 61 69 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 44 67 c3 a8 72 6e c3 a9 73\n [6529] 69 61 69 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n [6553] 6f 6e 22 3a 22 53 6f 6c 6f 6d 6f 6e 20 49 73 6c 61 6e 64 73 22 2c 22 6f\n [6577] 66 66 69 63 69 61 6c 22 3a 22 53 6f 6c 6f 6d 6f 6e 20 49 73 6c 61 6e 64\n [6601] 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b\n [6625] 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 6f 6c 6f 6d 6f 6e 20 49 73 6c 61\n [6649] 6e 64 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6f 6c 6f 6d 6f 6e 20 49\n [6673] 73 6c 61 6e 64 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f\n [6697] 6d 6d 6f 6e 22 3a 22 53 76 61 6c 62 61 72 64 20 61 6e 64 20 4a 61 6e 20\n [6721] 4d 61 79 65 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 76 61 6c 62\n [6745] 61 72 64 20 6f 67 20 4a 61 6e 20 4d 61 79 65 6e 22 2c 22 6e 61 74 69 76\n [6769] 65 4e 61 6d 65 22 3a 7b 22 6e 6f 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n [6793] 22 3a 22 53 76 61 6c 62 61 72 64 20 6f 67 20 4a 61 6e 20 4d 61 79 65 6e\n [6817] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 76 61 6c 62 61 72 64 20 6f 67 20\n [6841] 4a 61 6e 20 4d 61 79 65 6e 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n [6865] 22 63 6f 6d 6d 6f 6e 22 3a 22 46 61 72 6f 65 20 49 73 6c 61 6e 64 73 22\n [6889] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 46 61 72 6f 65 20 49 73 6c 61 6e\n [6913] 64 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 64 61 6e 22 3a\n [6937] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 46 c3 a6 72 c3 b8 65 72 6e 65 22\n [6961] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 46 c3 a6 72 c3 b8 65 72 6e 65 22 7d 2c\n [6985] 22 66 61 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 46 c3 b8 72 6f\n [7009] 79 61 72 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 46 c3 b8 72 6f 79 61 72 22\n [7033] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n [7057] 55 7a 62 65 6b 69 73 74 61 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n [7081] 52 65 70 75 62 6c 69 63 20 6f 66 20 55 7a 62 65 6b 69 73 74 61 6e 22 2c\n [7105] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 72 75 73 22 3a 7b 22 6f 66\n [7129] 66 69 63 69 61 6c 22 3a 22 d0 a0 d0 b5 d1 81 d0 bf d1 83 d0 b1 d0 bb d0\n [7153] b8 d0 ba d0 b0 20 d0 a3 d0 b7 d0 b1 d0 b5 d0 ba d0 b8 d1 81 d1 82 d0 b0\n [7177] d0 bd 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 a3 d0 b7 d0 b1 d0 b5 d0 ba\n [7201] d0 b8 d1 81 d1 82 d0 b0 d0 bd 22 7d 2c 22 75 7a 62 22 3a 7b 22 6f 66 66\n [7225] 69 63 69 61 6c 22 3a 22 4f 27 7a 62 65 6b 69 73 74 6f 6e 20 52 65 73 70\n [7249] 75 62 6c 69 6b 61 73 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4f e2 80 98\n [7273] 7a 62 65 6b 69 73 74 6f 6e 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n [7297] 22 63 6f 6d 6d 6f 6e 22 3a 22 45 67 79 70 74 22 2c 22 6f 66 66 69 63 69\n [7321] 61 6c 22 3a 22 41 72 61 62 20 52 65 70 75 62 6c 69 63 20 6f 66 20 45 67\n [7345] 79 70 74 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22\n [7369] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 ac d9 85 d9 87 d9 88 d8 b1\n [7393] d9 8a d8 a9 20 d9 85 d8 b5 d8 b1 20 d8 a7 d9 84 d8 b9 d8 b1 d8 a8 d9 8a\n [7417] d8 a9 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d9 85 d8 b5 d8 b1 22 7d 7d 7d\n [7441] 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 65 6e\n [7465] 65 67 61 6c 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c\n [7489] 69 63 20 6f 66 20 53 65 6e 65 67 61 6c 22 2c 22 6e 61 74 69 76 65 4e 61\n [7513] 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n [7537] 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 75 20 53 c3 a9 6e c3 a9 67 61 6c\n [7561] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 c3 a9 6e c3 a9 67 61 6c 22 7d 7d\n [7585] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 72\n [7609] 69 20 4c 61 6e 6b 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 44 65 6d\n [7633] 6f 63 72 61 74 69 63 20 53 6f 63 69 61 6c 69 73 74 20 52 65 70 75 62 6c\n [7657] 69 63 20 6f 66 20 53 72 69 20 4c 61 6e 6b 61 22 2c 22 6e 61 74 69 76 65\n [7681] 4e 61 6d 65 22 3a 7b 22 73 69 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n [7705] 3a 22 e0 b7 81 e0 b7 8a e2 80 8d e0 b6 bb e0 b7 93 20 e0 b6 bd e0 b6 82\n [7729] e0 b6 9a e0 b7 8f 20 e0 b6 b4 e0 b7 8a e2 80 8d e0 b6 bb e0 b6 a2 e0 b7\n [7753] 8f e0 b6 ad e0 b7 8f e0 b6 b1 e0 b7 8a e0 b6 ad e0 b7 8a e2 80 8d e0 b6\n [7777] bb e0 b7 92 e0 b6 9a 20 e0 b7 83 e0 b6 b8 e0 b7 8f e0 b6 a2 e0 b7 80 e0\n [7801] b7 8f e0 b6 af e0 b7 93 20 e0 b6 a2 e0 b6 b1 e0 b6 bb e0 b6 a2 e0 b6 ba\n [7825] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e0 b7 81 e0 b7 8a e2 80 8d e0 b6 bb\n [7849] e0 b7 93 20 e0 b6 bd e0 b6 82 e0 b6 9a e0 b7 8f e0 b7 80 22 7d 2c 22 74\n [7873] 61 6d 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e0 ae 87 e0 ae b2 e0\n [7897] ae 99 e0 af 8d e0 ae 95 e0 af 88 20 e0 ae 9a e0 ae a9 e0 ae a8 e0 ae be\n [7921] e0 ae af e0 ae 95 20 e0 ae 9a e0 af 8b e0 ae 9a e0 ae b2 e0 ae bf e0 ae\n [7945] 9a e0 ae 95 e0 af 8d 20 e0 ae 95 e0 af 81 e0 ae 9f e0 ae bf e0 ae af e0\n [7969] ae b0 e0 ae 9a e0 af 81 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e0 ae 87 e0\n [7993] ae b2 e0 ae 99 e0 af 8d e0 ae 95 e0 af 88 22 7d 7d 7d 7d 2c 7b 22 6e 61\n [8017] 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 6c 65 73 74 69 6e 65\n [8041] 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 74 61 74 65 20 6f 66 20 50\n [8065] 61 6c 65 73 74 69 6e 65 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n [8089] 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 af d9 88 d9\n [8113] 84 d8 a9 20 d9 81 d9 84 d8 b3 d8 b7 d9 8a d9 86 22 2c 22 63 6f 6d 6d 6f\n [8137] 6e 22 3a 22 d9 81 d9 84 d8 b3 d8 b7 d9 8a d9 86 22 7d 7d 7d 7d 2c 7b 22\n [8161] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 61 6e 67 6c 61 64\n [8185] 65 73 68 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 50 65 6f 70 6c 65 27\n [8209] 73 20 52 65 70 75 62 6c 69 63 20 6f 66 20 42 61 6e 67 6c 61 64 65 73 68\n [8233] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 62 65 6e 22 3a 7b 22\n [8257] 6f 66 66 69 63 69 61 6c 22 3a 22 e0 a6 ac e0 a6 be e0 a6 82 e0 a6 b2 e0\n [8281] a6 be e0 a6 a6 e0 a7 87 e0 a6 b6 20 e0 a6 97 e0 a6 a3 e0 a6 aa e0 a7 8d\n [8305] e0 a6 b0 e0 a6 9c e0 a6 be e0 a6 a4 e0 a6 a8 e0 a7 8d e0 a6 a4 e0 a7 8d\n [8329] e0 a6 b0 e0 a7 80 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e0 a6 ac e0 a6 be\n [8353] e0 a6 82 e0 a6 b2 e0 a6 be e0 a6 a6 e0 a7 87 e0 a6 b6 22 7d 7d 7d 7d 2c\n [8377] 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 50 65 72 75 22\n [8401] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66\n [8425] 20 50 65 72 75 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 79\n [8449] 6d 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 50 69 72 75 77 20 53 75\n [8473] 79 75 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 69 72 75 77 22 7d 2c 22 71\n [8497] 75 65 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 50 69 72 75 77 20 52\n [8521] 69 70 75 77 6c 69 6b 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 69 72 75\n [8545] 77 22 7d 2c 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n [8569] 65 70 c3 ba 62 6c 69 63 61 20 64 65 6c 20 50 65 72 c3 ba 22 2c 22 63 6f\n [8593] 6d 6d 6f 6e 22 3a 22 50 65 72 c3 ba 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n [8617] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 69 6e 67 61 70 6f 72 65 22 2c\n [8641] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20\n [8665] 53 69 6e 67 61 70 6f 72 65 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n [8689] 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75\n [8713] 62 6c 69 63 20 6f 66 20 53 69 6e 67 61 70 6f 72 65 22 2c 22 63 6f 6d 6d\n [8737] 6f 6e 22 3a 22 53 69 6e 67 61 70 6f 72 65 22 7d 2c 22 7a 68 6f 22 3a 7b\n [8761] 22 6f 66 66 69 63 69 61 6c 22 3a 22 e6 96 b0 e5 8a a0 e5 9d a1 e5 85 b1\n [8785] e5 92 8c e5 9b bd 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e6 96 b0 e5 8a a0\n [8809] e5 9d a1 22 7d 2c 22 6d 73 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n [8833] 22 52 65 70 75 62 6c 69 6b 20 53 69 6e 67 61 70 75 72 61 22 2c 22 63 6f\n [8857] 6d 6d 6f 6e 22 3a 22 53 69 6e 67 61 70 75 72 61 22 7d 2c 22 74 61 6d 22\n [8881] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e0 ae 9a e0 ae bf e0 ae 99 e0\n [8905] af 8d e0 ae 95 e0 ae aa e0 af 8d e0 ae aa e0 af 82 e0 ae b0 e0 af 8d 20\n [8929] e0 ae 95 e0 af 81 e0 ae 9f e0 ae bf e0 ae af e0 ae b0 e0 ae 9a e0 af 81\n [8953] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e0 ae 9a e0 ae bf e0 ae 99 e0 af 8d\n [8977] e0 ae 95 e0 ae aa e0 af 8d e0 ae aa e0 af 82 e0 ae b0 e0 af 8d 22 7d 7d\n [9001] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 54 75\n [9025] 72 6b 65 79 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c\n [9049] 69 63 20 6f 66 20 54 75 72 6b 65 79 22 2c 22 6e 61 74 69 76 65 4e 61 6d\n [9073] 65 22 3a 7b 22 74 75 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 54\n [9097] c3 bc 72 6b 69 79 65 20 43 75 6d 68 75 72 69 79 65 74 69 22 2c 22 63 6f\n [9121] 6d 6d 6f 6e 22 3a 22 54 c3 bc 72 6b 69 79 65 22 7d 7d 7d 7d 2c 7b 22 6e\n [9145] 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 66 67 68 61 6e 69 73\n [9169] 74 61 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 73 6c 61 6d 69 63\n [9193] 20 52 65 70 75 62 6c 69 63 20 6f 66 20 41 66 67 68 61 6e 69 73 74 61 6e\n [9217] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 70 72 73 22 3a 7b 22\n [9241] 6f 66 66 69 63 69 61 6c 22 3a 22 d8 ac d9 85 d9 87 d9 88 d8 b1 db 8c 20\n [9265] d8 a7 d8 b3 d9 84 d8 a7 d9 85 db 8c 20 d8 a7 d9 81 d8 ba d8 a7 d9 86 d8\n [9289] b3 d8 aa d8 a7 d9 86 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 a7 d9 81 d8\n [9313] ba d8 a7 d9 86 d8 b3 d8 aa d8 a7 d9 86 22 7d 2c 22 70 75 73 22 3a 7b 22\n [9337] 6f 66 66 69 63 69 61 6c 22 3a 22 d8 af 20 d8 a7 d9 81 d8 ba d8 a7 d9 86\n [9361] d8 b3 d8 aa d8 a7 d9 86 20 d8 a7 d8 b3 d9 84 d8 a7 d9 85 d9 8a 20 d8 ac\n [9385] d9 85 d9 87 d9 88 d8 b1 db 8c d8 aa 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n [9409] d8 a7 d9 81 d8 ba d8 a7 d9 86 d8 b3 d8 aa d8 a7 d9 86 22 7d 2c 22 74 75\n [9433] 6b 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4f 77 67 61 6e 79 73 74\n [9457] 61 6e 20 59 73 6c 61 6d 20 52 65 73 70 75 62 6c 69 6b 61 73 79 22 2c 22\n [9481] 63 6f 6d 6d 6f 6e 22 3a 22 4f 77 67 61 6e 79 73 74 61 6e 22 7d 7d 7d 7d\n [9505] 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 72 75 62\n [9529] 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 41 72 75 62 61 22 2c 22 6e\n [9553] 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6e 6c 64 22 3a 7b 22 6f 66 66 69\n [9577] 63 69 61 6c 22 3a 22 41 72 75 62 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n [9601] 41 72 75 62 61 22 7d 2c 22 70 61 70 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n [9625] 22 3a 22 41 72 75 62 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 41 72 75 62\n [9649] 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22\n [9673] 3a 22 43 6f 6f 6b 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61\n [9697] 6c 22 3a 22 43 6f 6f 6b 20 49 73 6c 61 6e 64 73 22 2c 22 6e 61 74 69 76\n [9721] 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n [9745] 22 3a 22 43 6f 6f 6b 20 49 73 6c 61 6e 64 73 22 2c 22 63 6f 6d 6d 6f 6e\n [9769] 22 3a 22 43 6f 6f 6b 20 49 73 6c 61 6e 64 73 22 7d 2c 22 72 61 72 22 3a\n [9793] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b c5 ab 6b 69 20 27 c4 80 69 72\n [9817] 61 6e 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4b c5 ab 6b 69 20 27 c4 80\n [9841] 69 72 61 6e 69 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d\n [9865] 6d 6f 6e 22 3a 22 55 6e 69 74 65 64 20 4b 69 6e 67 64 6f 6d 22 2c 22 6f\n [9889] 66 66 69 63 69 61 6c 22 3a 22 55 6e 69 74 65 64 20 4b 69 6e 67 64 6f 6d\n [9913] 20 6f 66 20 47 72 65 61 74 20 42 72 69 74 61 69 6e 20 61 6e 64 20 4e 6f\n [9937] 72 74 68 65 72 6e 20 49 72 65 6c 61 6e 64 22 2c 22 6e 61 74 69 76 65 4e\n [9961] 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n [9985] 22 55 6e 69 74 65 64 20 4b 69 6e 67 64 6f 6d 20 6f 66 20 47 72 65 61 74\n[10009] 20 42 72 69 74 61 69 6e 20 61 6e 64 20 4e 6f 72 74 68 65 72 6e 20 49 72\n[10033] 65 6c 61 6e 64 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 55 6e 69 74 65 64 20\n[10057] 4b 69 6e 67 64 6f 6d 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[10081] 6f 6d 6d 6f 6e 22 3a 22 5a 61 6d 62 69 61 22 2c 22 6f 66 66 69 63 69 61\n[10105] 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 61 6d 62 69 61 22 2c\n[10129] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66\n[10153] 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 61 6d\n[10177] 62 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 61 6d 62 69 61 22 7d 7d\n[10201] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 46 69\n[10225] 6e 6c 61 6e 64 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62\n[10249] 6c 69 63 20 6f 66 20 46 69 6e 6c 61 6e 64 22 2c 22 6e 61 74 69 76 65 4e\n[10273] 61 6d 65 22 3a 7b 22 66 69 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[10297] 22 53 75 6f 6d 65 6e 20 74 61 73 61 76 61 6c 74 61 22 2c 22 63 6f 6d 6d\n[10321] 6f 6e 22 3a 22 53 75 6f 6d 69 22 7d 2c 22 73 77 65 22 3a 7b 22 6f 66 66\n[10345] 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 6b 65 6e 20 46 69 6e 6c 61\n[10369] 6e 64 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 46 69 6e 6c 61 6e 64 22 7d 7d\n[10393] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 69\n[10417] 67 65 72 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69\n[10441] 63 20 6f 66 20 4e 69 67 65 72 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[10465] 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 c3 a9\n[10489] 70 75 62 6c 69 71 75 65 20 64 75 20 4e 69 67 65 72 22 2c 22 63 6f 6d 6d\n[10513] 6f 6e 22 3a 22 4e 69 67 65 72 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[10537] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 43 68 72 69 73 74 6d 61 73 20 49 73 6c\n[10561] 61 6e 64 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 54 65 72 72 69 74 6f\n[10585] 72 79 20 6f 66 20 43 68 72 69 73 74 6d 61 73 20 49 73 6c 61 6e 64 22 2c\n[10609] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66\n[10633] 66 69 63 69 61 6c 22 3a 22 54 65 72 72 69 74 6f 72 79 20 6f 66 20 43 68\n[10657] 72 69 73 74 6d 61 73 20 49 73 6c 61 6e 64 22 2c 22 63 6f 6d 6d 6f 6e 22\n[10681] 3a 22 43 68 72 69 73 74 6d 61 73 20 49 73 6c 61 6e 64 22 7d 7d 7d 7d 2c\n[10705] 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 54 6f 6b 65 6c\n[10729] 61 75 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 54 6f 6b 65 6c 61 75 22\n[10753] 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f\n[10777] 66 66 69 63 69 61 6c 22 3a 22 54 6f 6b 65 6c 61 75 22 2c 22 63 6f 6d 6d\n[10801] 6f 6e 22 3a 22 54 6f 6b 65 6c 61 75 22 7d 2c 22 73 6d 6f 22 3a 7b 22 6f\n[10825] 66 66 69 63 69 61 6c 22 3a 22 54 6f 6b 65 6c 61 75 22 2c 22 63 6f 6d 6d\n[10849] 6f 6e 22 3a 22 54 6f 6b 65 6c 61 75 22 7d 2c 22 74 6b 6c 22 3a 7b 22 6f\n[10873] 66 66 69 63 69 61 6c 22 3a 22 54 6f 6b 65 6c 61 75 22 2c 22 63 6f 6d 6d\n[10897] 6f 6e 22 3a 22 54 6f 6b 65 6c 61 75 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n[10921] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 69 6e 65 61 2d 42 69 73 73\n[10945] 61 75 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63\n[10969] 20 6f 66 20 47 75 69 6e 65 61 2d 42 69 73 73 61 75 22 2c 22 6e 61 74 69\n[10993] 76 65 4e 61 6d 65 22 3a 7b 22 70 6f 72 22 3a 7b 22 6f 66 66 69 63 69 61\n[11017] 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 61 20 47 75 69 6e c3 a9\n[11041] 2d 42 69 73 73 61 75 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 69 6e c3\n[11065] a9 2d 42 69 73 73 61 75 22 7d 2c 22 70 6f 76 22 3a 7b 22 6f 66 66 69 63\n[11089] 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 61 20 47 75 69 6e\n[11113] c3 a9 2d 42 69 73 73 61 75 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 69\n[11137] 6e c3 a9 2d 42 69 73 73 61 75 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[11161] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 7a 65 72 62 61 69 6a 61 6e 22 2c 22\n[11185] 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 41\n[11209] 7a 65 72 62 61 69 6a 61 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[11233] 7b 22 61 7a 65 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 41 7a c9 99\n[11257] 72 62 61 79 63 61 6e 20 52 65 73 70 75 62 6c 69 6b 61 73 c4 b1 22 2c 22\n[11281] 63 6f 6d 6d 6f 6e 22 3a 22 41 7a c9 99 72 62 61 79 63 61 6e 22 7d 7d 7d\n[11305] 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 52 c3 a9\n[11329] 75 6e 69 6f 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 c3 a9 75 6e\n[11353] 69 6f 6e 20 49 73 6c 61 6e 64 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[11377] 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 6c 65\n[11401] 20 64 65 20 6c 61 20 52 c3 a9 75 6e 69 6f 6e 22 2c 22 63 6f 6d 6d 6f 6e\n[11425] 22 3a 22 4c 61 20 52 c3 a9 75 6e 69 6f 6e 22 7d 7d 7d 7d 2c 7b 22 6e 61\n[11449] 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 44 6a 69 62 6f 75 74 69 22\n[11473] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66\n[11497] 20 44 6a 69 62 6f 75 74 69 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[11521] 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 ac d9 85\n[11545] d9 87 d9 88 d8 b1 d9 8a d8 a9 20 d8 ac d9 8a d8 a8 d9 88 d8 aa d9 8a 22\n[11569] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 ac d9 8a d8 a8 d9 88 d8 aa d9 8a e2\n[11593] 80 8e 22 7d 2c 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[11617] 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 65 20 44 6a 69 62 6f 75 74 69 22\n[11641] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 44 6a 69 62 6f 75 74 69 22 7d 7d 7d 7d\n[11665] 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 6f 72 74\n[11689] 68 20 4b 6f 72 65 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 44 65 6d\n[11713] 6f 63 72 61 74 69 63 20 50 65 6f 70 6c 65 27 73 20 52 65 70 75 62 6c 69\n[11737] 63 20 6f 66 20 4b 6f 72 65 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[11761] 3a 7b 22 6b 6f 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 ec a1 b0\n[11785] ec 84 a0 eb af bc ec a3 bc ec a3 bc ec 9d 98 ec 9d b8 eb af bc ea b3 b5\n[11809] ed 99 94 ea b5 ad 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 ec a1 b0 ec 84 a0\n[11833] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[11857] 22 4d 61 75 72 69 74 69 75 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[11881] 52 65 70 75 62 6c 69 63 20 6f 66 20 4d 61 75 72 69 74 69 75 73 22 2c 22\n[11905] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66\n[11929] 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4d 61 75 72\n[11953] 69 74 69 75 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 75 72 69 74 69\n[11977] 75 73 22 7d 2c 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[12001] 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 65 20 4d 61 75 72 69 63 65 22 2c\n[12025] 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 75 72 69 63 65 22 7d 2c 22 6d 66 65\n[12049] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 6b 20\n[12073] 4d 6f 72 69 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 6f 72 69 73 22 7d\n[12097] 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4d\n[12121] 6f 6e 74 73 65 72 72 61 74 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4d\n[12145] 6f 6e 74 73 65 72 72 61 74 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[12169] 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4d 6f 6e 74\n[12193] 73 65 72 72 61 74 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 6f 6e 74 73 65\n[12217] 72 72 61 74 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[12241] 6f 6e 22 3a 22 55 6e 69 74 65 64 20 53 74 61 74 65 73 20 56 69 72 67 69\n[12265] 6e 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 56\n[12289] 69 72 67 69 6e 20 49 73 6c 61 6e 64 73 20 6f 66 20 74 68 65 20 55 6e 69\n[12313] 74 65 64 20 53 74 61 74 65 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[12337] 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 56 69 72\n[12361] 67 69 6e 20 49 73 6c 61 6e 64 73 20 6f 66 20 74 68 65 20 55 6e 69 74 65\n[12385] 64 20 53 74 61 74 65 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 55 6e 69 74\n[12409] 65 64 20 53 74 61 74 65 73 20 56 69 72 67 69 6e 20 49 73 6c 61 6e 64 73\n[12433] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[12457] 22 43 6f 6c 6f 6d 62 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[12481] 65 70 75 62 6c 69 63 20 6f 66 20 43 6f 6c 6f 6d 62 69 61 22 2c 22 6e 61\n[12505] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63\n[12529] 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 65 20 43 6f 6c 6f\n[12553] 6d 62 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 43 6f 6c 6f 6d 62 69 61\n[12577] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[12601] 22 47 72 65 65 63 65 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 48 65 6c\n[12625] 6c 65 6e 69 63 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e\n[12649] 61 6d 65 22 3a 7b 22 65 6c 6c 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[12673] 22 ce 95 ce bb ce bb ce b7 ce bd ce b9 ce ba ce ae 20 ce 94 ce b7 ce bc\n[12697] ce bf ce ba cf 81 ce b1 cf 84 ce af ce b1 22 2c 22 63 6f 6d 6d 6f 6e 22\n[12721] 3a 22 ce 95 ce bb ce bb ce ac ce b4 ce b1 22 7d 7d 7d 7d 2c 7b 22 6e 61\n[12745] 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 43 72 6f 61 74 69 61 22 2c\n[12769] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20\n[12793] 43 72 6f 61 74 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[12817] 68 72 76 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c\n[12841] 69 6b 61 20 48 72 76 61 74 73 6b 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[12865] 48 72 76 61 74 73 6b 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[12889] 63 6f 6d 6d 6f 6e 22 3a 22 4d 6f 72 6f 63 63 6f 22 2c 22 6f 66 66 69 63\n[12913] 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 4d 6f 72 6f 63 63 6f\n[12937] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22 3a 7b 22\n[12961] 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84 d9 85 d9 85 d9 84 d9 83 d8\n[12985] a9 20 d8 a7 d9 84 d9 85 d8 ba d8 b1 d8 a8 d9 8a d8 a9 22 2c 22 63 6f 6d\n[13009] 6d 6f 6e 22 3a 22 d8 a7 d9 84 d9 85 d8 ba d8 b1 d8 a8 22 7d 2c 22 62 65\n[13033] 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e2 b5 9c e2 b4 b0 e2 b4\n[13057] b3 e2 b5 8d e2 b4 b7 e2 b5 89 e2 b5 9c 20 e2 b5 8f 20 e2 b5 8d e2 b5 8e\n[13081] e2 b5 96 e2 b5 94 e2 b5 89 e2 b4 b1 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[13105] e2 b5 8d e2 b5 8e e2 b4 b0 e2 b5 96 e2 b5 94 e2 b5 89 e2 b4 b1 22 7d 7d\n[13129] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 6c\n[13153] 67 65 72 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 50 65 6f 70 6c\n[13177] 65 27 73 20 44 65 6d 6f 63 72 61 74 69 63 20 52 65 70 75 62 6c 69 63 20\n[13201] 6f 66 20 41 6c 67 65 72 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[13225] 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9\n[13249] 84 d8 ac d9 85 d9 87 d9 88 d8 b1 d9 8a d8 a9 20 d8 a7 d9 84 d8 af d9 8a\n[13273] d9 85 d9 82 d8 b1 d8 a7 d8 b7 d9 8a d8 a9 20 d8 a7 d9 84 d8 b4 d8 b9 d8\n[13297] a8 d9 8a d8 a9 20 d8 a7 d9 84 d8 ac d8 b2 d8 a7 d8 a6 d8 b1 d9 8a d8 a9\n[13321] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 a7 d9 84 d8 ac d8 b2 d8 a7 d8 a6\n[13345] d8 b1 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[13369] 22 3a 22 41 6e 74 61 72 63 74 69 63 61 22 2c 22 6f 66 66 69 63 69 61 6c\n[13393] 22 3a 22 41 6e 74 61 72 63 74 69 63 61 22 2c 22 6e 61 74 69 76 65 4e 61\n[13417] 6d 65 22 3a 7b 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n[13441] 6e 22 3a 22 4e 65 74 68 65 72 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69\n[13465] 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 74 68 65 20 4e 65 74 68\n[13489] 65 72 6c 61 6e 64 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[13513] 6e 6c 64 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 6f 6e 69 6e 6b\n[13537] 72 69 6a 6b 20 64 65 72 20 4e 65 64 65 72 6c 61 6e 64 65 6e 22 2c 22 63\n[13561] 6f 6d 6d 6f 6e 22 3a 22 4e 65 64 65 72 6c 61 6e 64 22 7d 7d 7d 7d 2c 7b\n[13585] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 75 64 61 6e 22\n[13609] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66\n[13633] 20 74 68 65 20 53 75 64 61 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[13657] 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 ac d9\n[13681] 85 d9 87 d9 88 d8 b1 d9 8a d8 a9 20 d8 a7 d9 84 d8 b3 d9 88 d8 af d8 a7\n[13705] d9 86 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 a7 d9 84 d8 b3 d9 88 d8 af\n[13729] d8 a7 d9 86 22 7d 2c 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[13753] 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 74 68 65 20 53 75 64 61 6e 22\n[13777] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 75 64 61 6e 22 7d 7d 7d 7d 2c 7b 22\n[13801] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 46 69 6a 69 22 2c 22\n[13825] 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 46\n[13849] 69 6a 69 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22\n[13873] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f\n[13897] 66 20 46 69 6a 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 46 69 6a 69 22 7d\n[13921] 2c 22 66 69 6a 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4d 61 74 61\n[13945] 6e 69 74 75 20 54 75 67 61 6c 61 6c 61 20 6f 20 56 69 74 69 22 2c 22 63\n[13969] 6f 6d 6d 6f 6e 22 3a 22 56 69 74 69 22 7d 2c 22 68 69 66 22 3a 7b 22 6f\n[13993] 66 66 69 63 69 61 6c 22 3a 22 e0 a4 b0 e0 a4 bf e0 a4 aa e0 a4 ac e0 a5\n[14017] 8d e0 a4 b2 e0 a4 bf e0 a4 95 20 e0 a4 91 e0 a4 ab 20 e0 a4 ab e0 a5 80\n[14041] e0 a4 9c e0 a5 80 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e0 a4 ab e0 a4 bf\n[14065] e0 a4 9c e0 a5 80 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f\n[14089] 6d 6d 6f 6e 22 3a 22 4c 69 65 63 68 74 65 6e 73 74 65 69 6e 22 2c 22 6f\n[14113] 66 66 69 63 69 61 6c 22 3a 22 50 72 69 6e 63 69 70 61 6c 69 74 79 20 6f\n[14137] 66 20 4c 69 65 63 68 74 65 6e 73 74 65 69 6e 22 2c 22 6e 61 74 69 76 65\n[14161] 4e 61 6d 65 22 3a 7b 22 64 65 75 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[14185] 3a 22 46 c3 bc 72 73 74 65 6e 74 75 6d 20 4c 69 65 63 68 74 65 6e 73 74\n[14209] 65 69 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 69 65 63 68 74 65 6e 73\n[14233] 74 65 69 6e 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[14257] 6f 6e 22 3a 22 4e 65 70 61 6c 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[14281] 46 65 64 65 72 61 6c 20 44 65 6d 6f 63 72 61 74 69 63 20 52 65 70 75 62\n[14305] 6c 69 63 20 6f 66 20 4e 65 70 61 6c 22 2c 22 6e 61 74 69 76 65 4e 61 6d\n[14329] 65 22 3a 7b 22 6e 65 70 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e0\n[14353] a4 a8 e0 a5 87 e0 a4 aa e0 a4 be e0 a4 b2 20 e0 a4 b8 e0 a4 82 e0 a4 98\n[14377] e0 a5 80 e0 a4 af 20 e0 a4 b2 e0 a5 8b e0 a4 95 e0 a4 a4 e0 a4 be e0 a4\n[14401] a8 e0 a5 8d e0 a4 a4 e0 a5 8d e0 a4 b0 e0 a4 bf e0 a4 95 20 e0 a4 97 e0\n[14425] a4 a3 e0 a4 a4 e0 a4 a8 e0 a5 8d e0 a4 a4 e0 a5 8d e0 a4 b0 22 2c 22 63\n[14449] 6f 6d 6d 6f 6e 22 3a 22 e0 a4 a8 e0 a5 87 e0 a4 aa e0 a4 be e0 a4 b2 22\n[14473] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n[14497] 50 75 65 72 74 6f 20 52 69 63 6f 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[14521] 22 43 6f 6d 6d 6f 6e 77 65 61 6c 74 68 20 6f 66 20 50 75 65 72 74 6f 20\n[14545] 52 69 63 6f 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67\n[14569] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 6d 6d 6f 6e 77 65 61\n[14593] 6c 74 68 20 6f 66 20 50 75 65 72 74 6f 20 52 69 63 6f 22 2c 22 63 6f 6d\n[14617] 6d 6f 6e 22 3a 22 50 75 65 72 74 6f 20 52 69 63 6f 22 7d 2c 22 73 70 61\n[14641] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 45 73 74 61 64 6f 20 4c 69\n[14665] 62 72 65 20 41 73 6f 63 69 61 64 6f 20 64 65 20 50 75 65 72 74 6f 20 52\n[14689] 69 63 6f 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 75 65 72 74 6f 20 52 69\n[14713] 63 6f 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[14737] 22 3a 22 47 65 6f 72 67 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[14761] 47 65 6f 72 67 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[14785] 6b 61 74 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e1 83 a1 e1 83 90\n[14809] e1 83 a5 e1 83 90 e1 83 a0 e1 83 97 e1 83 95 e1 83 94 e1 83 9a e1 83 9d\n[14833] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e1 83 a1 e1 83 90 e1 83 a5 e1 83 90\n[14857] e1 83 a0 e1 83 97 e1 83 95 e1 83 94 e1 83 9a e1 83 9d 22 7d 7d 7d 7d 2c\n[14881] 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 6b 69 73\n[14905] 74 61 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 73 6c 61 6d 69 63\n[14929] 20 52 65 70 75 62 6c 69 63 20 6f 66 20 50 61 6b 69 73 74 61 6e 22 2c 22\n[14953] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66\n[14977] 69 63 69 61 6c 22 3a 22 49 73 6c 61 6d 69 63 20 52 65 70 75 62 6c 69 63\n[15001] 20 6f 66 20 50 61 6b 69 73 74 61 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[15025] 50 61 6b 69 73 74 61 6e 22 7d 2c 22 75 72 64 22 3a 7b 22 6f 66 66 69 63\n[15049] 69 61 6c 22 3a 22 d8 a7 d8 b3 d9 84 d8 a7 d9 85 db 8c 20 d8 ac d9 85 db\n[15073] 81 d9 88 d8 b1 db 8c db 82 20 d9 be d8 a7 d9 83 d8 b3 d8 aa d8 a7 d9 86\n[15097] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d9 be d8 a7 d9 83 d8 b3 d8 aa d8 a7\n[15121] d9 86 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[15145] 22 3a 22 4d 6f 6e 61 63 6f 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 50\n[15169] 72 69 6e 63 69 70 61 6c 69 74 79 20 6f 66 20 4d 6f 6e 61 63 6f 22 2c 22\n[15193] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66\n[15217] 69 63 69 61 6c 22 3a 22 50 72 69 6e 63 69 70 61 75 74 c3 a9 20 64 65 20\n[15241] 4d 6f 6e 61 63 6f 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 6f 6e 61 63 6f\n[15265] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[15289] 22 42 6f 74 73 77 61 6e 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[15313] 65 70 75 62 6c 69 63 20 6f 66 20 42 6f 74 73 77 61 6e 61 22 2c 22 6e 61\n[15337] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63\n[15361] 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 42 6f 74 73 77 61\n[15385] 6e 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 6f 74 73 77 61 6e 61 22 7d\n[15409] 2c 22 74 73 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4c 65 66 61\n[15433] 74 73 68 65 20 6c 61 20 42 6f 74 73 77 61 6e 61 22 2c 22 63 6f 6d 6d 6f\n[15457] 6e 22 3a 22 42 6f 74 73 77 61 6e 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n[15481] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 65 62 61 6e 6f 6e 22 2c 22 6f\n[15505] 66 66 69 63 69 61 6c 22 3a 22 4c 65 62 61 6e 65 73 65 20 52 65 70 75 62\n[15529] 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22\n[15553] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84 d8 ac d9 85 d9 87\n[15577] d9 88 d8 b1 d9 8a d8 a9 20 d8 a7 d9 84 d9 84 d8 a8 d9 86 d8 a7 d9 86 d9\n[15601] 8a d8 a9 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d9 84 d8 a8 d9 86 d8 a7 d9\n[15625] 86 22 7d 2c 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[15649] c3 a9 70 75 62 6c 69 71 75 65 20 6c 69 62 61 6e 61 69 73 65 22 2c 22 63\n[15673] 6f 6d 6d 6f 6e 22 3a 22 4c 69 62 61 6e 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d\n[15697] 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 70 75 61 20 4e 65 77 20\n[15721] 47 75 69 6e 65 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 6e 64 65\n[15745] 70 65 6e 64 65 6e 74 20 53 74 61 74 65 20 6f 66 20 50 61 70 75 61 20 4e\n[15769] 65 77 20 47 75 69 6e 65 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[15793] 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 6e 64 65\n[15817] 70 65 6e 64 65 6e 74 20 53 74 61 74 65 20 6f 66 20 50 61 70 75 61 20 4e\n[15841] 65 77 20 47 75 69 6e 65 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 70\n[15865] 75 61 20 4e 65 77 20 47 75 69 6e 65 61 22 7d 2c 22 68 6d 6f 22 3a 7b 22\n[15889] 6f 66 66 69 63 69 61 6c 22 3a 22 49 6e 64 65 70 65 6e 64 65 6e 20 53 74\n[15913] 65 74 20 62 69 6c 6f 6e 67 20 50 61 70 75 61 20 4e 69 75 67 69 6e 69 22\n[15937] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 70 75 61 20 4e 69 75 20 47 69 6e\n[15961] 69 22 7d 2c 22 74 70 69 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 49\n[15985] 6e 64 65 70 65 6e 64 65 6e 20 53 74 65 74 20 62 69 6c 6f 6e 67 20 50 61\n[16009] 70 75 61 20 4e 69 75 67 69 6e 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50\n[16033] 61 70 75 61 20 4e 69 75 67 69 6e 69 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n[16057] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 79 6f 74 74 65 22 2c 22 6f\n[16081] 66 66 69 63 69 61 6c 22 3a 22 44 65 70 61 72 74 6d 65 6e 74 20 6f 66 20\n[16105] 4d 61 79 6f 74 74 65 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[16129] 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 44 c3 a9 70 61 72\n[16153] 74 65 6d 65 6e 74 20 64 65 20 4d 61 79 6f 74 74 65 22 2c 22 63 6f 6d 6d\n[16177] 6f 6e 22 3a 22 4d 61 79 6f 74 74 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n[16201] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 44 6f 6d 69 6e 69 63 61 6e 20 52\n[16225] 65 70 75 62 6c 69 63 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 44 6f 6d\n[16249] 69 6e 69 63 61 6e 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65\n[16273] 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[16297] 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 44 6f 6d 69 6e 69 63 61 6e 61 22\n[16321] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 44 6f\n[16345] 6d 69 6e 69 63 61 6e 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[16369] 63 6f 6d 6d 6f 6e 22 3a 22 4e 6f 72 66 6f 6c 6b 20 49 73 6c 61 6e 64 22\n[16393] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 54 65 72 72 69 74 6f 72 79 20 6f\n[16417] 66 20 4e 6f 72 66 6f 6c 6b 20 49 73 6c 61 6e 64 22 2c 22 6e 61 74 69 76\n[16441] 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[16465] 22 3a 22 54 65 72 72 69 74 6f 72 79 20 6f 66 20 4e 6f 72 66 6f 6c 6b 20\n[16489] 49 73 6c 61 6e 64 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 6f 72 66 6f 6c\n[16513] 6b 20 49 73 6c 61 6e 64 22 7d 2c 22 70 69 68 22 3a 7b 22 6f 66 66 69 63\n[16537] 69 61 6c 22 3a 22 54 65 72 61 74 72 69 20 6f 66 20 4e 6f 72 66 27 6b 20\n[16561] 41 69 6c 65 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 6f 72 66 27 6b 20\n[16585] 41 69 6c 65 6e 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d\n[16609] 6d 6f 6e 22 3a 22 42 6f 75 76 65 74 20 49 73 6c 61 6e 64 22 2c 22 6f 66\n[16633] 66 69 63 69 61 6c 22 3a 22 42 6f 75 76 65 74 20 49 73 6c 61 6e 64 22 2c\n[16657] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6e 6f 72 22 3a 7b 22 6f 66\n[16681] 66 69 63 69 61 6c 22 3a 22 42 6f 75 76 65 74 c3 b8 79 61 22 2c 22 63 6f\n[16705] 6d 6d 6f 6e 22 3a 22 42 6f 75 76 65 74 c3 b8 79 61 22 7d 7d 7d 7d 2c 7b\n[16729] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 51 61 74 61 72 22\n[16753] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 74 61 74 65 20 6f 66 20 51 61\n[16777] 74 61 72 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22\n[16801] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 af d9 88 d9 84 d8 a9 20 d9\n[16825] 82 d8 b7 d8 b1 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d9 82 d8 b7 d8 b1 22\n[16849] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n[16873] 4d 61 64 61 67 61 73 63 61 72 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[16897] 52 65 70 75 62 6c 69 63 20 6f 66 20 4d 61 64 61 67 61 73 63 61 72 22 2c\n[16921] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66\n[16945] 66 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 65 20\n[16969] 4d 61 64 61 67 61 73 63 61 72 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61\n[16993] 64 61 67 61 73 63 61 72 22 7d 2c 22 6d 6c 67 22 3a 7b 22 6f 66 66 69 63\n[17017] 69 61 6c 22 3a 22 52 65 70 6f 62 6c 69 6b 61 6e 27 69 20 4d 61 64 61 67\n[17041] 61 73 69 6b 61 72 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 64 61 67\n[17065] 61 73 69 6b 61 72 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[17089] 6f 6d 6d 6f 6e 22 3a 22 49 6e 64 69 61 22 2c 22 6f 66 66 69 63 69 61 6c\n[17113] 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 49 6e 64 69 61 22 2c 22 6e\n[17137] 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69\n[17161] 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 49 6e 64 69 61\n[17185] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 49 6e 64 69 61 22 7d 2c 22 68 69 6e\n[17209] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e0 a4 ad e0 a4 be e0 a4 b0\n[17233] e0 a4 a4 20 e0 a4 97 e0 a4 a3 e0 a4 b0 e0 a4 be e0 a4 9c e0 a5 8d e0 a4\n[17257] af 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e0 a4 ad e0 a4 be e0 a4 b0 e0 a4\n[17281] a4 22 7d 2c 22 74 61 6d 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e0\n[17305] ae 87 e0 ae a8 e0 af 8d e0 ae a4 e0 ae bf e0 ae af e0 ae 95 e0 af 8d 20\n[17329] e0 ae 95 e0 af 81 e0 ae 9f e0 ae bf e0 ae af e0 ae b0 e0 ae 9a e0 af 81\n[17353] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e0 ae 87 e0 ae a8 e0 af 8d e0 ae a4\n[17377] e0 ae bf e0 ae af e0 ae be 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[17401] 22 63 6f 6d 6d 6f 6e 22 3a 22 53 79 72 69 61 22 2c 22 6f 66 66 69 63 69\n[17425] 61 6c 22 3a 22 53 79 72 69 61 6e 20 41 72 61 62 20 52 65 70 75 62 6c 69\n[17449] 63 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22 3a 7b\n[17473] 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84 d8 ac d9 85 d9 87 d9 88\n[17497] d8 b1 d9 8a d8 a9 20 d8 a7 d9 84 d8 b9 d8 b1 d8 a8 d9 8a d8 a9 20 d8 a7\n[17521] d9 84 d8 b3 d9 88 d8 b1 d9 8a d8 a9 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[17545] d8 b3 d9 88 d8 b1 d9 8a d8 a7 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[17569] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 6f 6e 74 65 6e 65 67 72 6f 22 2c 22\n[17593] 6f 66 66 69 63 69 61 6c 22 3a 22 4d 6f 6e 74 65 6e 65 67 72 6f 22 2c 22\n[17617] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 63 6e 72 22 3a 7b 22 6f 66 66\n[17641] 69 63 69 61 6c 22 3a 22 d0 a6 d1 80 d0 bd d0 b0 20 d0 93 d0 be d1 80 d0\n[17665] b0 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 a6 d1 80 d0 bd d0 b0 20 d0 93\n[17689] d0 be d1 80 d0 b0 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f\n[17713] 6d 6d 6f 6e 22 3a 22 45 73 77 61 74 69 6e 69 22 2c 22 6f 66 66 69 63 69\n[17737] 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 45 73 77 61 74 69 6e 69\n[17761] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22\n[17785] 6f 66 66 69 63 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 45 73\n[17809] 77 61 74 69 6e 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 45 73 77 61 74 69\n[17833] 6e 69 22 7d 2c 22 73 73 77 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[17857] 55 6d 62 75 73 6f 20 77 65 53 77 61 74 69 6e 69 22 2c 22 63 6f 6d 6d 6f\n[17881] 6e 22 3a 22 65 53 77 61 74 69 6e 69 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n[17905] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 72 61 67 75 61 79 22 2c 22\n[17929] 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 50\n[17953] 61 72 61 67 75 61 79 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[17977] 67 72 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 54 65 74 c3 a3 20\n[18001] 50 61 72 61 67 75 c3 a1 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 72\n[18025] 61 67 75 c3 a1 69 22 7d 2c 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61\n[18049] 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 65 20 50 61 72 61 67 75\n[18073] 61 79 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 72 61 67 75 61 79 22 7d\n[18097] 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 45\n[18121] 6c 20 53 61 6c 76 61 64 6f 72 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[18145] 52 65 70 75 62 6c 69 63 20 6f 66 20 45 6c 20 53 61 6c 76 61 64 6f 72 22\n[18169] 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f\n[18193] 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 65 20\n[18217] 45 6c 20 53 61 6c 76 61 64 6f 72 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 45\n[18241] 6c 20 53 61 6c 76 61 64 6f 72 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[18265] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 55 6b 72 61 69 6e 65 22 2c 22 6f 66 66\n[18289] 69 63 69 61 6c 22 3a 22 55 6b 72 61 69 6e 65 22 2c 22 6e 61 74 69 76 65\n[18313] 4e 61 6d 65 22 3a 7b 22 75 6b 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[18337] 3a 22 d0 a3 d0 ba d1 80 d0 b0 d1 97 d0 bd d0 b0 22 2c 22 63 6f 6d 6d 6f\n[18361] 6e 22 3a 22 d0 a3 d0 ba d1 80 d0 b0 d1 97 d0 bd d0 b0 22 7d 7d 7d 7d 2c\n[18385] 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 49 73 6c 65 20\n[18409] 6f 66 20 4d 61 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 73 6c 65\n[18433] 20 6f 66 20 4d 61 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[18457] 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 73 6c 65 20 6f\n[18481] 66 20 4d 61 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 49 73 6c 65 20 6f 66\n[18505] 20 4d 61 6e 22 7d 2c 22 67 6c 76 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[18529] 3a 22 45 6c 6c 61 6e 20 56 61 6e 6e 69 6e 20 6f 72 20 4d 61 6e 6e 69 6e\n[18553] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 6e 6e 69 6e 22 7d 7d 7d 7d 2c\n[18577] 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 61 6d 69 62\n[18601] 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63\n[18625] 20 6f 66 20 4e 61 6d 69 62 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65\n[18649] 22 3a 7b 22 61 66 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65\n[18673] 70 75 62 6c 69 65 6b 20 76 61 6e 20 4e 61 6d 69 62 69 c3 ab 22 2c 22 63\n[18697] 6f 6d 6d 6f 6e 22 3a 22 4e 61 6d 69 62 69 c3 ab 22 7d 2c 22 64 65 75 22\n[18721] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 6b 20 4e\n[18745] 61 6d 69 62 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 61 6d 69 62 69\n[18769] 61 22 7d 2c 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[18793] 65 70 75 62 6c 69 63 20 6f 66 20 4e 61 6d 69 62 69 61 22 2c 22 63 6f 6d\n[18817] 6d 6f 6e 22 3a 22 4e 61 6d 69 62 69 61 22 7d 2c 22 68 65 72 22 3a 7b 22\n[18841] 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4e\n[18865] 61 6d 69 62 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 61 6d 69 62 69\n[18889] 61 22 7d 2c 22 68 67 6d 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[18913] 65 70 75 62 6c 69 63 20 6f 66 20 4e 61 6d 69 62 69 61 22 2c 22 63 6f 6d\n[18937] 6d 6f 6e 22 3a 22 4e 61 6d 69 62 69 61 22 7d 2c 22 6b 77 6e 22 3a 7b 22\n[18961] 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4e\n[18985] 61 6d 69 62 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 61 6d 69 62 69\n[19009] 61 22 7d 2c 22 6c 6f 7a 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[19033] 65 70 75 62 6c 69 63 20 6f 66 20 4e 61 6d 69 62 69 61 22 2c 22 63 6f 6d\n[19057] 6d 6f 6e 22 3a 22 4e 61 6d 69 62 69 61 22 7d 2c 22 6e 64 6f 22 3a 7b 22\n[19081] 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4e\n[19105] 61 6d 69 62 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 61 6d 69 62 69\n[19129] 61 22 7d 2c 22 74 73 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4c\n[19153] 65 66 61 74 73 68 65 20 6c 61 20 4e 61 6d 69 62 69 61 22 2c 22 63 6f 6d\n[19177] 6d 6f 6e 22 3a 22 4e 61 6d 69 62 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d\n[19201] 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 55 6e 69 74 65 64 20 41 72 61\n[19225] 62 20 45 6d 69 72 61 74 65 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[19249] 55 6e 69 74 65 64 20 41 72 61 62 20 45 6d 69 72 61 74 65 73 22 2c 22 6e\n[19273] 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69\n[19297] 63 69 61 6c 22 3a 22 d8 a7 d9 84 d8 a5 d9 85 d8 a7 d8 b1 d8 a7 d8 aa 20\n[19321] d8 a7 d9 84 d8 b9 d8 b1 d8 a8 d9 8a d8 a9 20 d8 a7 d9 84 d9 85 d8 aa d8\n[19345] ad d8 af d8 a9 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 af d9 88 d9 84 d8\n[19369] a9 20 d8 a7 d9 84 d8 a5 d9 85 d8 a7 d8 b1 d8 a7 d8 aa 20 d8 a7 d9 84 d8\n[19393] b9 d8 b1 d8 a8 d9 8a d8 a9 20 d8 a7 d9 84 d9 85 d8 aa d8 ad d8 af d8 a9\n[19417] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[19441] 22 42 75 6c 67 61 72 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[19465] 65 70 75 62 6c 69 63 20 6f 66 20 42 75 6c 67 61 72 69 61 22 2c 22 6e 61\n[19489] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 62 75 6c 22 3a 7b 22 6f 66 66 69 63\n[19513] 69 61 6c 22 3a 22 d0 a0 d0 b5 d0 bf d1 83 d0 b1 d0 bb d0 b8 d0 ba d0 b0\n[19537] 20 d0 91 d1 8a d0 bb d0 b3 d0 b0 d1 80 d0 b8 d1 8f 22 2c 22 63 6f 6d 6d\n[19561] 6f 6e 22 3a 22 d0 91 d1 8a d0 bb d0 b3 d0 b0 d1 80 d0 b8 d1 8f 22 7d 7d\n[19585] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 47 72\n[19609] 65 65 6e 6c 61 6e 64 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 72 65\n[19633] 65 6e 6c 61 6e 64 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6b\n[19657] 61 6c 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 61 6c 61 61 6c 6c\n[19681] 69 74 20 4e 75 6e 61 61 74 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4b 61 6c\n[19705] 61 61 6c 6c 69 74 20 4e 75 6e 61 61 74 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d\n[19729] 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 47 65 72 6d 61 6e 79 22 2c 22\n[19753] 6f 66 66 69 63 69 61 6c 22 3a 22 46 65 64 65 72 61 6c 20 52 65 70 75 62\n[19777] 6c 69 63 20 6f 66 20 47 65 72 6d 61 6e 79 22 2c 22 6e 61 74 69 76 65 4e\n[19801] 61 6d 65 22 3a 7b 22 64 65 75 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[19825] 22 42 75 6e 64 65 73 72 65 70 75 62 6c 69 6b 20 44 65 75 74 73 63 68 6c\n[19849] 61 6e 64 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 44 65 75 74 73 63 68 6c 61\n[19873] 6e 64 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[19897] 22 3a 22 43 61 6d 62 6f 64 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[19921] 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 43 61 6d 62 6f 64 69 61 22 2c 22 6e\n[19945] 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6b 68 6d 22 3a 7b 22 6f 66 66 69\n[19969] 63 69 61 6c 22 3a 22 e1 9e 96 e1 9f 92 e1 9e 9a e1 9f 87 e1 9e 9a e1 9e\n[19993] b6 e1 9e 87 e1 9e b6 e1 9e 8e e1 9e b6 e1 9e 85 e1 9e 80 e1 9f 92 e1 9e\n[20017] 9a e1 9e 80 e1 9e 98 e1 9f 92 e1 9e 96 e1 9e bb e1 9e 87 e1 9e b6 22 2c\n[20041] 22 63 6f 6d 6d 6f 6e 22 3a 22 4b c3 a2 6d 70 c5 ad 63 68 c3 a9 61 22 7d\n[20065] 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 49\n[20089] 72 61 71 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69\n[20113] 63 20 6f 66 20 49 72 61 71 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[20137] 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 ac d9 85\n[20161] d9 87 d9 88 d8 b1 d9 8a d8 a9 20 d8 a7 d9 84 d8 b9 d8 b1 d8 a7 d9 82 22\n[20185] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 a7 d9 84 d8 b9 d8 b1 d8 a7 d9 82 22\n[20209] 7d 2c 22 61 72 63 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 dc a9 dc\n[20233] 98 dc bc dc 9b dc a2 dc b5 dc 90 20 dc 90 dc 9d dc bc dc aa dc b2 dc a9\n[20257] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 dc a9 dc 98 dc bc dc 9b dc a2 dc b5\n[20281] dc 90 22 7d 2c 22 63 6b 62 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[20305] da a9 db 86 d9 85 d8 a7 d8 b1 db 8c 20 d8 b9 db 8e d8 b1 d8 a7 d9 82 22\n[20329] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 da a9 db 86 d9 85 d8 a7 d8 b1 db 8c 22\n[20353] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n[20377] 46 72 65 6e 63 68 20 53 6f 75 74 68 65 72 6e 20 61 6e 64 20 41 6e 74 61\n[20401] 72 63 74 69 63 20 4c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[20425] 22 54 65 72 72 69 74 6f 72 79 20 6f 66 20 74 68 65 20 46 72 65 6e 63 68\n[20449] 20 53 6f 75 74 68 65 72 6e 20 61 6e 64 20 41 6e 74 61 72 63 74 69 63 20\n[20473] 4c 61 6e 64 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72\n[20497] 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 54 65 72 72 69 74 6f 69\n[20521] 72 65 20 64 65 73 20 54 65 72 72 65 73 20 61 75 73 74 72 61 6c 65 73 20\n[20545] 65 74 20 61 6e 74 61 72 63 74 69 71 75 65 73 20 66 72 61 6e c3 a7 61 69\n[20569] 73 65 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 54 65 72 72 65 73 20 61 75\n[20593] 73 74 72 61 6c 65 73 20 65 74 20 61 6e 74 61 72 63 74 69 71 75 65 73 20\n[20617] 66 72 61 6e c3 a7 61 69 73 65 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22\n[20641] 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 77 65 64 65 6e 22 2c 22 6f 66 66\n[20665] 69 63 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 53 77 65 64 65\n[20689] 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 77 65 22 3a 7b\n[20713] 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 6f 6e 75 6e 67 61 72 69 6b 65 74\n[20737] 20 53 76 65 72 69 67 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 76 65 72\n[20761] 69 67 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n[20785] 6e 22 3a 22 43 75 62 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65\n[20809] 70 75 62 6c 69 63 20 6f 66 20 43 75 62 61 22 2c 22 6e 61 74 69 76 65 4e\n[20833] 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[20857] 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 65 20 43 75 62 61 22 2c 22 63 6f\n[20881] 6d 6d 6f 6e 22 3a 22 43 75 62 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22\n[20905] 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4b 79 72 67 79 7a 73 74 61 6e 22 2c\n[20929] 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 79 72 67 79 7a 20 52 65 70 75 62\n[20953] 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6b 69 72 22\n[20977] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d0 9a d1 8b d1 80 d0 b3 d1 8b\n[21001] d0 b7 20 d0 a0 d0 b5 d1 81 d0 bf d1 83 d0 b1 d0 bb d0 b8 d0 ba d0 b0 d1\n[21025] 81 d1 8b 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 9a d1 8b d1 80 d0 b3 d1\n[21049] 8b d0 b7 d1 81 d1 82 d0 b0 d0 bd 22 7d 2c 22 72 75 73 22 3a 7b 22 6f 66\n[21073] 66 69 63 69 61 6c 22 3a 22 d0 9a d1 8b d1 80 d0 b3 d1 8b d0 b7 d1 81 d0\n[21097] ba d0 b0 d1 8f 20 d0 a0 d0 b5 d1 81 d0 bf d1 83 d0 b1 d0 bb d0 b8 d0 ba\n[21121] d0 b0 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 9a d0 b8 d1 80 d0 b3 d0 b8\n[21145] d0 b7 d0 b8 d1 8f 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f\n[21169] 6d 6d 6f 6e 22 3a 22 52 75 73 73 69 61 22 2c 22 6f 66 66 69 63 69 61 6c\n[21193] 22 3a 22 52 75 73 73 69 61 6e 20 46 65 64 65 72 61 74 69 6f 6e 22 2c 22\n[21217] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 72 75 73 22 3a 7b 22 6f 66 66\n[21241] 69 63 69 61 6c 22 3a 22 d0 a0 d0 be d1 81 d1 81 d0 b8 d0 b9 d1 81 d0 ba\n[21265] d0 b0 d1 8f 20 d0 a4 d0 b5 d0 b4 d0 b5 d1 80 d0 b0 d1 86 d0 b8 d1 8f 22\n[21289] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 a0 d0 be d1 81 d1 81 d0 b8 d1 8f 22\n[21313] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n[21337] 4d 61 6c 61 79 73 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4d 61\n[21361] 6c 61 79 73 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65\n[21385] 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4d 61 6c 61 79 73 69\n[21409] 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 6c 61 79 73 69 61 22 7d 2c\n[21433] 22 6d 73 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d9 85 d9 84 d9\n[21457] 8a d8 b3 d9 8a d8 a7 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d9 85 d9 84 d9\n[21481] 8a d8 b3 d9 8a d8 a7 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[21505] 6f 6d 6d 6f 6e 22 3a 22 53 c3 a3 6f 20 54 6f 6d c3 a9 20 61 6e 64 20 50\n[21529] 72 c3 ad 6e 63 69 70 65 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 44 65\n[21553] 6d 6f 63 72 61 74 69 63 20 52 65 70 75 62 6c 69 63 20 6f 66 20 53 c3 a3\n[21577] 6f 20 54 6f 6d c3 a9 20 61 6e 64 20 50 72 c3 ad 6e 63 69 70 65 22 2c 22\n[21601] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 70 6f 72 22 3a 7b 22 6f 66 66\n[21625] 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 44 65 6d 6f 63\n[21649] 72 c3 a1 74 69 63 61 20 64 6f 20 53 c3 a3 6f 20 54 6f 6d c3 a9 20 65 20\n[21673] 50 72 c3 ad 6e 63 69 70 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 c3 a3\n[21697] 6f 20 54 6f 6d c3 a9 20 65 20 50 72 c3 ad 6e 63 69 70 65 22 7d 7d 7d 7d\n[21721] 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 43 79 70 72\n[21745] 75 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63\n[21769] 20 6f 66 20 43 79 70 72 75 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[21793] 3a 7b 22 65 6c 6c 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 ce 94 ce\n[21817] b7 ce bc ce bf ce ba cf 81 ce b1 cf 84 ce af ce b1 20 cf 84 ce b7 cf 82\n[21841] 20 ce 9a cf 8d cf 80 cf 81 ce bf cf 82 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[21865] 22 ce 9a cf 8d cf 80 cf 81 ce bf cf 82 22 7d 2c 22 74 75 72 22 3a 7b 22\n[21889] 6f 66 66 69 63 69 61 6c 22 3a 22 4b c4 b1 62 72 c4 b1 73 20 43 75 6d 68\n[21913] 75 72 69 79 65 74 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4b c4 b1 62 72\n[21937] c4 b1 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n[21961] 6e 22 3a 22 43 61 6e 61 64 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[21985] 43 61 6e 61 64 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65\n[22009] 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 61 6e 61 64 61 22\n[22033] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 43 61 6e 61 64 61 22 7d 2c 22 66 72 61\n[22057] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 61 6e 61 64 61 22 2c 22\n[22081] 63 6f 6d 6d 6f 6e 22 3a 22 43 61 6e 61 64 61 22 7d 7d 7d 7d 2c 7b 22 6e\n[22105] 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 6c 61 77 69 22 2c\n[22129] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20\n[22153] 4d 61 6c 61 77 69 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65\n[22177] 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69\n[22201] 63 20 6f 66 20 4d 61 6c 61 77 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d\n[22225] 61 6c 61 77 69 22 7d 2c 22 6e 79 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[22249] 22 3a 22 43 68 61 6c 6f 20 63 68 61 20 4d 61 6c 61 77 69 2c 20 44 7a 69\n[22273] 6b 6f 20 6c 61 20 4d 61 6c 61 c5 b5 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[22297] 22 4d 61 6c 61 c5 b5 69 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[22321] 63 6f 6d 6d 6f 6e 22 3a 22 53 61 75 64 69 20 41 72 61 62 69 61 22 2c 22\n[22345] 6f 66 66 69 63 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 53 61\n[22369] 75 64 69 20 41 72 61 62 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[22393] 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9\n[22417] 84 d9 85 d9 85 d9 84 d9 83 d8 a9 20 d8 a7 d9 84 d8 b9 d8 b1 d8 a8 d9 8a\n[22441] d8 a9 20 d8 a7 d9 84 d8 b3 d8 b9 d9 88 d8 af d9 8a d8 a9 22 2c 22 63 6f\n[22465] 6d 6d 6f 6e 22 3a 22 d8 a7 d9 84 d8 b9 d8 b1 d8 a8 d9 8a d8 a9 20 d8 a7\n[22489] d9 84 d8 b3 d8 b9 d9 88 d8 af d9 8a d8 a9 22 7d 7d 7d 7d 2c 7b 22 6e 61\n[22513] 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 6f 73 6e 69 61 20 61 6e\n[22537] 64 20 48 65 72 7a 65 67 6f 76 69 6e 61 22 2c 22 6f 66 66 69 63 69 61 6c\n[22561] 22 3a 22 42 6f 73 6e 69 61 20 61 6e 64 20 48 65 72 7a 65 67 6f 76 69 6e\n[22585] 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 62 6f 73 22 3a 7b\n[22609] 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 6f 73 6e 61 20 69 20 48 65 72 63\n[22633] 65 67 6f 76 69 6e 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 6f 73 6e 61\n[22657] 20 69 20 48 65 72 63 65 67 6f 76 69 6e 61 22 7d 2c 22 68 72 76 22 3a 7b\n[22681] 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 6f 73 6e 61 20 69 20 48 65 72 63\n[22705] 65 67 6f 76 69 6e 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 6f 73 6e 61\n[22729] 20 69 20 48 65 72 63 65 67 6f 76 69 6e 61 22 7d 2c 22 73 72 70 22 3a 7b\n[22753] 22 6f 66 66 69 63 69 61 6c 22 3a 22 d0 91 d0 be d1 81 d0 bd d0 b0 20 d0\n[22777] b8 20 d0 a5 d0 b5 d1 80 d1 86 d0 b5 d0 b3 d0 be d0 b2 d0 b8 d0 bd d0 b0\n[22801] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 91 d0 be d1 81 d0 bd d0 b0 20 d0\n[22825] b8 20 d0 a5 d0 b5 d1 80 d1 86 d0 b5 d0 b3 d0 be d0 b2 d0 b8 d0 bd d0 b0\n[22849] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[22873] 22 45 74 68 69 6f 70 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 46\n[22897] 65 64 65 72 61 6c 20 44 65 6d 6f 63 72 61 74 69 63 20 52 65 70 75 62 6c\n[22921] 69 63 20 6f 66 20 45 74 68 69 6f 70 69 61 22 2c 22 6e 61 74 69 76 65 4e\n[22945] 61 6d 65 22 3a 7b 22 61 6d 68 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[22969] 22 e1 8b a8 e1 8a a2 e1 89 b5 e1 8b ae e1 8c b5 e1 8b ab 20 e1 8d 8c e1\n[22993] 8b b4 e1 88 ab e1 88 8b e1 8b 8a 20 e1 8b b2 e1 88 9e e1 8a ad e1 88 ab\n[23017] e1 88 b2 e1 8b ab e1 8b 8a 20 e1 88 aa e1 8d 90 e1 89 a5 e1 88 8a e1 8a\n[23041] ad 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e1 8a a2 e1 89 b5 e1 8b ae e1 8c\n[23065] b5 e1 8b ab 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[23089] 6f 6e 22 3a 22 53 70 61 69 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[23113] 4b 69 6e 67 64 6f 6d 20 6f 66 20 53 70 61 69 6e 22 2c 22 6e 61 74 69 76\n[23137] 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[23161] 22 3a 22 52 65 69 6e 6f 20 64 65 20 45 73 70 61 c3 b1 61 22 2c 22 63 6f\n[23185] 6d 6d 6f 6e 22 3a 22 45 73 70 61 c3 b1 61 22 7d 7d 7d 7d 2c 7b 22 6e 61\n[23209] 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6c 6f 76 65 6e 69 61 22\n[23233] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66\n[23257] 20 53 6c 6f 76 65 6e 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[23281] 7b 22 73 6c 76 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75\n[23305] 62 6c 69 6b 61 20 53 6c 6f 76 65 6e 69 6a 61 22 2c 22 63 6f 6d 6d 6f 6e\n[23329] 22 3a 22 53 6c 6f 76 65 6e 69 6a 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n[23353] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4f 6d 61 6e 22 2c 22 6f 66 66 69\n[23377] 63 69 61 6c 22 3a 22 53 75 6c 74 61 6e 61 74 65 20 6f 66 20 4f 6d 61 6e\n[23401] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22 3a 7b 22\n[23425] 6f 66 66 69 63 69 61 6c 22 3a 22 d8 b3 d9 84 d8 b7 d9 86 d8 a9 20 d8 b9\n[23449] d9 85 d8 a7 d9 86 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 b9 d9 85 d8 a7\n[23473] d9 86 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[23497] 22 3a 22 53 61 69 6e 74 20 50 69 65 72 72 65 20 61 6e 64 20 4d 69 71 75\n[23521] 65 6c 6f 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 61 69 6e 74 20\n[23545] 50 69 65 72 72 65 20 61 6e 64 20 4d 69 71 75 65 6c 6f 6e 22 2c 22 6e 61\n[23569] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63\n[23593] 69 61 6c 22 3a 22 43 6f 6c 6c 65 63 74 69 76 69 74 c3 a9 20 74 65 72 72\n[23617] 69 74 6f 72 69 61 6c 65 20 64 65 20 53 61 69 6e 74 2d 50 69 65 72 72 65\n[23641] 2d 65 74 2d 4d 69 71 75 65 6c 6f 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[23665] 53 61 69 6e 74 2d 50 69 65 72 72 65 2d 65 74 2d 4d 69 71 75 65 6c 6f 6e\n[23689] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[23713] 22 4d 61 63 61 75 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4d 61 63 61\n[23737] 6f 20 53 70 65 63 69 61 6c 20 41 64 6d 69 6e 69 73 74 72 61 74 69 76 65\n[23761] 20 52 65 67 69 6f 6e 20 6f 66 20 74 68 65 20 50 65 6f 70 6c 65 27 73 20\n[23785] 52 65 70 75 62 6c 69 63 20 6f 66 20 43 68 69 6e 61 22 2c 22 6e 61 74 69\n[23809] 76 65 4e 61 6d 65 22 3a 7b 22 70 6f 72 22 3a 7b 22 6f 66 66 69 63 69 61\n[23833] 6c 22 3a 22 52 65 67 69 c3 a3 6f 20 41 64 6d 69 6e 69 73 74 72 61 74 69\n[23857] 76 61 20 45 73 70 65 63 69 61 6c 20 64 65 20 4d 61 63 61 75 20 64 61 20\n[23881] 52 65 70 c3 ba 62 6c 69 63 61 20 50 6f 70 75 6c 61 72 20 64 61 20 43 68\n[23905] 69 6e 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 63 61 75 22 7d 2c 22\n[23929] 7a 68 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e4 b8 ad e5 8d 8e\n[23953] e4 ba ba e6 b0 91 e5 85 b1 e5 92 8c e5 9b bd e6 be b3 e9 97 a8 e7 89 b9\n[23977] e5 88 ab e8 a1 8c e6 94 bf e5 8c ba 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[24001] e6 be b3 e9 97 a8 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f\n[24025] 6d 6d 6f 6e 22 3a 22 53 61 6e 20 4d 61 72 69 6e 6f 22 2c 22 6f 66 66 69\n[24049] 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 53 61 6e 20 4d\n[24073] 61 72 69 6e 6f 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 69 74\n[24097] 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 62 6c 69\n[24121] 63 61 20 64 69 20 53 61 6e 20 4d 61 72 69 6e 6f 22 2c 22 63 6f 6d 6d 6f\n[24145] 6e 22 3a 22 53 61 6e 20 4d 61 72 69 6e 6f 22 7d 7d 7d 7d 2c 7b 22 6e 61\n[24169] 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 65 73 6f 74 68 6f 22 2c\n[24193] 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 4c\n[24217] 65 73 6f 74 68 6f 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65\n[24241] 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d\n[24265] 20 6f 66 20 4c 65 73 6f 74 68 6f 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4c\n[24289] 65 73 6f 74 68 6f 22 7d 2c 22 73 6f 74 22 3a 7b 22 6f 66 66 69 63 69 61\n[24313] 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 4c 65 73 6f 74 68 6f 22 2c\n[24337] 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 65 73 6f 74 68 6f 22 7d 7d 7d 7d 2c 7b\n[24361] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 72 73 68 61\n[24385] 6c 6c 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[24409] 52 65 70 75 62 6c 69 63 20 6f 66 20 74 68 65 20 4d 61 72 73 68 61 6c 6c\n[24433] 20 49 73 6c 61 6e 64 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n[24457] 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62\n[24481] 6c 69 63 20 6f 66 20 74 68 65 20 4d 61 72 73 68 61 6c 6c 20 49 73 6c 61\n[24505] 6e 64 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 72 73 68 61 6c 6c 20\n[24529] 49 73 6c 61 6e 64 73 22 7d 2c 22 6d 61 68 22 3a 7b 22 6f 66 66 69 63 69\n[24553] 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 74 68 65 20 4d 61 72\n[24577] 73 68 61 6c 6c 20 49 73 6c 61 6e 64 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[24601] 22 4d cc a7 61 6a 65 c4 bc 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[24625] 22 63 6f 6d 6d 6f 6e 22 3a 22 53 69 6e 74 20 4d 61 61 72 74 65 6e 22 2c\n[24649] 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 69 6e 74 20 4d 61 61 72 74 65 6e\n[24673] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22\n[24697] 6f 66 66 69 63 69 61 6c 22 3a 22 53 69 6e 74 20 4d 61 61 72 74 65 6e 22\n[24721] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 69 6e 74 20 4d 61 61 72 74 65 6e 22\n[24745] 7d 2c 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 61 69\n[24769] 6e 74 2d 4d 61 72 74 69 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 61 69\n[24793] 6e 74 2d 4d 61 72 74 69 6e 22 7d 2c 22 6e 6c 64 22 3a 7b 22 6f 66 66 69\n[24817] 63 69 61 6c 22 3a 22 53 69 6e 74 20 4d 61 61 72 74 65 6e 22 2c 22 63 6f\n[24841] 6d 6d 6f 6e 22 3a 22 53 69 6e 74 20 4d 61 61 72 74 65 6e 22 7d 7d 7d 7d\n[24865] 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 49 63 65 6c\n[24889] 61 6e 64 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 63 65 6c 61 6e 64\n[24913] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 69 73 6c 22 3a 7b 22\n[24937] 6f 66 66 69 63 69 61 6c 22 3a 22 c3 8d 73 6c 61 6e 64 22 2c 22 63 6f 6d\n[24961] 6d 6f 6e 22 3a 22 c3 8d 73 6c 61 6e 64 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d\n[24985] 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 75 78 65 6d 62 6f 75 72 67\n[25009] 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 72 61 6e 64 20 44 75 63 68\n[25033] 79 20 6f 66 20 4c 75 78 65 6d 62 6f 75 72 67 22 2c 22 6e 61 74 69 76 65\n[25057] 4e 61 6d 65 22 3a 7b 22 64 65 75 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[25081] 3a 22 47 72 6f c3 9f 68 65 72 7a 6f 67 74 75 6d 20 4c 75 78 65 6d 62 75\n[25105] 72 67 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 75 78 65 6d 62 75 72 67 22\n[25129] 7d 2c 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 72 61\n[25153] 6e 64 2d 44 75 63 68 c3 a9 20 64 65 20 4c 75 78 65 6d 62 6f 75 72 67 22\n[25177] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 75 78 65 6d 62 6f 75 72 67 22 7d 2c\n[25201] 22 6c 74 7a 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 72 6f 75 73\n[25225] 73 68 65 72 7a 6f 67 74 75 6d 20 4c c3 ab 74 7a 65 62 75 65 72 67 22 2c\n[25249] 22 63 6f 6d 6d 6f 6e 22 3a 22 4c c3 ab 74 7a 65 62 75 65 72 67 22 7d 7d\n[25273] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 72\n[25297] 67 65 6e 74 69 6e 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 41 72 67\n[25321] 65 6e 74 69 6e 65 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65\n[25345] 4e 61 6d 65 22 3a 7b 22 67 72 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[25369] 3a 22 41 72 67 65 6e 74 69 6e 65 20 52 65 70 75 62 6c 69 63 22 2c 22 63\n[25393] 6f 6d 6d 6f 6e 22 3a 22 41 72 67 65 6e 74 69 6e 61 22 7d 2c 22 73 70 61\n[25417] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63\n[25441] 61 20 41 72 67 65 6e 74 69 6e 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 41\n[25465] 72 67 65 6e 74 69 6e 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[25489] 63 6f 6d 6d 6f 6e 22 3a 22 54 75 72 6b 73 20 61 6e 64 20 43 61 69 63 6f\n[25513] 73 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 54\n[25537] 75 72 6b 73 20 61 6e 64 20 43 61 69 63 6f 73 20 49 73 6c 61 6e 64 73 22\n[25561] 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f\n[25585] 66 66 69 63 69 61 6c 22 3a 22 54 75 72 6b 73 20 61 6e 64 20 43 61 69 63\n[25609] 6f 73 20 49 73 6c 61 6e 64 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 54 75\n[25633] 72 6b 73 20 61 6e 64 20 43 61 69 63 6f 73 20 49 73 6c 61 6e 64 73 22 7d\n[25657] 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4e\n[25681] 61 75 72 75 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c\n[25705] 69 63 20 6f 66 20 4e 61 75 72 75 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65\n[25729] 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65\n[25753] 70 75 62 6c 69 63 20 6f 66 20 4e 61 75 72 75 22 2c 22 63 6f 6d 6d 6f 6e\n[25777] 22 3a 22 4e 61 75 72 75 22 7d 2c 22 6e 61 75 22 3a 7b 22 6f 66 66 69 63\n[25801] 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4e 61 75 72 75 22\n[25825] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 61 75 72 75 22 7d 7d 7d 7d 2c 7b 22\n[25849] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 43 6f 63 6f 73 20 28\n[25873] 4b 65 65 6c 69 6e 67 29 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63\n[25897] 69 61 6c 22 3a 22 54 65 72 72 69 74 6f 72 79 20 6f 66 20 74 68 65 20 43\n[25921] 6f 63 6f 73 20 28 4b 65 65 6c 69 6e 67 29 20 49 73 6c 61 6e 64 73 22 2c\n[25945] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66\n[25969] 66 69 63 69 61 6c 22 3a 22 54 65 72 72 69 74 6f 72 79 20 6f 66 20 74 68\n[25993] 65 20 43 6f 63 6f 73 20 28 4b 65 65 6c 69 6e 67 29 20 49 73 6c 61 6e 64\n[26017] 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 43 6f 63 6f 73 20 28 4b 65 65 6c\n[26041] 69 6e 67 29 20 49 73 6c 61 6e 64 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n[26065] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 57 65 73 74 65 72 6e 20 53 61 68\n[26089] 61 72 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 61 68 72 61 77 69\n[26113] 20 41 72 61 62 20 44 65 6d 6f 63 72 61 74 69 63 20 52 65 70 75 62 6c 69\n[26137] 63 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 62 65 72 22 3a 7b\n[26161] 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 61 68 72 61 77 69 20 41 72 61 62\n[26185] 20 44 65 6d 6f 63 72 61 74 69 63 20 52 65 70 75 62 6c 69 63 22 2c 22 63\n[26209] 6f 6d 6d 6f 6e 22 3a 22 57 65 73 74 65 72 6e 20 53 61 68 61 72 61 22 7d\n[26233] 2c 22 6d 65 79 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84\n[26257] d8 ac d9 85 d9 87 d9 88 d8 b1 d9 8a d8 a9 20 d8 a7 d9 84 d8 b9 d8 b1 d8\n[26281] a8 d9 8a d8 a9 20 d8 a7 d9 84 d8 b5 d8 ad d8 b1 d8 a7 d9 88 d9 8a d8 a9\n[26305] 20 d8 a7 d9 84 d8 af d9 8a d9 85 d9 82 d8 b1 d8 a7 d8 b7 d9 8a d8 a9 22\n[26329] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 a7 d9 84 d8 b5 d8 ad d8 b1 d8 a7 d8\n[26353] a1 20 d8 a7 d9 84 d8 ba d8 b1 d8 a8 d9 8a d8 a9 22 7d 2c 22 73 70 61 22\n[26377] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61\n[26401] 20 c3 81 72 61 62 65 20 53 61 68 61 72 61 75 69 20 44 65 6d 6f 63 72 c3\n[26425] a1 74 69 63 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 61 68 61 72 61 20\n[26449] 4f 63 63 69 64 65 6e 74 61 6c 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[26473] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 44 6f 6d 69 6e 69 63 61 22 2c 22 6f 66\n[26497] 66 69 63 69 61 6c 22 3a 22 43 6f 6d 6d 6f 6e 77 65 61 6c 74 68 20 6f 66\n[26521] 20 44 6f 6d 69 6e 69 63 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[26545] 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 6d 6d\n[26569] 6f 6e 77 65 61 6c 74 68 20 6f 66 20 44 6f 6d 69 6e 69 63 61 22 2c 22 63\n[26593] 6f 6d 6d 6f 6e 22 3a 22 44 6f 6d 69 6e 69 63 61 22 7d 7d 7d 7d 2c 7b 22\n[26617] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 43 6f 73 74 61 20 52\n[26641] 69 63 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69\n[26665] 63 20 6f 66 20 43 6f 73 74 61 20 52 69 63 61 22 2c 22 6e 61 74 69 76 65\n[26689] 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[26713] 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 65 20 43 6f 73 74 61 20 52 69\n[26737] 63 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 43 6f 73 74 61 20 52 69 63 61\n[26761] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[26785] 22 41 75 73 74 72 61 6c 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[26809] 43 6f 6d 6d 6f 6e 77 65 61 6c 74 68 20 6f 66 20 41 75 73 74 72 61 6c 69\n[26833] 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b\n[26857] 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 6d 6d 6f 6e 77 65 61 6c 74 68\n[26881] 20 6f 66 20 41 75 73 74 72 61 6c 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[26905] 22 41 75 73 74 72 61 6c 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[26929] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 54 68 61 69 6c 61 6e 64 22 2c 22 6f 66\n[26953] 66 69 63 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 54 68 61 69\n[26977] 6c 61 6e 64 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 74 68 61\n[27001] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e0 b8 a3 e0 b8 b2 e0 b8 8a\n[27025] e0 b8 ad e0 b8 b2 e0 b8 93 e0 b8 b2 e0 b8 88 e0 b8 b1 e0 b8 81 e0 b8 a3\n[27049] e0 b9 84 e0 b8 97 e0 b8 a2 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e0 b8 9b\n[27073] e0 b8 a3 e0 b8 b0 e0 b9 80 e0 b8 97 e0 b8 a8 e0 b9 84 e0 b8 97 e0 b8 a2\n[27097] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[27121] 22 48 61 69 74 69 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75\n[27145] 62 6c 69 63 20 6f 66 20 48 61 69 74 69 22 2c 22 6e 61 74 69 76 65 4e 61\n[27169] 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[27193] 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 27 48 61 c3 af 74 69 22 2c 22 63\n[27217] 6f 6d 6d 6f 6e 22 3a 22 48 61 c3 af 74 69 22 7d 2c 22 68 61 74 22 3a 7b\n[27241] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 69 62 6c 69 6b 20 41 79 69\n[27265] 74 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 41 79 69 74 69 22 7d 7d 7d 7d\n[27289] 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 54 75 76 61\n[27313] 6c 75 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 54 75 76 61 6c 75 22 2c\n[27337] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66\n[27361] 66 69 63 69 61 6c 22 3a 22 54 75 76 61 6c 75 22 2c 22 63 6f 6d 6d 6f 6e\n[27385] 22 3a 22 54 75 76 61 6c 75 22 7d 2c 22 74 76 6c 22 3a 7b 22 6f 66 66 69\n[27409] 63 69 61 6c 22 3a 22 54 75 76 61 6c 75 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[27433] 22 54 75 76 61 6c 75 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[27457] 6f 6d 6d 6f 6e 22 3a 22 48 6f 6e 64 75 72 61 73 22 2c 22 6f 66 66 69 63\n[27481] 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 48 6f 6e 64 75 72\n[27505] 61 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a\n[27529] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20\n[27553] 64 65 20 48 6f 6e 64 75 72 61 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 48\n[27577] 6f 6e 64 75 72 61 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[27601] 6f 6d 6d 6f 6e 22 3a 22 45 71 75 61 74 6f 72 69 61 6c 20 47 75 69 6e 65\n[27625] 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20\n[27649] 6f 66 20 45 71 75 61 74 6f 72 69 61 6c 20 47 75 69 6e 65 61 22 2c 22 6e\n[27673] 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69\n[27697] 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 65 20 6c 61\n[27721] 20 47 75 69 6e c3 a9 65 20 c3 89 71 75 61 74 6f 72 69 61 6c 65 22 2c 22\n[27745] 63 6f 6d 6d 6f 6e 22 3a 22 47 75 69 6e c3 a9 65 20 c3 a9 71 75 61 74 6f\n[27769] 72 69 61 6c 65 22 7d 2c 22 70 6f 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[27793] 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 61 20 47 75 69 6e c3 a9 20\n[27817] 45 71 75 61 74 6f 72 69 61 6c 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75\n[27841] 69 6e c3 a9 20 45 71 75 61 74 6f 72 69 61 6c 22 7d 2c 22 73 70 61 22 3a\n[27865] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20\n[27889] 64 65 20 47 75 69 6e 65 61 20 45 63 75 61 74 6f 72 69 61 6c 22 2c 22 63\n[27913] 6f 6d 6d 6f 6e 22 3a 22 47 75 69 6e 65 61 20 45 63 75 61 74 6f 72 69 61\n[27937] 6c 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22\n[27961] 3a 22 53 61 69 6e 74 20 4c 75 63 69 61 22 2c 22 6f 66 66 69 63 69 61 6c\n[27985] 22 3a 22 53 61 69 6e 74 20 4c 75 63 69 61 22 2c 22 6e 61 74 69 76 65 4e\n[28009] 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[28033] 22 53 61 69 6e 74 20 4c 75 63 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[28057] 53 61 69 6e 74 20 4c 75 63 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22\n[28081] 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 46 72 65 6e 63 68 20 50 6f 6c 79 6e\n[28105] 65 73 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 46 72 65 6e 63 68\n[28129] 20 50 6f 6c 79 6e 65 73 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[28153] 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 50 6f 6c\n[28177] 79 6e c3 a9 73 69 65 20 66 72 61 6e c3 a7 61 69 73 65 22 2c 22 63 6f 6d\n[28201] 6d 6f 6e 22 3a 22 50 6f 6c 79 6e c3 a9 73 69 65 20 66 72 61 6e c3 a7 61\n[28225] 69 73 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n[28249] 6e 22 3a 22 42 65 6c 61 72 75 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[28273] 22 52 65 70 75 62 6c 69 63 20 6f 66 20 42 65 6c 61 72 75 73 22 2c 22 6e\n[28297] 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 62 65 6c 22 3a 7b 22 6f 66 66 69\n[28321] 63 69 61 6c 22 3a 22 d0 a0 d1 8d d1 81 d0 bf d1 83 d0 b1 d0 bb d1 96 d0\n[28345] ba d0 b0 20 d0 91 d0 b5 d0 bb d0 b0 d1 80 d1 83 d1 81 d1 8c 22 2c 22 63\n[28369] 6f 6d 6d 6f 6e 22 3a 22 d0 91 d0 b5 d0 bb d0 b0 d1 80 d1 83 cc 81 d1 81\n[28393] d1 8c 22 7d 2c 22 72 75 73 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[28417] d0 a0 d0 b5 d1 81 d0 bf d1 83 d0 b1 d0 bb d0 b8 d0 ba d0 b0 20 d0 91 d0\n[28441] b5 d0 bb d0 b0 d1 80 d1 83 d1 81 d1 8c 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[28465] 22 d0 91 d0 b5 d0 bb d0 b0 d1 80 d1 83 d1 81 d1 8c 22 7d 7d 7d 7d 2c 7b\n[28489] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 61 74 76 69 61\n[28513] 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f\n[28537] 66 20 4c 61 74 76 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n[28561] 22 6c 61 76 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4c 61 74 76 69\n[28585] 6a 61 73 20 52 65 70 75 62 6c 69 6b 61 73 22 2c 22 63 6f 6d 6d 6f 6e 22\n[28609] 3a 22 4c 61 74 76 69 6a 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[28633] 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 6c 61 75 22 2c 22 6f 66 66 69 63 69\n[28657] 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 50 61 6c 61 75 22 2c\n[28681] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66\n[28705] 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 50 61 6c\n[28729] 61 75 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 6c 61 75 22 7d 2c 22 70\n[28753] 61 75 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 65 6c 75 75 20 65\n[28777] 72 20 61 20 42 65 6c 61 75 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 65 6c\n[28801] 61 75 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[28825] 22 3a 22 47 75 61 64 65 6c 6f 75 70 65 22 2c 22 6f 66 66 69 63 69 61 6c\n[28849] 22 3a 22 47 75 61 64 65 6c 6f 75 70 65 22 2c 22 6e 61 74 69 76 65 4e 61\n[28873] 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[28897] 47 75 61 64 65 6c 6f 75 70 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75\n[28921] 61 64 65 6c 6f 75 70 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[28945] 63 6f 6d 6d 6f 6e 22 3a 22 50 68 69 6c 69 70 70 69 6e 65 73 22 2c 22 6f\n[28969] 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 74 68\n[28993] 65 20 50 68 69 6c 69 70 70 69 6e 65 73 22 2c 22 6e 61 74 69 76 65 4e 61\n[29017] 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[29041] 52 65 70 75 62 6c 69 63 20 6f 66 20 74 68 65 20 50 68 69 6c 69 70 70 69\n[29065] 6e 65 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 68 69 6c 69 70 70 69 6e\n[29089] 65 73 22 7d 2c 22 66 69 6c 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[29113] 52 65 70 75 62 6c 69 63 20 6f 66 20 74 68 65 20 50 68 69 6c 69 70 70 69\n[29137] 6e 65 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 69 6c 69 70 69 6e 61 73\n[29161] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[29185] 22 47 69 62 72 61 6c 74 61 72 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[29209] 47 69 62 72 61 6c 74 61 72 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[29233] 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 69 62 72\n[29257] 61 6c 74 61 72 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 69 62 72 61 6c 74\n[29281] 61 72 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[29305] 22 3a 22 44 65 6e 6d 61 72 6b 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[29329] 4b 69 6e 67 64 6f 6d 20 6f 66 20 44 65 6e 6d 61 72 6b 22 2c 22 6e 61 74\n[29353] 69 76 65 4e 61 6d 65 22 3a 7b 22 64 61 6e 22 3a 7b 22 6f 66 66 69 63 69\n[29377] 61 6c 22 3a 22 4b 6f 6e 67 65 72 69 67 65 74 20 44 61 6e 6d 61 72 6b 22\n[29401] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 44 61 6e 6d 61 72 6b 22 7d 7d 7d 7d 2c\n[29425] 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 43 61 6d 65 72\n[29449] 6f 6f 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69\n[29473] 63 20 6f 66 20 43 61 6d 65 72 6f 6f 6e 22 2c 22 6e 61 74 69 76 65 4e 61\n[29497] 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[29521] 52 65 70 75 62 6c 69 63 20 6f 66 20 43 61 6d 65 72 6f 6f 6e 22 2c 22 63\n[29545] 6f 6d 6d 6f 6e 22 3a 22 43 61 6d 65 72 6f 6f 6e 22 7d 2c 22 66 72 61 22\n[29569] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75\n[29593] 65 20 64 75 20 43 61 6d 65 72 6f 75 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[29617] 22 43 61 6d 65 72 6f 75 6e 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[29641] 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 69 6e 65 61 22 2c 22 6f 66 66 69 63\n[29665] 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 47 75 69 6e 65 61\n[29689] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22\n[29713] 6f 66 66 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64\n[29737] 65 20 47 75 69 6e c3 a9 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 69\n[29761] 6e c3 a9 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[29785] 6f 6e 22 3a 22 42 61 68 72 61 69 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22\n[29809] 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 42 61 68 72 61 69 6e 22 2c 22 6e\n[29833] 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69\n[29857] 63 69 61 6c 22 3a 22 d9 85 d9 85 d9 84 d9 83 d8 a9 20 d8 a7 d9 84 d8 a8\n[29881] d8 ad d8 b1 d9 8a d9 86 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e2 80 8f d8\n[29905] a7 d9 84 d8 a8 d8 ad d8 b1 d9 8a d9 86 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d\n[29929] 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 75 72 69 6e 61 6d 65 22 2c\n[29953] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20\n[29977] 53 75 72 69 6e 61 6d 65 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n[30001] 22 6e 6c 64 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62\n[30025] 6c 69 65 6b 20 53 75 72 69 6e 61 6d 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[30049] 22 53 75 72 69 6e 61 6d 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[30073] 22 63 6f 6d 6d 6f 6e 22 3a 22 44 52 20 43 6f 6e 67 6f 22 2c 22 6f 66 66\n[30097] 69 63 69 61 6c 22 3a 22 44 65 6d 6f 63 72 61 74 69 63 20 52 65 70 75 62\n[30121] 6c 69 63 20 6f 66 20 74 68 65 20 43 6f 6e 67 6f 22 2c 22 6e 61 74 69 76\n[30145] 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[30169] 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 c3 a9 6d 6f 63 72 61 74\n[30193] 69 71 75 65 20 64 75 20 43 6f 6e 67 6f 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[30217] 22 52 44 20 43 6f 6e 67 6f 22 7d 2c 22 6b 6f 6e 22 3a 7b 22 6f 66 66 69\n[30241] 63 69 61 6c 22 3a 22 52 65 70 75 62 69 6c 69 6b 61 20 79 61 20 4b 6f 6e\n[30265] 67 6f 20 44 65 6d 6f 6b 72 61 74 69 6b 69 22 2c 22 63 6f 6d 6d 6f 6e 22\n[30289] 3a 22 52 65 70 75 62 69 6c 69 6b 61 20 79 61 20 4b 6f 6e 67 6f 20 44 65\n[30313] 6d 6f 6b 72 61 74 69 6b 69 22 7d 2c 22 6c 69 6e 22 3a 7b 22 6f 66 66 69\n[30337] 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 6b 69 20 79 61 20 4b 6f 6e 67\n[30361] c3 b3 20 44 65 6d 6f 6b 72 61 74 69 6b 69 22 2c 22 63 6f 6d 6d 6f 6e 22\n[30385] 3a 22 52 65 70 75 62 6c 69 6b 69 20 79 61 20 4b 6f 6e 67 c3 b3 20 44 65\n[30409] 6d 6f 6b 72 61 74 69 6b 69 22 7d 2c 22 6c 75 61 22 3a 7b 22 6f 66 66 69\n[30433] 63 69 61 6c 22 3a 22 44 69 74 75 6e 67 61 20 64 69 61 20 4b 6f 6e 67 75\n[30457] 20 77 61 20 4d 75 6e 67 61 6c 61 61 74 61 22 2c 22 63 6f 6d 6d 6f 6e 22\n[30481] 3a 22 44 69 74 75 6e 67 61 20 64 69 61 20 4b 6f 6e 67 75 20 77 61 20 4d\n[30505] 75 6e 67 61 6c 61 61 74 61 22 7d 2c 22 73 77 61 22 3a 7b 22 6f 66 66 69\n[30529] 63 69 61 6c 22 3a 22 4a 61 6d 68 75 72 69 20 79 61 20 4b 69 64 65 6d 6f\n[30553] 6b 72 61 73 69 61 20 79 61 20 4b 6f 6e 67 6f 22 2c 22 63 6f 6d 6d 6f 6e\n[30577] 22 3a 22 4a 61 6d 68 75 72 69 20 79 61 20 4b 69 64 65 6d 6f 6b 72 61 73\n[30601] 69 61 20 79 61 20 4b 6f 6e 67 6f 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22\n[30625] 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6f 6d 61 6c 69 61 22 2c 22 6f 66\n[30649] 66 69 63 69 61 6c 22 3a 22 46 65 64 65 72 61 6c 20 52 65 70 75 62 6c 69\n[30673] 63 20 6f 66 20 53 6f 6d 61 6c 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d\n[30697] 65 22 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8\n[30721] ac d9 85 d9 87 d9 88 d8 b1 d9 8a d8 a9 20 d8 a7 d9 84 d8 b5 d9 88 d9 85\n[30745] d8 a7 d9 84 e2 80 8e e2 80 8e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 a7\n[30769] d9 84 d8 b5 d9 88 d9 85 d8 a7 d9 84 e2 80 8e e2 80 8e 22 7d 2c 22 73 6f\n[30793] 6d 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4a 61 6d 68 75 75 72 69\n[30817] 79 61 64 64 61 20 46 65 64 65 72 61 61 6c 6b 61 20 53 6f 6f 6d 61 61 6c\n[30841] 69 79 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6f 6f 6d 61 61 6c 69 79\n[30865] 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22\n[30889] 3a 22 43 7a 65 63 68 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 43\n[30913] 7a 65 63 68 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e 61\n[30937] 6d 65 22 3a 7b 22 63 65 73 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[30961] c4 8c 65 73 6b c3 a1 20 72 65 70 75 62 6c 69 6b 61 22 2c 22 63 6f 6d 6d\n[30985] 6f 6e 22 3a 22 c4 8c 65 73 6b 6f 22 7d 2c 22 73 6c 6b 22 3a 7b 22 6f 66\n[31009] 66 69 63 69 61 6c 22 3a 22 c4 8c 65 73 6b c3 a1 20 72 65 70 75 62 6c 69\n[31033] 6b 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 c4 8c 65 73 6b 6f 22 7d 7d 7d\n[31057] 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 65 77\n[31081] 20 43 61 6c 65 64 6f 6e 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[31105] 4e 65 77 20 43 61 6c 65 64 6f 6e 69 61 22 2c 22 6e 61 74 69 76 65 4e 61\n[31129] 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[31153] 4e 6f 75 76 65 6c 6c 65 2d 43 61 6c c3 a9 64 6f 6e 69 65 22 2c 22 63 6f\n[31177] 6d 6d 6f 6e 22 3a 22 4e 6f 75 76 65 6c 6c 65 2d 43 61 6c c3 a9 64 6f 6e\n[31201] 69 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[31225] 22 3a 22 56 61 6e 75 61 74 75 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[31249] 52 65 70 75 62 6c 69 63 20 6f 66 20 56 61 6e 75 61 74 75 22 2c 22 6e 61\n[31273] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 62 69 73 22 3a 7b 22 6f 66 66 69 63\n[31297] 69 61 6c 22 3a 22 52 69 70 61 62 6c 69 6b 20 62 6c 6f 6e 67 20 56 61 6e\n[31321] 75 61 74 75 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 56 61 6e 75 61 74 75 22\n[31345] 7d 2c 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70\n[31369] 75 62 6c 69 63 20 6f 66 20 56 61 6e 75 61 74 75 22 2c 22 63 6f 6d 6d 6f\n[31393] 6e 22 3a 22 56 61 6e 75 61 74 75 22 7d 2c 22 66 72 61 22 3a 7b 22 6f 66\n[31417] 66 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 65 20\n[31441] 56 61 6e 75 61 74 75 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 56 61 6e 75 61\n[31465] 74 75 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[31489] 22 3a 22 53 61 69 6e 74 20 48 65 6c 65 6e 61 2c 20 41 73 63 65 6e 73 69\n[31513] 6f 6e 20 61 6e 64 20 54 72 69 73 74 61 6e 20 64 61 20 43 75 6e 68 61 22\n[31537] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 61 69 6e 74 20 48 65 6c 65 6e\n[31561] 61 2c 20 41 73 63 65 6e 73 69 6f 6e 20 61 6e 64 20 54 72 69 73 74 61 6e\n[31585] 20 64 61 20 43 75 6e 68 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[31609] 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 61 69 6e\n[31633] 74 20 48 65 6c 65 6e 61 2c 20 41 73 63 65 6e 73 69 6f 6e 20 61 6e 64 20\n[31657] 54 72 69 73 74 61 6e 20 64 61 20 43 75 6e 68 61 22 2c 22 63 6f 6d 6d 6f\n[31681] 6e 22 3a 22 53 61 69 6e 74 20 48 65 6c 65 6e 61 2c 20 41 73 63 65 6e 73\n[31705] 69 6f 6e 20 61 6e 64 20 54 72 69 73 74 61 6e 20 64 61 20 43 75 6e 68 61\n[31729] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[31753] 22 54 6f 67 6f 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 54 6f 67 6f 6c\n[31777] 65 73 65 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e 61 6d\n[31801] 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[31825] c3 a9 70 75 62 6c 69 71 75 65 20 74 6f 67 6f 6c 61 69 73 65 22 2c 22 63\n[31849] 6f 6d 6d 6f 6e 22 3a 22 54 6f 67 6f 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65\n[31873] 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 72 69 74 69 73 68 20 56 69 72\n[31897] 67 69 6e 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[31921] 22 56 69 72 67 69 6e 20 49 73 6c 61 6e 64 73 22 2c 22 6e 61 74 69 76 65\n[31945] 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[31969] 3a 22 56 69 72 67 69 6e 20 49 73 6c 61 6e 64 73 22 2c 22 63 6f 6d 6d 6f\n[31993] 6e 22 3a 22 42 72 69 74 69 73 68 20 56 69 72 67 69 6e 20 49 73 6c 61 6e\n[32017] 64 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[32041] 22 3a 22 4b 65 6e 79 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65\n[32065] 70 75 62 6c 69 63 20 6f 66 20 4b 65 6e 79 61 22 2c 22 6e 61 74 69 76 65\n[32089] 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[32113] 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4b 65 6e 79 61 22 2c 22 63 6f\n[32137] 6d 6d 6f 6e 22 3a 22 4b 65 6e 79 61 22 7d 2c 22 73 77 61 22 3a 7b 22 6f\n[32161] 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4b 65\n[32185] 6e 79 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4b 65 6e 79 61 22 7d 7d 7d\n[32209] 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 69 75\n[32233] 65 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4e 69 75 65 22 2c 22 6e 61\n[32257] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63\n[32281] 69 61 6c 22 3a 22 4e 69 75 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 69\n[32305] 75 65 22 7d 2c 22 6e 69 75 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[32329] 4e 69 75 c4 93 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 69 75 c4 93 22 7d\n[32353] 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 48\n[32377] 65 61 72 64 20 49 73 6c 61 6e 64 20 61 6e 64 20 4d 63 44 6f 6e 61 6c 64\n[32401] 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 48 65\n[32425] 61 72 64 20 49 73 6c 61 6e 64 20 61 6e 64 20 4d 63 44 6f 6e 61 6c 64 20\n[32449] 49 73 6c 61 6e 64 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[32473] 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 48 65 61 72 64 20\n[32497] 49 73 6c 61 6e 64 20 61 6e 64 20 4d 63 44 6f 6e 61 6c 64 20 49 73 6c 61\n[32521] 6e 64 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 48 65 61 72 64 20 49 73 6c\n[32545] 61 6e 64 20 61 6e 64 20 4d 63 44 6f 6e 61 6c 64 20 49 73 6c 61 6e 64 73\n[32569] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[32593] 22 52 77 61 6e 64 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70\n[32617] 75 62 6c 69 63 20 6f 66 20 52 77 61 6e 64 61 22 2c 22 6e 61 74 69 76 65\n[32641] 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[32665] 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 52 77 61 6e 64 61 22 2c 22 63\n[32689] 6f 6d 6d 6f 6e 22 3a 22 52 77 61 6e 64 61 22 7d 2c 22 66 72 61 22 3a 7b\n[32713] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20\n[32737] 72 77 61 6e 64 61 69 73 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 52 77 61\n[32761] 6e 64 61 22 7d 2c 22 6b 69 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[32785] 22 52 65 70 75 62 75 6c 69 6b 61 20 79 27 75 20 52 77 61 6e 64 61 22 2c\n[32809] 22 63 6f 6d 6d 6f 6e 22 3a 22 52 77 61 6e 64 61 22 7d 7d 7d 7d 2c 7b 22\n[32833] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 45 73 74 6f 6e 69 61\n[32857] 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f\n[32881] 66 20 45 73 74 6f 6e 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[32905] 7b 22 65 73 74 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 45 65 73 74\n[32929] 69 20 56 61 62 61 72 69 69 6b 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 45 65\n[32953] 73 74 69 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n[32977] 6e 22 3a 22 52 6f 6d 61 6e 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[33001] 22 52 6f 6d 61 6e 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n[33025] 22 72 6f 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 6f 6d c3 a2\n[33049] 6e 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 52 6f 6d c3 a2 6e 69 61 22\n[33073] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n[33097] 54 72 69 6e 69 64 61 64 20 61 6e 64 20 54 6f 62 61 67 6f 22 2c 22 6f 66\n[33121] 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 54 72 69\n[33145] 6e 69 64 61 64 20 61 6e 64 20 54 6f 62 61 67 6f 22 2c 22 6e 61 74 69 76\n[33169] 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[33193] 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 54 72 69 6e 69 64 61 64 20\n[33217] 61 6e 64 20 54 6f 62 61 67 6f 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 54 72\n[33241] 69 6e 69 64 61 64 20 61 6e 64 20 54 6f 62 61 67 6f 22 7d 7d 7d 7d 2c 7b\n[33265] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 79 61 6e 61\n[33289] 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 2d 6f 70 65 72 61 74 69\n[33313] 76 65 20 52 65 70 75 62 6c 69 63 20 6f 66 20 47 75 79 61 6e 61 22 2c 22\n[33337] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66\n[33361] 69 63 69 61 6c 22 3a 22 43 6f 2d 6f 70 65 72 61 74 69 76 65 20 52 65 70\n[33385] 75 62 6c 69 63 20 6f 66 20 47 75 79 61 6e 61 22 2c 22 63 6f 6d 6d 6f 6e\n[33409] 22 3a 22 47 75 79 61 6e 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[33433] 22 63 6f 6d 6d 6f 6e 22 3a 22 54 69 6d 6f 72 2d 4c 65 73 74 65 22 2c 22\n[33457] 6f 66 66 69 63 69 61 6c 22 3a 22 44 65 6d 6f 63 72 61 74 69 63 20 52 65\n[33481] 70 75 62 6c 69 63 20 6f 66 20 54 69 6d 6f 72 2d 4c 65 73 74 65 22 2c 22\n[33505] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 70 6f 72 22 3a 7b 22 6f 66 66\n[33529] 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 44 65 6d 6f 63\n[33553] 72 c3 a1 74 69 63 61 20 64 65 20 54 69 6d 6f 72 2d 4c 65 73 74 65 22 2c\n[33577] 22 63 6f 6d 6d 6f 6e 22 3a 22 54 69 6d 6f 72 2d 4c 65 73 74 65 22 7d 2c\n[33601] 22 74 65 74 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba\n[33625] 62 6c 69 6b 61 20 44 65 6d 6f 6b 72 c3 a1 74 69 6b 61 20 54 69 6d c3 b3\n[33649] 72 2d 4c 65 73 74 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 54 69 6d c3 b3\n[33673] 72 2d 4c 65 73 74 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[33697] 6f 6d 6d 6f 6e 22 3a 22 56 69 65 74 6e 61 6d 22 2c 22 6f 66 66 69 63 69\n[33721] 61 6c 22 3a 22 53 6f 63 69 61 6c 69 73 74 20 52 65 70 75 62 6c 69 63 20\n[33745] 6f 66 20 56 69 65 74 6e 61 6d 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[33769] 3a 7b 22 76 69 65 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 e1 bb\n[33793] 99 6e 67 20 68 c3 b2 61 20 78 c3 a3 20 68 e1 bb 99 69 20 63 68 e1 bb a7\n[33817] 20 6e 67 68 c4 a9 61 20 56 69 e1 bb 87 74 20 4e 61 6d 22 2c 22 63 6f 6d\n[33841] 6d 6f 6e 22 3a 22 56 69 e1 bb 87 74 20 4e 61 6d 22 7d 7d 7d 7d 2c 7b 22\n[33865] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 55 72 75 67 75 61 79\n[33889] 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4f 72 69 65 6e 74 61 6c 20 52\n[33913] 65 70 75 62 6c 69 63 20 6f 66 20 55 72 75 67 75 61 79 22 2c 22 6e 61 74\n[33937] 69 76 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69\n[33961] 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 4f 72 69 65 6e 74 61 6c\n[33985] 20 64 65 6c 20 55 72 75 67 75 61 79 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[34009] 55 72 75 67 75 61 79 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[34033] 6f 6d 6d 6f 6e 22 3a 22 56 61 74 69 63 61 6e 20 43 69 74 79 22 2c 22 6f\n[34057] 66 66 69 63 69 61 6c 22 3a 22 56 61 74 69 63 61 6e 20 43 69 74 79 20 53\n[34081] 74 61 74 65 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 69 74 61\n[34105] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 74 61 74 6f 20 64 65 6c\n[34129] 6c 61 20 43 69 74 74 c3 a0 20 64 65 6c 20 56 61 74 69 63 61 6e 6f 22 2c\n[34153] 22 63 6f 6d 6d 6f 6e 22 3a 22 56 61 74 69 63 61 6e 6f 22 7d 2c 22 6c 61\n[34177] 74 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 74 61 74 75 73 20 43\n[34201] 69 76 69 74 61 74 69 73 20 56 61 74 69 63 61 6e c3 a6 22 2c 22 63 6f 6d\n[34225] 6d 6f 6e 22 3a 22 56 61 74 69 63 61 6e c3 a6 22 7d 7d 7d 7d 2c 7b 22 6e\n[34249] 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 48 6f 6e 67 20 4b 6f 6e\n[34273] 67 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 48 6f 6e 67 20 4b 6f 6e 67\n[34297] 20 53 70 65 63 69 61 6c 20 41 64 6d 69 6e 69 73 74 72 61 74 69 76 65 20\n[34321] 52 65 67 69 6f 6e 20 6f 66 20 74 68 65 20 50 65 6f 70 6c 65 27 73 20 52\n[34345] 65 70 75 62 6c 69 63 20 6f 66 20 43 68 69 6e 61 22 2c 22 6e 61 74 69 76\n[34369] 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[34393] 22 3a 22 48 6f 6e 67 20 4b 6f 6e 67 20 53 70 65 63 69 61 6c 20 41 64 6d\n[34417] 69 6e 69 73 74 72 61 74 69 76 65 20 52 65 67 69 6f 6e 20 6f 66 20 74 68\n[34441] 65 20 50 65 6f 70 6c 65 27 73 20 52 65 70 75 62 6c 69 63 20 6f 66 20 43\n[34465] 68 69 6e 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 48 6f 6e 67 20 4b 6f 6e\n[34489] 67 22 7d 2c 22 7a 68 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e4\n[34513] b8 ad e5 8d 8e e4 ba ba e6 b0 91 e5 85 b1 e5 92 8c e5 9b bd e9 a6 99 e6\n[34537] b8 af e7 89 b9 e5 88 ab e8 a1 8c e6 94 bf e5 8c ba 22 2c 22 63 6f 6d 6d\n[34561] 6f 6e 22 3a 22 e9 a6 99 e6 b8 af 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22\n[34585] 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 75 73 74 72 69 61 22 2c 22 6f 66\n[34609] 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 41 75 73\n[34633] 74 72 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 62 61 72\n[34657] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 6b 20\n[34681] c3 96 73 74 65 72 72 65 69 63 68 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 c3\n[34705] 96 73 74 65 72 72 65 69 63 68 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[34729] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 6e 74 69 67 75 61 20 61 6e 64 20 42\n[34753] 61 72 62 75 64 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 41 6e 74 69\n[34777] 67 75 61 20 61 6e 64 20 42 61 72 62 75 64 61 22 2c 22 6e 61 74 69 76 65\n[34801] 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[34825] 3a 22 41 6e 74 69 67 75 61 20 61 6e 64 20 42 61 72 62 75 64 61 22 2c 22\n[34849] 63 6f 6d 6d 6f 6e 22 3a 22 41 6e 74 69 67 75 61 20 61 6e 64 20 42 61 72\n[34873] 62 75 64 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[34897] 6f 6e 22 3a 22 54 75 72 6b 6d 65 6e 69 73 74 61 6e 22 2c 22 6f 66 66 69\n[34921] 63 69 61 6c 22 3a 22 54 75 72 6b 6d 65 6e 69 73 74 61 6e 22 2c 22 6e 61\n[34945] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 72 75 73 22 3a 7b 22 6f 66 66 69 63\n[34969] 69 61 6c 22 3a 22 d0 a2 d1 83 d1 80 d0 ba d0 bc d0 b5 d0 bd d0 b8 d1 81\n[34993] d1 82 d0 b0 d0 bd 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 a2 d1 83 d1 80\n[35017] d0 ba d0 bc d0 b5 d0 bd d0 b8 d1 8f 22 7d 2c 22 74 75 6b 22 3a 7b 22 6f\n[35041] 66 66 69 63 69 61 6c 22 3a 22 54 c3 bc 72 6b 6d 65 6e 69 73 74 61 6e 22\n[35065] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 54 c3 bc 72 6b 6d 65 6e 69 73 74 61 6e\n[35089] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[35113] 22 4d 6f 7a 61 6d 62 69 71 75 65 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[35137] 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4d 6f 7a 61 6d 62 69 71 75 65 22\n[35161] 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 70 6f 72 22 3a 7b 22 6f\n[35185] 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 65 20\n[35209] 4d 6f c3 a7 61 6d 62 69 71 75 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d\n[35233] 6f c3 a7 61 6d 62 69 71 75 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[35257] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 6e 61 6d 61 22 2c 22 6f 66 66 69\n[35281] 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 50 61 6e 61 6d\n[35305] 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b\n[35329] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64\n[35353] 65 20 50 61 6e 61 6d c3 a1 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 61 6e\n[35377] 61 6d c3 a1 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[35401] 6f 6e 22 3a 22 4d 69 63 72 6f 6e 65 73 69 61 22 2c 22 6f 66 66 69 63 69\n[35425] 61 6c 22 3a 22 46 65 64 65 72 61 74 65 64 20 53 74 61 74 65 73 20 6f 66\n[35449] 20 4d 69 63 72 6f 6e 65 73 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65\n[35473] 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 46 65\n[35497] 64 65 72 61 74 65 64 20 53 74 61 74 65 73 20 6f 66 20 4d 69 63 72 6f 6e\n[35521] 65 73 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 69 63 72 6f 6e 65 73\n[35545] 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[35569] 22 3a 22 49 72 65 6c 61 6e 64 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[35593] 52 65 70 75 62 6c 69 63 20 6f 66 20 49 72 65 6c 61 6e 64 22 2c 22 6e 61\n[35617] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63\n[35641] 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 49 72 65 6c 61 6e\n[35665] 64 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 49 72 65 6c 61 6e 64 22 7d 2c 22\n[35689] 67 6c 65 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 50 6f 62 6c 61 63\n[35713] 68 74 20 6e 61 20 68 c3 89 69 72 65 61 6e 6e 22 2c 22 63 6f 6d 6d 6f 6e\n[35737] 22 3a 22 c3 89 69 72 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[35761] 63 6f 6d 6d 6f 6e 22 3a 22 43 75 72 61 c3 a7 61 6f 22 2c 22 6f 66 66 69\n[35785] 63 69 61 6c 22 3a 22 43 6f 75 6e 74 72 79 20 6f 66 20 43 75 72 61 c3 a7\n[35809] 61 6f 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a\n[35833] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 75 6e 74 72 79 20 6f 66 20\n[35857] 43 75 72 61 c3 a7 61 6f 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 43 75 72 61\n[35881] c3 a7 61 6f 22 7d 2c 22 6e 6c 64 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[35905] 3a 22 4c 61 6e 64 20 43 75 72 61 c3 a7 61 6f 22 2c 22 63 6f 6d 6d 6f 6e\n[35929] 22 3a 22 43 75 72 61 c3 a7 61 6f 22 7d 2c 22 70 61 70 22 3a 7b 22 6f 66\n[35953] 66 69 63 69 61 6c 22 3a 22 50 61 69 73 20 4b c3 b2 72 73 6f 75 22 2c 22\n[35977] 63 6f 6d 6d 6f 6e 22 3a 22 50 61 69 73 20 4b c3 b2 72 73 6f 75 22 7d 7d\n[36001] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 46 72\n[36025] 65 6e 63 68 20 47 75 69 61 6e 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[36049] 22 47 75 69 61 6e 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[36073] 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 75 79 61 6e 65\n[36097] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 79 61 6e 65 20 66 72 61 6e c3\n[36121] a7 61 69 73 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d\n[36145] 6d 6f 6e 22 3a 22 4e 6f 72 77 61 79 22 2c 22 6f 66 66 69 63 69 61 6c 22\n[36169] 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 4e 6f 72 77 61 79 22 2c 22 6e 61\n[36193] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6e 6e 6f 22 3a 7b 22 6f 66 66 69 63\n[36217] 69 61 6c 22 3a 22 4b 6f 6e 67 65 72 69 6b 65 74 20 4e 6f 72 65 67 22 2c\n[36241] 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 6f 72 65 67 22 7d 2c 22 6e 6f 62 22 3a\n[36265] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 6f 6e 67 65 72 69 6b 65 74 20\n[36289] 4e 6f 72 67 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 6f 72 67 65 22 7d\n[36313] 2c 22 73 6d 69 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4e 6f 72 67\n[36337] 67 61 20 67 6f 6e 61 67 61 73 72 69 69 6b 61 22 2c 22 63 6f 6d 6d 6f 6e\n[36361] 22 3a 22 4e 6f 72 67 67 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[36385] 22 63 6f 6d 6d 6f 6e 22 3a 22 c3 85 6c 61 6e 64 20 49 73 6c 61 6e 64 73\n[36409] 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 c3 85 6c 61 6e 64 20 49 73 6c\n[36433] 61 6e 64 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 77 65\n[36457] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4c 61 6e 64 73 6b 61 70 65\n[36481] 74 20 c3 85 6c 61 6e 64 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 c3 85 6c 61\n[36505] 6e 64 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[36529] 22 3a 22 43 65 6e 74 72 61 6c 20 41 66 72 69 63 61 6e 20 52 65 70 75 62\n[36553] 6c 69 63 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 65 6e 74 72 61 6c\n[36577] 20 41 66 72 69 63 61 6e 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69\n[36601] 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61\n[36625] 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 63 65 6e 74 72 61 66 72\n[36649] 69 63 61 69 6e 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 52 c3 a9 70 75 62\n[36673] 6c 69 71 75 65 20 63 65 6e 74 72 61 66 72 69 63 61 69 6e 65 22 7d 2c 22\n[36697] 73 61 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b c3 b6 64 c3 b6\n[36721] 72 c3 b6 73 c3 aa 73 65 20 74 c3 ae 20 42 c3 aa 61 66 72 c3 ae 6b 61 22\n[36745] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 c3 aa 61 66 72 c3 ae 6b 61 22 7d 7d\n[36769] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 75\n[36793] 72 6b 69 6e 61 20 46 61 73 6f 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[36817] 42 75 72 6b 69 6e 61 20 46 61 73 6f 22 2c 22 6e 61 74 69 76 65 4e 61 6d\n[36841] 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[36865] c3 a9 70 75 62 6c 69 71 75 65 20 64 75 20 42 75 72 6b 69 6e 61 22 2c 22\n[36889] 63 6f 6d 6d 6f 6e 22 3a 22 42 75 72 6b 69 6e 61 20 46 61 73 6f 22 7d 7d\n[36913] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 45 72\n[36937] 69 74 72 65 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 74 61 74 65\n[36961] 20 6f 66 20 45 72 69 74 72 65 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65\n[36985] 22 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 af\n[37009] d9 88 d9 84 d8 a9 20 d8 a5 d8 b1 d8 aa d8 b1 d9 8a d8 a7 22 2c 22 63 6f\n[37033] 6d 6d 6f 6e 22 3a 22 d8 a5 d8 b1 d8 aa d8 b1 d9 8a d8 a7 e2 80 8e 22 7d\n[37057] 2c 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 74 61 74\n[37081] 65 20 6f 66 20 45 72 69 74 72 65 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[37105] 45 72 69 74 72 65 61 22 7d 2c 22 74 69 72 22 3a 7b 22 6f 66 66 69 63 69\n[37129] 61 6c 22 3a 22 e1 88 83 e1 8c 88 e1 88 a8 20 e1 8a a4 e1 88 ad e1 89 b5\n[37153] e1 88 ab 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 e1 8a a4 e1 88 ad e1 89 b5\n[37177] e1 88 ab 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n[37201] 6e 22 3a 22 54 61 6e 7a 61 6e 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22\n[37225] 3a 22 55 6e 69 74 65 64 20 52 65 70 75 62 6c 69 63 20 6f 66 20 54 61 6e\n[37249] 7a 61 6e 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e\n[37273] 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 55 6e 69 74 65 64 20 52\n[37297] 65 70 75 62 6c 69 63 20 6f 66 20 54 61 6e 7a 61 6e 69 61 22 2c 22 63 6f\n[37321] 6d 6d 6f 6e 22 3a 22 54 61 6e 7a 61 6e 69 61 22 7d 2c 22 73 77 61 22 3a\n[37345] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4a 61 6d 68 75 72 69 20 79 61 20\n[37369] 4d 75 75 6e 67 61 6e 6f 20 77 61 20 54 61 6e 7a 61 6e 69 61 22 2c 22 63\n[37393] 6f 6d 6d 6f 6e 22 3a 22 54 61 6e 7a 61 6e 69 61 22 7d 7d 7d 7d 2c 7b 22\n[37417] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6f 75 74 68 20 4b\n[37441] 6f 72 65 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c\n[37465] 69 63 20 6f 66 20 4b 6f 72 65 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65\n[37489] 22 3a 7b 22 6b 6f 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 eb 8c\n[37513] 80 ed 95 9c eb af bc ea b5 ad 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 ed 95\n[37537] 9c ea b5 ad 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[37561] 6f 6e 22 3a 22 4a 6f 72 64 61 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[37585] 22 48 61 73 68 65 6d 69 74 65 20 4b 69 6e 67 64 6f 6d 20 6f 66 20 4a 6f\n[37609] 72 64 61 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61\n[37633] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84 d9 85 d9 85 d9\n[37657] 84 d9 83 d8 a9 20 d8 a7 d9 84 d8 a3 d8 b1 d8 af d9 86 d9 8a d8 a9 20 d8\n[37681] a7 d9 84 d9 87 d8 a7 d8 b4 d9 85 d9 8a d8 a9 22 2c 22 63 6f 6d 6d 6f 6e\n[37705] 22 3a 22 d8 a7 d9 84 d8 a3 d8 b1 d8 af d9 86 22 7d 7d 7d 7d 2c 7b 22 6e\n[37729] 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 75 72 69 74 61 6e\n[37753] 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 73 6c 61 6d 69 63 20\n[37777] 52 65 70 75 62 6c 69 63 20 6f 66 20 4d 61 75 72 69 74 61 6e 69 61 22 2c\n[37801] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22 3a 7b 22 6f 66\n[37825] 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84 d8 ac d9 85 d9 87 d9 88 d8 b1 d9\n[37849] 8a d8 a9 20 d8 a7 d9 84 d8 a5 d8 b3 d9 84 d8 a7 d9 85 d9 8a d8 a9 20 d8\n[37873] a7 d9 84 d9 85 d9 88 d8 b1 d9 8a d8 aa d8 a7 d9 86 d9 8a d8 a9 22 2c 22\n[37897] 63 6f 6d 6d 6f 6e 22 3a 22 d9 85 d9 88 d8 b1 d9 8a d8 aa d8 a7 d9 86 d9\n[37921] 8a d8 a7 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n[37945] 6e 22 3a 22 4c 69 74 68 75 61 6e 69 61 22 2c 22 6f 66 66 69 63 69 61 6c\n[37969] 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4c 69 74 68 75 61 6e 69 61\n[37993] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6c 69 74 22 3a 7b 22\n[38017] 6f 66 66 69 63 69 61 6c 22 3a 22 4c 69 65 74 75 76 6f 73 20 52 65 73 70\n[38041] 75 62 6c 69 6b 6f 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 69 65 74 75\n[38065] 76 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[38089] 22 3a 22 55 6e 69 74 65 64 20 53 74 61 74 65 73 20 4d 69 6e 6f 72 20 4f\n[38113] 75 74 6c 79 69 6e 67 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69\n[38137] 61 6c 22 3a 22 55 6e 69 74 65 64 20 53 74 61 74 65 73 20 4d 69 6e 6f 72\n[38161] 20 4f 75 74 6c 79 69 6e 67 20 49 73 6c 61 6e 64 73 22 2c 22 6e 61 74 69\n[38185] 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61\n[38209] 6c 22 3a 22 55 6e 69 74 65 64 20 53 74 61 74 65 73 20 4d 69 6e 6f 72 20\n[38233] 4f 75 74 6c 79 69 6e 67 20 49 73 6c 61 6e 64 73 22 2c 22 63 6f 6d 6d 6f\n[38257] 6e 22 3a 22 55 6e 69 74 65 64 20 53 74 61 74 65 73 20 4d 69 6e 6f 72 20\n[38281] 4f 75 74 6c 79 69 6e 67 20 49 73 6c 61 6e 64 73 22 7d 7d 7d 7d 2c 7b 22\n[38305] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 6c 6f 76 61 6b 69\n[38329] 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 6c 6f 76 61 6b 20 52 65\n[38353] 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73\n[38377] 6c 6b 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 6c 6f 76 65 6e 73\n[38401] 6b c3 a1 20 72 65 70 75 62 6c 69 6b 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[38425] 22 53 6c 6f 76 65 6e 73 6b 6f 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[38449] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 6e 67 6f 6c 61 22 2c 22 6f 66 66 69\n[38473] 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 41 6e 67 6f 6c\n[38497] 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 70 6f 72 22 3a 7b\n[38521] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64\n[38545] 65 20 41 6e 67 6f 6c 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 41 6e 67 6f\n[38569] 6c 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[38593] 22 3a 22 4b 61 7a 61 6b 68 73 74 61 6e 22 2c 22 6f 66 66 69 63 69 61 6c\n[38617] 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4b 61 7a 61 6b 68 73 74 61\n[38641] 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6b 61 7a 22 3a 7b\n[38665] 22 6f 66 66 69 63 69 61 6c 22 3a 22 d2 9a d0 b0 d0 b7 d0 b0 d2 9b d1 81\n[38689] d1 82 d0 b0 d0 bd 20 d0 a0 d0 b5 d1 81 d0 bf d1 83 d0 b1 d0 bb d0 b8 d0\n[38713] ba d0 b0 d1 81 d1 8b 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d2 9a d0 b0 d0\n[38737] b7 d0 b0 d2 9b d1 81 d1 82 d0 b0 d0 bd 22 7d 2c 22 72 75 73 22 3a 7b 22\n[38761] 6f 66 66 69 63 69 61 6c 22 3a 22 d0 a0 d0 b5 d1 81 d0 bf d1 83 d0 b1 d0\n[38785] bb d0 b8 d0 ba d0 b0 20 d0 9a d0 b0 d0 b7 d0 b0 d1 85 d1 81 d1 82 d0 b0\n[38809] d0 bd 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 9a d0 b0 d0 b7 d0 b0 d1 85\n[38833] d1 81 d1 82 d0 b0 d0 bd 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[38857] 63 6f 6d 6d 6f 6e 22 3a 22 4d 6f 6c 64 6f 76 61 22 2c 22 6f 66 66 69 63\n[38881] 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4d 6f 6c 64 6f 76\n[38905] 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 72 6f 6e 22 3a 7b\n[38929] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 61 20 4d 6f\n[38953] 6c 64 6f 76 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 6f 6c 64 6f 76 61\n[38977] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[39001] 22 4d 61 6c 69 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62\n[39025] 6c 69 63 20 6f 66 20 4d 61 6c 69 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65\n[39049] 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 c3\n[39073] a9 70 75 62 6c 69 71 75 65 20 64 75 20 4d 61 6c 69 22 2c 22 63 6f 6d 6d\n[39097] 6f 6e 22 3a 22 4d 61 6c 69 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[39121] 22 63 6f 6d 6d 6f 6e 22 3a 22 46 61 6c 6b 6c 61 6e 64 20 49 73 6c 61 6e\n[39145] 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 46 61 6c 6b 6c 61 6e 64\n[39169] 20 49 73 6c 61 6e 64 73 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n[39193] 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 46 61 6c 6b 6c\n[39217] 61 6e 64 20 49 73 6c 61 6e 64 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 46\n[39241] 61 6c 6b 6c 61 6e 64 20 49 73 6c 61 6e 64 73 22 7d 7d 7d 7d 2c 7b 22 6e\n[39265] 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 72 6d 65 6e 69 61 22\n[39289] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66\n[39313] 20 41 72 6d 65 6e 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n[39337] 22 68 79 65 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d5 80 d5 a1 d5\n[39361] b5 d5 a1 d5 bd d5 bf d5 a1 d5 b6 d5 ab 20 d5 80 d5 a1 d5 b6 d6 80 d5 a1\n[39385] d5 ba d5 a5 d5 bf d5 b8 d6 82 d5 a9 d5 b5 d5 b8 d6 82 d5 b6 22 2c 22 63\n[39409] 6f 6d 6d 6f 6e 22 3a 22 d5 80 d5 a1 d5 b5 d5 a1 d5 bd d5 bf d5 a1 d5 b6\n[39433] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[39457] 22 53 61 6d 6f 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 6e 64 65\n[39481] 70 65 6e 64 65 6e 74 20 53 74 61 74 65 20 6f 66 20 53 61 6d 6f 61 22 2c\n[39505] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66\n[39529] 66 69 63 69 61 6c 22 3a 22 49 6e 64 65 70 65 6e 64 65 6e 74 20 53 74 61\n[39553] 74 65 20 6f 66 20 53 61 6d 6f 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53\n[39577] 61 6d 6f 61 22 7d 2c 22 73 6d 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[39601] 3a 22 4d 61 6c 6f 20 53 61 ca bb 6f 6c 6f 74 6f 20 54 75 74 6f ca bb 61\n[39625] 74 61 73 69 20 6f 20 53 c4 81 6d 6f 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[39649] 22 53 c4 81 6d 6f 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[39673] 6f 6d 6d 6f 6e 22 3a 22 4a 65 72 73 65 79 22 2c 22 6f 66 66 69 63 69 61\n[39697] 6c 22 3a 22 42 61 69 6c 69 77 69 63 6b 20 6f 66 20 4a 65 72 73 65 79 22\n[39721] 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f\n[39745] 66 66 69 63 69 61 6c 22 3a 22 42 61 69 6c 69 77 69 63 6b 20 6f 66 20 4a\n[39769] 65 72 73 65 79 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4a 65 72 73 65 79 22\n[39793] 7d 2c 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 61 69\n[39817] 6c 6c 69 61 67 65 20 64 65 20 4a 65 72 73 65 79 22 2c 22 63 6f 6d 6d 6f\n[39841] 6e 22 3a 22 4a 65 72 73 65 79 22 7d 2c 22 6e 72 66 22 3a 7b 22 6f 66 66\n[39865] 69 63 69 61 6c 22 3a 22 42 61 69 6c 6c 69 61 67 65 20 64 c3 a9 20 4a c3\n[39889] a8 72 72 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4a c3 a8 72 72 69 22 7d\n[39913] 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4a\n[39937] 61 70 61 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4a 61 70 61 6e 22\n[39961] 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6a 70 6e 22 3a 7b 22 6f\n[39985] 66 66 69 63 69 61 6c 22 3a 22 e6 97 a5 e6 9c ac 22 2c 22 63 6f 6d 6d 6f\n[40009] 6e 22 3a 22 e6 97 a5 e6 9c ac 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[40033] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 6f 6c 69 76 69 61 22 2c 22 6f 66 66\n[40057] 69 63 69 61 6c 22 3a 22 50 6c 75 72 69 6e 61 74 69 6f 6e 61 6c 20 53 74\n[40081] 61 74 65 20 6f 66 20 42 6f 6c 69 76 69 61 22 2c 22 6e 61 74 69 76 65 4e\n[40105] 61 6d 65 22 3a 7b 22 61 79 6d 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[40129] 22 57 75 6c 69 77 79 61 20 53 75 79 75 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[40153] 22 57 75 6c 69 77 79 61 22 7d 2c 22 67 72 6e 22 3a 7b 22 6f 66 66 69 63\n[40177] 69 61 6c 22 3a 22 54 65 74 c3 a3 20 56 6f 6c c3 ad 76 69 61 22 2c 22 63\n[40201] 6f 6d 6d 6f 6e 22 3a 22 56 6f 6c c3 ad 76 69 61 22 7d 2c 22 71 75 65 22\n[40225] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 75 6c 69 77 79 61 20 4d 61\n[40249] 6d 61 6c 6c 61 71 74 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 75 6c 69\n[40273] 77 79 61 22 7d 2c 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[40297] 22 45 73 74 61 64 6f 20 50 6c 75 72 69 6e 61 63 69 6f 6e 61 6c 20 64 65\n[40321] 20 42 6f 6c 69 76 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 6f 6c 69\n[40345] 76 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f\n[40369] 6e 22 3a 22 43 68 69 6c 65 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[40393] 65 70 75 62 6c 69 63 20 6f 66 20 43 68 69 6c 65 22 2c 22 6e 61 74 69 76\n[40417] 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[40441] 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 65 20 43 68 69 6c 65 22 2c\n[40465] 22 63 6f 6d 6d 6f 6e 22 3a 22 43 68 69 6c 65 22 7d 7d 7d 7d 2c 7b 22 6e\n[40489] 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 55 6e 69 74 65 64 20 53\n[40513] 74 61 74 65 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 55 6e 69 74 65\n[40537] 64 20 53 74 61 74 65 73 20 6f 66 20 41 6d 65 72 69 63 61 22 2c 22 6e 61\n[40561] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63\n[40585] 69 61 6c 22 3a 22 55 6e 69 74 65 64 20 53 74 61 74 65 73 20 6f 66 20 41\n[40609] 6d 65 72 69 63 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 55 6e 69 74 65 64\n[40633] 20 53 74 61 74 65 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[40657] 6f 6d 6d 6f 6e 22 3a 22 53 61 69 6e 74 20 56 69 6e 63 65 6e 74 20 61 6e\n[40681] 64 20 74 68 65 20 47 72 65 6e 61 64 69 6e 65 73 22 2c 22 6f 66 66 69 63\n[40705] 69 61 6c 22 3a 22 53 61 69 6e 74 20 56 69 6e 63 65 6e 74 20 61 6e 64 20\n[40729] 74 68 65 20 47 72 65 6e 61 64 69 6e 65 73 22 2c 22 6e 61 74 69 76 65 4e\n[40753] 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[40777] 22 53 61 69 6e 74 20 56 69 6e 63 65 6e 74 20 61 6e 64 20 74 68 65 20 47\n[40801] 72 65 6e 61 64 69 6e 65 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 61 69\n[40825] 6e 74 20 56 69 6e 63 65 6e 74 20 61 6e 64 20 74 68 65 20 47 72 65 6e 61\n[40849] 64 69 6e 65 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d\n[40873] 6d 6f 6e 22 3a 22 42 65 72 6d 75 64 61 22 2c 22 6f 66 66 69 63 69 61 6c\n[40897] 22 3a 22 42 65 72 6d 75 64 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[40921] 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 65 72\n[40945] 6d 75 64 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 65 72 6d 75 64 61 22\n[40969] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n[40993] 53 65 79 63 68 65 6c 6c 65 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[41017] 52 65 70 75 62 6c 69 63 20 6f 66 20 53 65 79 63 68 65 6c 6c 65 73 22 2c\n[41041] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 63 72 73 22 3a 7b 22 6f 66\n[41065] 66 69 63 69 61 6c 22 3a 22 52 65 70 69 62 6c 69 6b 20 53 65 73 65 6c 22\n[41089] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 65 73 65 6c 22 7d 2c 22 65 6e 67 22\n[41113] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f\n[41137] 66 20 53 65 79 63 68 65 6c 6c 65 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[41161] 53 65 79 63 68 65 6c 6c 65 73 22 7d 2c 22 66 72 61 22 3a 7b 22 6f 66 66\n[41185] 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 65 73 20\n[41209] 53 65 79 63 68 65 6c 6c 65 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 65\n[41233] 79 63 68 65 6c 6c 65 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[41257] 63 6f 6d 6d 6f 6e 22 3a 22 42 72 69 74 69 73 68 20 49 6e 64 69 61 6e 20\n[41281] 4f 63 65 61 6e 20 54 65 72 72 69 74 6f 72 79 22 2c 22 6f 66 66 69 63 69\n[41305] 61 6c 22 3a 22 42 72 69 74 69 73 68 20 49 6e 64 69 61 6e 20 4f 63 65 61\n[41329] 6e 20 54 65 72 72 69 74 6f 72 79 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65\n[41353] 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 72\n[41377] 69 74 69 73 68 20 49 6e 64 69 61 6e 20 4f 63 65 61 6e 20 54 65 72 72 69\n[41401] 74 6f 72 79 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 72 69 74 69 73 68 20\n[41425] 49 6e 64 69 61 6e 20 4f 63 65 61 6e 20 54 65 72 72 69 74 6f 72 79 22 7d\n[41449] 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 47\n[41473] 75 61 74 65 6d 61 6c 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65\n[41497] 70 75 62 6c 69 63 20 6f 66 20 47 75 61 74 65 6d 61 6c 61 22 2c 22 6e 61\n[41521] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63\n[41545] 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 65 20 47 75 61 74\n[41569] 65 6d 61 6c 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 61 74 65 6d 61\n[41593] 6c 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e\n[41617] 22 3a 22 45 63 75 61 64 6f 72 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[41641] 52 65 70 75 62 6c 69 63 20 6f 66 20 45 63 75 61 64 6f 72 22 2c 22 6e 61\n[41665] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63\n[41689] 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 64 65 6c 20 45 63 75\n[41713] 61 64 6f 72 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 45 63 75 61 64 6f 72 22\n[41737] 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22\n[41761] 4d 61 72 74 69 6e 69 71 75 65 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[41785] 4d 61 72 74 69 6e 69 71 75 65 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22\n[41809] 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4d 61 72\n[41833] 74 69 6e 69 71 75 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 72 74 69\n[41857] 6e 69 71 75 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d\n[41881] 6d 6f 6e 22 3a 22 54 61 6a 69 6b 69 73 74 61 6e 22 2c 22 6f 66 66 69 63\n[41905] 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 54 61 6a 69 6b 69\n[41929] 73 74 61 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 72 75 73\n[41953] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d0 a0 d0 b5 d1 81 d0 bf d1\n[41977] 83 d0 b1 d0 bb d0 b8 d0 ba d0 b0 20 d0 a2 d0 b0 d0 b4 d0 b6 d0 b8 d0 ba\n[42001] d0 b8 d1 81 d1 82 d0 b0 d0 bd 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 a2\n[42025] d0 b0 d0 b4 d0 b6 d0 b8 d0 ba d0 b8 d1 81 d1 82 d0 b0 d0 bd 22 7d 2c 22\n[42049] 74 67 6b 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d2 b6 d1 83 d0 bc\n[42073] d2 b3 d1 83 d1 80 d0 b8 d0 b8 20 d0 a2 d0 be d2 b7 d0 b8 d0 ba d0 b8 d1\n[42097] 81 d1 82 d0 be d0 bd 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 a2 d0 be d2\n[42121] b7 d0 b8 d0 ba d0 b8 d1 81 d1 82 d0 be d0 bd 22 7d 7d 7d 7d 2c 7b 22 6e\n[42145] 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 6c 74 61 22 2c 22\n[42169] 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4d\n[42193] 61 6c 74 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67\n[42217] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20\n[42241] 6f 66 20 4d 61 6c 74 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 61 6c 74\n[42265] 61 22 7d 2c 22 6d 6c 74 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[42289] 65 70 75 62 62 6c 69 6b 61 20 74 61 20 27 20 4d 61 6c 74 61 22 2c 22 63\n[42313] 6f 6d 6d 6f 6e 22 3a 22 4d 61 6c 74 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d\n[42337] 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 47 61 6d 62 69 61 22 2c 22 6f\n[42361] 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 74 68\n[42385] 65 20 47 61 6d 62 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n[42409] 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62\n[42433] 6c 69 63 20 6f 66 20 74 68 65 20 47 61 6d 62 69 61 22 2c 22 63 6f 6d 6d\n[42457] 6f 6e 22 3a 22 47 61 6d 62 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22\n[42481] 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 69 67 65 72 69 61 22 2c 22 6f 66\n[42505] 66 69 63 69 61 6c 22 3a 22 46 65 64 65 72 61 6c 20 52 65 70 75 62 6c 69\n[42529] 63 20 6f 66 20 4e 69 67 65 72 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d\n[42553] 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 46\n[42577] 65 64 65 72 61 6c 20 52 65 70 75 62 6c 69 63 20 6f 66 20 4e 69 67 65 72\n[42601] 69 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 69 67 65 72 69 61 22 7d 7d\n[42625] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 61\n[42649] 68 61 6d 61 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 43 6f 6d 6d 6f\n[42673] 6e 77 65 61 6c 74 68 20 6f 66 20 74 68 65 20 42 61 68 61 6d 61 73 22 2c\n[42697] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66\n[42721] 66 69 63 69 61 6c 22 3a 22 43 6f 6d 6d 6f 6e 77 65 61 6c 74 68 20 6f 66\n[42745] 20 74 68 65 20 42 61 68 61 6d 61 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[42769] 42 61 68 61 6d 61 73 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[42793] 6f 6d 6d 6f 6e 22 3a 22 4b 6f 73 6f 76 6f 22 2c 22 6f 66 66 69 63 69 61\n[42817] 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 4b 6f 73 6f 76 6f 22 2c\n[42841] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 71 69 22 3a 7b 22 6f 66\n[42865] 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 6b 61 20 65 20 4b 6f 73\n[42889] 6f 76 c3 ab 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4b 6f 73 6f 76 61 22\n[42913] 7d 2c 22 73 72 70 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d0 a0 d0\n[42937] b5 d0 bf d1 83 d0 b1 d0 bb d0 b8 d0 ba d0 b0 20 d0 9a d0 be d1 81 d0 be\n[42961] d0 b2 d0 be 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 9a d0 be d1 81 d0 be\n[42985] d0 b2 d0 be 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[43009] 6f 6e 22 3a 22 4b 75 77 61 69 74 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[43033] 22 53 74 61 74 65 20 6f 66 20 4b 75 77 61 69 74 22 2c 22 6e 61 74 69 76\n[43057] 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[43081] 22 3a 22 d8 af d9 88 d9 84 d8 a9 20 d8 a7 d9 84 d9 83 d9 88 d9 8a d8 aa\n[43105] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 a7 d9 84 d9 83 d9 88 d9 8a d8 aa\n[43129] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[43153] 22 4d 61 6c 64 69 76 65 73 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[43177] 65 70 75 62 6c 69 63 20 6f 66 20 74 68 65 20 4d 61 6c 64 69 76 65 73 22\n[43201] 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 64 69 76 22 3a 7b 22 6f\n[43225] 66 66 69 63 69 61 6c 22 3a 22 de 8b de a8 de 88 de ac de 80 de a8 de 83\n[43249] de a7 de 87 de b0 de 96 de ad de 8e de ac 20 de 96 de aa de 89 de b0 de\n[43273] 80 de ab de 83 de a8 de 87 de b0 de 94 de a7 22 2c 22 63 6f 6d 6d 6f 6e\n[43297] 22 3a 22 de 8b de a8 de 88 de ac de 80 de a8 de 83 de a7 de 87 de b0 de\n[43321] 96 de ad de 8e de ac 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[43345] 6f 6d 6d 6f 6e 22 3a 22 53 6f 75 74 68 20 53 75 64 61 6e 22 2c 22 6f 66\n[43369] 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 53 6f 75\n[43393] 74 68 20 53 75 64 61 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b\n[43417] 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62\n[43441] 6c 69 63 20 6f 66 20 53 6f 75 74 68 20 53 75 64 61 6e 22 2c 22 63 6f 6d\n[43465] 6d 6f 6e 22 3a 22 53 6f 75 74 68 20 53 75 64 61 6e 22 7d 7d 7d 7d 2c 7b\n[43489] 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 49 72 61 6e 22 2c\n[43513] 22 6f 66 66 69 63 69 61 6c 22 3a 22 49 73 6c 61 6d 69 63 20 52 65 70 75\n[43537] 62 6c 69 63 20 6f 66 20 49 72 61 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d\n[43561] 65 22 3a 7b 22 66 61 73 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8\n[43585] ac d9 85 d9 87 d9 88 d8 b1 db 8c 20 d8 a7 d8 b3 d9 84 d8 a7 d9 85 db 8c\n[43609] 20 d8 a7 db 8c d8 b1 d8 a7 d9 86 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8\n[43633] a7 db 8c d8 b1 d8 a7 d9 86 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[43657] 22 63 6f 6d 6d 6f 6e 22 3a 22 41 6c 62 61 6e 69 61 22 2c 22 6f 66 66 69\n[43681] 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 41 6c 62 61 6e\n[43705] 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 71 69 22 3a\n[43729] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 6b 61 20 65\n[43753] 20 53 68 71 69 70 c3 ab 72 69 73 c3 ab 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[43777] 22 53 68 71 69 70 c3 ab 72 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22\n[43801] 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 72 61 7a 69 6c 22 2c 22 6f 66 66\n[43825] 69 63 69 61 6c 22 3a 22 46 65 64 65 72 61 74 69 76 65 20 52 65 70 75 62\n[43849] 6c 69 63 20 6f 66 20 42 72 61 7a 69 6c 22 2c 22 6e 61 74 69 76 65 4e 61\n[43873] 6d 65 22 3a 7b 22 70 6f 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[43897] 52 65 70 c3 ba 62 6c 69 63 61 20 46 65 64 65 72 61 74 69 76 61 20 64 6f\n[43921] 20 42 72 61 73 69 6c 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 72 61 73 69\n[43945] 6c 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22\n[43969] 3a 22 53 65 72 62 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65\n[43993] 70 75 62 6c 69 63 20 6f 66 20 53 65 72 62 69 61 22 2c 22 6e 61 74 69 76\n[44017] 65 4e 61 6d 65 22 3a 7b 22 73 72 70 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[44041] 22 3a 22 d0 a0 d0 b5 d0 bf d1 83 d0 b1 d0 bb d0 b8 d0 ba d0 b0 20 d0 a1\n[44065] d1 80 d0 b1 d0 b8 d1 98 d0 b0 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d0 a1\n[44089] d1 80 d0 b1 d0 b8 d1 98 d0 b0 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[44113] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 65 6c 69 7a 65 22 2c 22 6f 66 66 69\n[44137] 63 69 61 6c 22 3a 22 42 65 6c 69 7a 65 22 2c 22 6e 61 74 69 76 65 4e 61\n[44161] 6d 65 22 3a 7b 22 62 6a 7a 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[44185] 42 65 6c 69 7a 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 65 6c 69 7a 65\n[44209] 22 7d 2c 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 65\n[44233] 6c 69 7a 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 65 6c 69 7a 65 22 7d\n[44257] 2c 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 65 6c 69\n[44281] 63 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 65 6c 69 63 65 22 7d 7d 7d\n[44305] 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4d 79 61\n[44329] 6e 6d 61 72 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c\n[44353] 69 63 20 6f 66 20 74 68 65 20 55 6e 69 6f 6e 20 6f 66 20 4d 79 61 6e 6d\n[44377] 61 72 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6d 79 61 22 3a\n[44401] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 e1 80 95 e1 80 bc e1 80 8a e1 80\n[44425] ba e1 80 91 e1 80 b1 e1 80 ac e1 80 84 e1 80 ba e1 80 85 e1 80 af 20 e1\n[44449] 80 9e e1 80 99 e1 80 b9 e1 80 99 e1 80 90 20 e1 80 99 e1 80 bc e1 80 94\n[44473] e1 80 ba e1 80 99 e1 80 ac e1 80 94 e1 80 ad e1 80 af e1 80 84 e1 80 ba\n[44497] e1 80 84 e1 80 b6 e1 80 90 e1 80 b1 e1 80 ac e1 80 ba 22 2c 22 63 6f 6d\n[44521] 6d 6f 6e 22 3a 22 e1 80 99 e1 80 bc e1 80 94 e1 80 ba e1 80 99 e1 80 ac\n[44545] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[44569] 22 42 68 75 74 61 6e 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 69 6e\n[44593] 67 64 6f 6d 20 6f 66 20 42 68 75 74 61 6e 22 2c 22 6e 61 74 69 76 65 4e\n[44617] 61 6d 65 22 3a 7b 22 64 7a 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[44641] 22 e0 bd a0 e0 bd 96 e0 be b2 e0 bd b4 e0 bd 82 e0 bc 8b e0 bd a2 e0 be\n[44665] 92 e0 be b1 e0 bd a3 e0 bc 8b e0 bd 81 e0 bd 96 e0 bc 8b 22 2c 22 63 6f\n[44689] 6d 6d 6f 6e 22 3a 22 e0 bd a0 e0 bd 96 e0 be b2 e0 bd b4 e0 bd 82 e0 bc\n[44713] 8b e0 bd a1 e0 bd b4 e0 bd a3 e0 bc 8b 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d\n[44737] 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 56 65 6e 65 7a 75 65 6c 61 22\n[44761] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 42 6f 6c 69 76 61 72 69 61 6e 20\n[44785] 52 65 70 75 62 6c 69 63 20 6f 66 20 56 65 6e 65 7a 75 65 6c 61 22 2c 22\n[44809] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66\n[44833] 69 63 69 61 6c 22 3a 22 52 65 70 c3 ba 62 6c 69 63 61 20 42 6f 6c 69 76\n[44857] 61 72 69 61 6e 61 20 64 65 20 56 65 6e 65 7a 75 65 6c 61 22 2c 22 63 6f\n[44881] 6d 6d 6f 6e 22 3a 22 56 65 6e 65 7a 75 65 6c 61 22 7d 7d 7d 7d 2c 7b 22\n[44905] 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4c 69 62 65 72 69 61\n[44929] 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f\n[44953] 66 20 4c 69 62 65 72 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a\n[44977] 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75\n[45001] 62 6c 69 63 20 6f 66 20 4c 69 62 65 72 69 61 22 2c 22 63 6f 6d 6d 6f 6e\n[45025] 22 3a 22 4c 69 62 65 72 69 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[45049] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4a 61 6d 61 69 63 61 22 2c 22 6f 66 66\n[45073] 69 63 69 61 6c 22 3a 22 4a 61 6d 61 69 63 61 22 2c 22 6e 61 74 69 76 65\n[45097] 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[45121] 3a 22 4a 61 6d 61 69 63 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4a 61 6d\n[45145] 61 69 63 61 22 7d 2c 22 6a 61 6d 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[45169] 3a 22 4a 61 6d 61 69 63 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4a 61 6d\n[45193] 61 69 63 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[45217] 6f 6e 22 3a 22 50 6f 6c 61 6e 64 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a\n[45241] 22 52 65 70 75 62 6c 69 63 20 6f 66 20 50 6f 6c 61 6e 64 22 2c 22 6e 61\n[45265] 74 69 76 65 4e 61 6d 65 22 3a 7b 22 70 6f 6c 22 3a 7b 22 6f 66 66 69 63\n[45289] 69 61 6c 22 3a 22 52 7a 65 63 7a 70 6f 73 70 6f 6c 69 74 61 20 50 6f 6c\n[45313] 73 6b 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 50 6f 6c 73 6b 61 22 7d 7d\n[45337] 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 43 61\n[45361] 79 6d 61 6e 20 49 73 6c 61 6e 64 73 22 2c 22 6f 66 66 69 63 69 61 6c 22\n[45385] 3a 22 43 61 79 6d 61 6e 20 49 73 6c 61 6e 64 73 22 2c 22 6e 61 74 69 76\n[45409] 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c\n[45433] 22 3a 22 43 61 79 6d 61 6e 20 49 73 6c 61 6e 64 73 22 2c 22 63 6f 6d 6d\n[45457] 6f 6e 22 3a 22 43 61 79 6d 61 6e 20 49 73 6c 61 6e 64 73 22 7d 7d 7d 7d\n[45481] 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 42 72 75 6e\n[45505] 65 69 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4e 61 74 69 6f 6e 20 6f\n[45529] 66 20 42 72 75 6e 65 69 2c 20 41 62 6f 64 65 20 6f 66 20 50 65 61 63 65\n[45553] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 6d 73 61 22 3a 7b 22\n[45577] 6f 66 66 69 63 69 61 6c 22 3a 22 4e 61 74 69 6f 6e 20 6f 66 20 42 72 75\n[45601] 6e 65 69 2c 20 41 62 6f 64 65 20 44 61 6d 61 69 22 2c 22 63 6f 6d 6d 6f\n[45625] 6e 22 3a 22 4e 65 67 61 72 61 20 42 72 75 6e 65 69 20 44 61 72 75 73 73\n[45649] 61 6c 61 6d 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d\n[45673] 6f 6e 22 3a 22 43 6f 6d 6f 72 6f 73 22 2c 22 6f 66 66 69 63 69 61 6c 22\n[45697] 3a 22 55 6e 69 6f 6e 20 6f 66 20 74 68 65 20 43 6f 6d 6f 72 6f 73 22 2c\n[45721] 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 61 72 61 22 3a 7b 22 6f 66\n[45745] 66 69 63 69 61 6c 22 3a 22 d8 a7 d9 84 d8 a7 d8 aa d8 ad d8 a7 d8 af 20\n[45769] d8 a7 d9 84 d9 82 d9 85 d8 b1 d9 8a 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[45793] d8 a7 d9 84 d9 82 d9 85 d8 b1 e2 80 8e 22 7d 2c 22 66 72 61 22 3a 7b 22\n[45817] 6f 66 66 69 63 69 61 6c 22 3a 22 55 6e 69 6f 6e 20 64 65 73 20 43 6f 6d\n[45841] 6f 72 65 73 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 43 6f 6d 6f 72 65 73 22\n[45865] 7d 2c 22 7a 64 6a 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 55 64 7a\n[45889] 69 6d 61 20 77 61 20 4b 6f 6d 6f 72 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[45913] 22 4b 6f 6d 6f 72 69 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63\n[45937] 6f 6d 6d 6f 6e 22 3a 22 47 75 61 6d 22 2c 22 6f 66 66 69 63 69 61 6c 22\n[45961] 3a 22 47 75 61 6d 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 63\n[45985] 68 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 75 c3 a5 68 c3 a5\n[46009] 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 c3 a5 68 c3 a5 6e 22 7d 2c\n[46033] 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 75 61 6d 22\n[46057] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 75 61 6d 22 7d 2c 22 73 70 61 22 3a\n[46081] 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 47 75 61 6d 22 2c 22 63 6f 6d 6d\n[46105] 6f 6e 22 3a 22 47 75 61 6d 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b\n[46129] 22 63 6f 6d 6d 6f 6e 22 3a 22 54 6f 6e 67 61 22 2c 22 6f 66 66 69 63 69\n[46153] 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 54 6f 6e 67 61 22 2c 22\n[46177] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66\n[46201] 69 63 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 54 6f 6e 67 61\n[46225] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 54 6f 6e 67 61 22 7d 2c 22 74 6f 6e\n[46249] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f\n[46273] 66 20 54 6f 6e 67 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 54 6f 6e 67 61\n[46297] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[46321] 22 4b 69 72 69 62 61 74 69 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 49\n[46345] 6e 64 65 70 65 6e 64 65 6e 74 20 61 6e 64 20 53 6f 76 65 72 65 69 67 6e\n[46369] 20 52 65 70 75 62 6c 69 63 20 6f 66 20 4b 69 72 69 62 61 74 69 22 2c 22\n[46393] 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66\n[46417] 69 63 69 61 6c 22 3a 22 49 6e 64 65 70 65 6e 64 65 6e 74 20 61 6e 64 20\n[46441] 53 6f 76 65 72 65 69 67 6e 20 52 65 70 75 62 6c 69 63 20 6f 66 20 4b 69\n[46465] 72 69 62 61 74 69 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4b 69 72 69 62 61\n[46489] 74 69 22 7d 2c 22 67 69 6c 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[46513] 52 69 62 61 62 65 72 69 6b 69 20 4b 69 72 69 62 61 74 69 22 2c 22 63 6f\n[46537] 6d 6d 6f 6e 22 3a 22 4b 69 72 69 62 61 74 69 22 7d 7d 7d 7d 2c 7b 22 6e\n[46561] 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 47 68 61 6e 61 22 2c 22\n[46585] 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 47\n[46609] 68 61 6e 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67\n[46633] 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20\n[46657] 6f 66 20 47 68 61 6e 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 47 68 61 6e\n[46681] 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22\n[46705] 3a 22 43 68 61 64 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75\n[46729] 62 6c 69 63 20 6f 66 20 43 68 61 64 22 2c 22 6e 61 74 69 76 65 4e 61 6d\n[46753] 65 22 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d8\n[46777] ac d9 85 d9 87 d9 88 d8 b1 d9 8a d8 a9 20 d8 aa d8 b4 d8 a7 d8 af 22 2c\n[46801] 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 aa d8 b4 d8 a7 d8 af e2 80 8e 22 7d 2c\n[46825] 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 c3 a9 70 75\n[46849] 62 6c 69 71 75 65 20 64 75 20 54 63 68 61 64 22 2c 22 63 6f 6d 6d 6f 6e\n[46873] 22 3a 22 54 63 68 61 64 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[46897] 63 6f 6d 6d 6f 6e 22 3a 22 5a 69 6d 62 61 62 77 65 22 2c 22 6f 66 66 69\n[46921] 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 69 6d 62 61\n[46945] 62 77 65 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 62 77 67 22\n[46969] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f\n[46993] 66 20 5a 69 6d 62 61 62 77 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 69\n[47017] 6d 62 61 62 77 65 22 7d 2c 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61\n[47041] 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 69 6d 62 61 62 77 65\n[47065] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 69 6d 62 61 62 77 65 22 7d 2c 22\n[47089] 6b 63 6b 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c\n[47113] 69 63 20 6f 66 20 5a 69 6d 62 61 62 77 65 22 2c 22 63 6f 6d 6d 6f 6e 22\n[47137] 3a 22 5a 69 6d 62 61 62 77 65 22 7d 2c 22 6b 68 69 22 3a 7b 22 6f 66 66\n[47161] 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 69 6d 62\n[47185] 61 62 77 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 69 6d 62 61 62 77 65\n[47209] 22 7d 2c 22 6e 64 63 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65\n[47233] 70 75 62 6c 69 63 20 6f 66 20 5a 69 6d 62 61 62 77 65 22 2c 22 63 6f 6d\n[47257] 6d 6f 6e 22 3a 22 5a 69 6d 62 61 62 77 65 22 7d 2c 22 6e 64 65 22 3a 7b\n[47281] 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20\n[47305] 5a 69 6d 62 61 62 77 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 69 6d 62\n[47329] 61 62 77 65 22 7d 2c 22 6e 79 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[47353] 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 69 6d 62 61 62 77 65 22 2c\n[47377] 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 69 6d 62 61 62 77 65 22 7d 2c 22 73 6e\n[47401] 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63\n[47425] 20 6f 66 20 5a 69 6d 62 61 62 77 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22\n[47449] 5a 69 6d 62 61 62 77 65 22 7d 2c 22 73 6f 74 22 3a 7b 22 6f 66 66 69 63\n[47473] 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 69 6d 62 61 62\n[47497] 77 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 69 6d 62 61 62 77 65 22 7d\n[47521] 2c 22 74 6f 69 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75\n[47545] 62 6c 69 63 20 6f 66 20 5a 69 6d 62 61 62 77 65 22 2c 22 63 6f 6d 6d 6f\n[47569] 6e 22 3a 22 5a 69 6d 62 61 62 77 65 22 7d 2c 22 74 73 6e 22 3a 7b 22 6f\n[47593] 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 69\n[47617] 6d 62 61 62 77 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 69 6d 62 61 62\n[47641] 77 65 22 7d 2c 22 74 73 6f 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[47665] 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 69 6d 62 61 62 77 65 22 2c 22 63\n[47689] 6f 6d 6d 6f 6e 22 3a 22 5a 69 6d 62 61 62 77 65 22 7d 2c 22 76 65 6e 22\n[47713] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f\n[47737] 66 20 5a 69 6d 62 61 62 77 65 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 69\n[47761] 6d 62 61 62 77 65 22 7d 2c 22 78 68 6f 22 3a 7b 22 6f 66 66 69 63 69 61\n[47785] 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 5a 69 6d 62 61 62 77 65\n[47809] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 5a 69 6d 62 61 62 77 65 22 7d 2c 22\n[47833] 7a 69 62 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c\n[47857] 69 63 20 6f 66 20 5a 69 6d 62 61 62 77 65 22 2c 22 63 6f 6d 6d 6f 6e 22\n[47881] 3a 22 5a 69 6d 62 61 62 77 65 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a\n[47905] 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 53 61 69 6e 74 20 4d 61 72 74 69 6e 22\n[47929] 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 61 69 6e 74 20 4d 61 72 74 69\n[47953] 6e 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b\n[47977] 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 61 69 6e 74 2d 4d 61 72 74 69 6e\n[48001] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 61 69 6e 74 2d 4d 61 72 74 69 6e\n[48025] 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a\n[48049] 22 4d 6f 6e 67 6f 6c 69 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4d\n[48073] 6f 6e 67 6f 6c 69 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[48097] 6d 6f 6e 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d0 9c d0 be d0 bd\n[48121] d0 b3 d0 be d0 bb 20 d1 83 d0 bb d1 81 22 2c 22 63 6f 6d 6d 6f 6e 22 3a\n[48145] 22 d0 9c d0 be d0 bd d0 b3 d0 be d0 bb 20 d1 83 d0 bb d1 81 22 7d 7d 7d\n[48169] 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 50 6f 72\n[48193] 74 75 67 61 6c 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 50 6f 72 74 75\n[48217] 67 75 65 73 65 20 52 65 70 75 62 6c 69 63 22 2c 22 6e 61 74 69 76 65 4e\n[48241] 61 6d 65 22 3a 7b 22 70 6f 72 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a\n[48265] 22 52 65 70 c3 ba 62 6c 69 63 61 20 70 6f 72 74 75 67 75 c3 aa 73 22 2c\n[48289] 22 63 6f 6d 6d 6f 6e 22 3a 22 50 6f 72 74 75 67 61 6c 22 7d 7d 7d 7d 2c\n[48313] 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 6d 65 72 69\n[48337] 63 61 6e 20 53 61 6d 6f 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 41\n[48361] 6d 65 72 69 63 61 6e 20 53 61 6d 6f 61 22 2c 22 6e 61 74 69 76 65 4e 61\n[48385] 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[48409] 41 6d 65 72 69 63 61 6e 20 53 61 6d 6f 61 22 2c 22 63 6f 6d 6d 6f 6e 22\n[48433] 3a 22 41 6d 65 72 69 63 61 6e 20 53 61 6d 6f 61 22 7d 2c 22 73 6d 6f 22\n[48457] 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 c4 81 6d 6f 61 20 41 6d 65\n[48481] 6c 69 6b 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 53 c4 81 6d 6f 61 20 41\n[48505] 6d 65 6c 69 6b 61 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f\n[48529] 6d 6d 6f 6e 22 3a 22 52 65 70 75 62 6c 69 63 20 6f 66 20 74 68 65 20 43\n[48553] 6f 6e 67 6f 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c\n[48577] 69 63 20 6f 66 20 74 68 65 20 43 6f 6e 67 6f 22 2c 22 6e 61 74 69 76 65\n[48601] 4e 61 6d 65 22 3a 7b 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[48625] 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 75 20 43 6f 6e 67 6f 22 2c\n[48649] 22 63 6f 6d 6d 6f 6e 22 3a 22 52 c3 a9 70 75 62 6c 69 71 75 65 20 64 75\n[48673] 20 43 6f 6e 67 6f 22 7d 2c 22 6b 6f 6e 22 3a 7b 22 6f 66 66 69 63 69 61\n[48697] 6c 22 3a 22 52 65 70 75 62 69 6c 69 6b 61 20 79 61 20 4b 6f 6e 67 6f 22\n[48721] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 52 65 70 75 62 69 6c 69 6b 61 20 79 61\n[48745] 20 4b 6f 6e 67 6f 22 7d 2c 22 6c 69 6e 22 3a 7b 22 6f 66 66 69 63 69 61\n[48769] 6c 22 3a 22 52 65 70 75 62 6c c3 ad 6b 69 20 79 61 20 4b 6f 6e 67 c3 b3\n[48793] 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 52 65 70 75 62 6c c3 ad 6b 69 20 79\n[48817] 61 20 4b 6f 6e 67 c3 b3 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22\n[48841] 63 6f 6d 6d 6f 6e 22 3a 22 42 65 6c 67 69 75 6d 22 2c 22 6f 66 66 69 63\n[48865] 69 61 6c 22 3a 22 4b 69 6e 67 64 6f 6d 20 6f 66 20 42 65 6c 67 69 75 6d\n[48889] 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 64 65 75 22 3a 7b 22\n[48913] 6f 66 66 69 63 69 61 6c 22 3a 22 4b c3 b6 6e 69 67 72 65 69 63 68 20 42\n[48937] 65 6c 67 69 65 6e 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 65 6c 67 69 65\n[48961] 6e 22 7d 2c 22 66 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52\n[48985] 6f 79 61 75 6d 65 20 64 65 20 42 65 6c 67 69 71 75 65 22 2c 22 63 6f 6d\n[49009] 6d 6f 6e 22 3a 22 42 65 6c 67 69 71 75 65 22 7d 2c 22 6e 6c 64 22 3a 7b\n[49033] 22 6f 66 66 69 63 69 61 6c 22 3a 22 4b 6f 6e 69 6e 6b 72 69 6a 6b 20 42\n[49057] 65 6c 67 69 c3 ab 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 42 65 6c 67 69 c3\n[49081] ab 22 7d 7d 7d 7d 2c 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22\n[49105] 3a 22 49 73 72 61 65 6c 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 53 74\n[49129] 61 74 65 20 6f 66 20 49 73 72 61 65 6c 22 2c 22 6e 61 74 69 76 65 4e 61\n[49153] 6d 65 22 3a 7b 22 61 72 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22\n[49177] d8 af d9 88 d9 84 d8 a9 20 d8 a5 d8 b3 d8 b1 d8 a7 d8 a6 d9 8a d9 84 22\n[49201] 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 d8 a5 d8 b3 d8 b1 d8 a7 d8 a6 d9 8a d9\n[49225] 84 22 7d 2c 22 68 65 62 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 d7\n[49249] 9e d7 93 d7 99 d7 a0 d7 aa 20 d7 99 d7 a9 d7 a8 d7 90 d7 9c 22 2c 22 63\n[49273] 6f 6d 6d 6f 6e 22 3a 22 d7 99 d7 a9 d7 a8 d7 90 d7 9c 22 7d 7d 7d 7d 2c\n[49297] 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 65 77 20 5a\n[49321] 65 61 6c 61 6e 64 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 4e 65 77 20\n[49345] 5a 65 61 6c 61 6e 64 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22\n[49369] 65 6e 67 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 4e 65 77 20 5a 65\n[49393] 61 6c 61 6e 64 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 65 77 20 5a 65 61\n[49417] 6c 61 6e 64 22 7d 2c 22 6d 72 69 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22\n[49441] 3a 22 41 6f 74 65 61 72 6f 61 22 2c 22 63 6f 6d 6d 6f 6e 22 3a 22 41 6f\n[49465] 74 65 61 72 6f 61 22 7d 2c 22 6e 7a 73 22 3a 7b 22 6f 66 66 69 63 69 61\n[49489] 6c 22 3a 22 4e 65 77 20 5a 65 61 6c 61 6e 64 22 2c 22 63 6f 6d 6d 6f 6e\n[49513] 22 3a 22 4e 65 77 20 5a 65 61 6c 61 6e 64 22 7d 7d 7d 7d 2c 7b 22 6e 61\n[49537] 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 4e 69 63 61 72 61 67 75 61\n[49561] 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65 70 75 62 6c 69 63 20 6f\n[49585] 66 20 4e 69 63 61 72 61 67 75 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65\n[49609] 22 3a 7b 22 73 70 61 22 3a 7b 22 6f 66 66 69 63 69 61 6c 22 3a 22 52 65\n[49633] 70 c3 ba 62 6c 69 63 61 20 64 65 20 4e 69 63 61 72 61 67 75 61 22 2c 22\n[49657] 63 6f 6d 6d 6f 6e 22 3a 22 4e 69 63 61 72 61 67 75 61 22 7d 7d 7d 7d 2c\n[49681] 7b 22 6e 61 6d 65 22 3a 7b 22 63 6f 6d 6d 6f 6e 22 3a 22 41 6e 67 75 69\n[49705] 6c 6c 61 22 2c 22 6f 66 66 69 63 69 61 6c 22 3a 22 41 6e 67 75 69 6c 6c\n[49729] 61 22 2c 22 6e 61 74 69 76 65 4e 61 6d 65 22 3a 7b 22 65 6e 67 22 3a 7b\n[49753] 22 6f 66 66 69 63 69 61 6c 22 3a 22 41 6e 67 75 69 6c 6c 61 22 2c 22 63\n[49777] 6f 6d 6d 6f 6e 22 3a 22 41 6e 67 75 69 6c 6c 61 22 7d 7d 7d 7d 5d\n\n\nAbove we see that the content that is received from the API is delivered as a compressed binary string, which must be decompressed and converted back to character encoding before processing. We do this using a built-in httr function:\n\nbdy &lt;- content(response, \"text\")\n\nNo encoding supplied: defaulting to UTF-8.\n\n\nOnce we have the content extracted and converted, we can begin to process it. We previously examined the response and determined that it is in JSON format, so our step will be to load the content into a JSON object for ease of traversal:\n\nbdy_json &lt;- fromJSON(bdy)\n\nIf you examine the class and structure of the bdy_json object, you will see that jsonlite has converted the JSON structure into a nice R data frame where you can begin the process of exploration and cleaning in preparation for research.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Getting Data from the Web</span>"
    ]
  },
  {
    "objectID": "chapters/09_data-from-the-web.html#web-scraping",
    "href": "chapters/09_data-from-the-web.html#web-scraping",
    "title": "9  Getting Data from the Web",
    "section": "9.4 Web Scraping",
    "text": "9.4 Web Scraping\n\n9.4.1 What’s in a Web Page?\nModern web pages usually consist of many files:\n\nHypertext markup language (HTML) for structure and formatting\nCascading style sheets (CSS) for more formatting\nJavaScript (JS) for interactivity\nImages\n\nHTML is the only component that always has to be there. Since HTML is what gives a web page structure, it’s what we’ll focus on when scraping.\nHTML is closely related to eXtensible markup language (XML). Both languages use tags to mark structural elements of data. In HTML, the elements literally correspond to the elements of a web page: paragraphs, links, tables, and so on.\nMost tags come in pairs. The opening tag marks the beginning of an element and the closing tag marks the end. Opening tags are written &lt;NAME&gt;, where NAME is the name of the tag. Closing tags are written &lt;/NAME&gt;.\nA singleton tag is a tag that stands alone, rather than being part of a pair. Singleton tags are written &lt;NAME /&gt;. In HTML (but not XML) they can also be written &lt;NAME&gt;. Fortunately, HTML only has a few singleton tags, so they can be distinguished by name regardless of which way they’re written.\nFor example, here’s some HTML that uses the em (emphasis, usually italic) and strong (usually bold) tags, as well as the singleton br (line break) tag:\n&lt;em&gt;&lt;strong&gt;This text&lt;/strong&gt; is emphasized.&lt;br /&gt;&lt;/em&gt; Not emphasized\nA pair of tags can contain other elements (paired or singleton tags), but not a lone opening or closing tag. This creates a strict, treelike hierarchy.\nOpening and singleton tags can have attributes that contain additional information. Attributes are name-value pairs written NAME=\"VALUE\" after the tag name.\nFor instance, the HTML a (anchor) tag creates a link to the URL provided for the href attribute:\n&lt;a href=\"http://www.google.com/\" id=\"mytag\"&gt;My Search Engine&lt;/a&gt;\nIn this case the tag also has a value set for the id attribute.\nNow let’s look at an example of HTML for a complete, albeit simple, web page:\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;This is the page title!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;This is a header!&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph.\n      &lt;a href=\"http://www.r-project.org/\"&gt;Here's a website!&lt;/a&gt;\n    &lt;/p&gt;\n    &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\nIn most web browsers, you can examine the HTML for a web page by right-clicking and choosing “View Page Source”.\nSee here for a more detailed explanation of HTML, and here for a list of valid HTML elements.\n\n\n9.4.2 R’s XML Parsers\nA parser converts structured data into familiar data structures. R has two popular packages for parsing XML (and HTML):\n\nThe XML package\nThe xml2 package\n\nThe XML package has more features. The xml2 package is more user-friendly, and as part of the Tidyverse, it’s relatively well-documented. This lesson focuses on xml2, since most of the additional features in the XML package are related to writing (rather than parsing) XML documents.\nThe xml2 package is often used in conjunction with the rvest package, which provides support for CSS selectors (described later in this lesson) and automates scraping HTML tables.\nThe first time you use these packages, you’ll have to install them:\ninstall.packages(\"xml2\")\ninstall.packages(\"rvest\")\nLet’s start by parsing the example of a complete web page from earlier. The xml2 function read_xml reads an XML document, and the rvest function read_html reads an HTML document. Both accept an XML/HTML string or a file path (including URLs):\n\nhtml = r\"(\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;This is the page title!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;This is a header!&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph.\n      &lt;a href=\"http://www.r-project.org/\"&gt;Here's a website!&lt;/a&gt;\n    &lt;/p&gt;\n    &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; )\"\n\nlibrary(xml2)\nlibrary(rvest)\n\ndoc = read_html(html)\ndoc\n\n{html_document}\n&lt;html&gt;\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] &lt;body&gt;\\n    &lt;h1&gt;This is a header!&lt;/h1&gt;\\n    &lt;p&gt;This is a paragraph.\\n     ...\n\n\nThe xml_children function returns all of the immediate children of a given element.\nThe top element of our document is the html tag, and its immediate children are the head and body tags:\n\ntags = xml_children(doc)\n\nThe result from xml_children is a node set (xml_nodeset object). Think of a node set as a vector where the elements are tags rather than numbers or strings. Just like a vector, you can access individual elements with the indexing (square bracket [) operator:\n\nlength(tags)\n\n[1] 2\n\nhead = tags[1]\nhead\n\n{xml_nodeset (1)}\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n\n\nThe xml_text function returns the text contained in a tag. Let’s get the text in the title tag, which is beneath the head tag. First we isolate the tag, then use xml_text:\n\ntitle = xml_children(head)\nxml_text(title)\n\n[1] \"\"                        \"This is the page title!\"\n\n\nNavigating through the tags by hand is tedious and easy to get wrong, but fortunately there’s a better way to find the tags we want.\n\n\n9.4.3 XPath\nAn XML document is a tree, similar to the file system on your computer:\nhtml\n├── head\n│   └── title\n└── body\n    ├── h1\n    ├── p\n    └── p\n        └── a\nWhen we wanted to find files, we wrote file paths. We can do something similar to find XML elements.\nXPath is a language for writing paths to elements in an XML document. XPath is not R-specific. At a glance, an XPath looks similar to a file path:\n\n\n\nXPath\nDescription\n\n\n\n\n/\nroot, or element separator\n\n\n.\ncurrent tag\n\n\n..\nparent tag\n\n\n*\nany tag (wildcard)\n\n\n\nThe xml2 function xml_find_all finds all elements at given XPath:\n\nxml_find_all(doc, \"/html/body/p\")\n\n{xml_nodeset (2)}\n[1] &lt;p&gt;This is a paragraph.\\n      &lt;a href=\"http://www.r-project.org/\"&gt;Here's ...\n[2] &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n\n\nUnlike a file path, an XPath can identify multiple elements. If you only want a specific element, use indexing to get it from the result.\nXPath also has some features that are different from file paths. The // separator means “at any level beneath.” It’s a useful shortcut when you want to find a specific element but don’t care where it is.\nLet’s get all of the p elements at any level of the document:\n\nxml_find_all(doc, \"//p\")\n\n{xml_nodeset (2)}\n[1] &lt;p&gt;This is a paragraph.\\n      &lt;a href=\"http://www.r-project.org/\"&gt;Here's ...\n[2] &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n\n\nLet’s also get all a elements at any level beneath a p element:\n\nxml_find_all(doc, \"//p/a\")\n\n{xml_nodeset (1)}\n[1] &lt;a href=\"http://www.r-project.org/\"&gt;Here's a website!&lt;/a&gt;\n\n\nThe vertical bar | means “or.” You can use it to get two different sets of elements in one query.\nLet’s get all h1 or p tags:\n\nxml_find_all(doc, \"//h1|//p\")\n\n{xml_nodeset (3)}\n[1] &lt;h1&gt;This is a header!&lt;/h1&gt;\n[2] &lt;p&gt;This is a paragraph.\\n      &lt;a href=\"http://www.r-project.org/\"&gt;Here's ...\n[3] &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n\n\n\n9.4.3.1 Predicates\nIn XPath, the predicate operator [] gets elements at a position or matching a condition. Most conditions are about the attributes of the element. In the predicate operator, attributes are always prefixed with @.\nFor example, suppose we want to find all tags where the id attribute is equal to \"hello\":\n\nxml_find_all(doc, \"//*[@id = 'hello']\")\n\n{xml_nodeset (1)}\n[1] &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n\n\nNotice that the equality operator in XPath is =, not ==. Strings in XPath can be quoted with single or double quotes.\nYou can combine multiple conditions in the predicate operator with and and or. There are also several XPath functions you can use in the predicate operator. These functions are not R functions, but rather built into XPath. Here are a few:\n\n\n\nXPath\nDescription\n\n\n\n\nnot()\nnegation\n\n\ncontains()\ncheck string x contains y\n\n\ntext()\nget tag text\n\n\nsubstring()\nget a substring\n\n\n\nFor instance, suppose we want to get elements that contain the word “paragraph”:\n\nxml_find_all(doc, \"//*[contains(text(), 'paragraph')]\")\n\n{xml_nodeset (2)}\n[1] &lt;p&gt;This is a paragraph.\\n      &lt;a href=\"http://www.r-project.org/\"&gt;Here's ...\n[2] &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n\n\nFinally, note that you can also use the predicate operator to get elements at a specific position. For example, to get the second p element anywhere in the document:\n\nxml_find_all(doc, \"//p[2]\")\n\n{xml_nodeset (1)}\n[1] &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n\n\nNotice that this is the same as if we had used R to get the second element:\n\nxml_find_all(doc, \"//p\")[2]\n\n{xml_nodeset (1)}\n[1] &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBeware that although the XPath predicate operator resembles R’s indexing operator, the syntax is not always the same.\n\n\nWe’ll learn more XPath in the examples. There’s a complete list of XPath functions on Wikipedia.\n\n\n\n9.4.4 The Web Scraping Workflow\nScraping a web page is part technology, part art. The goal is to find an XPath that’s concise but specific enough to identify only the elements you want. If you plan to scrape the web page again later or want to scrape a lot of similar web pages, the XPath also needs to be general enough that it still works even if there are small variations.\nFirefox and Chrome include “web developer tools” that are invaluable for planning a web scraping strategy. Press Ctrl + Shift + i (Cmd + Shift + i on OS X) in Firefox or Chrome to open the web developer tools.\nWe can also use the web developer tools to interactively identify the element that corresponds to a specific part of a web page. Press Ctrl + Shift + c and then click on the part of the web page you want to identify.\nThe best way to approach web scraping (and programming in general) is as an incremental, iterative process. Use the web developer tools to come up with a basic strategy, try it out in R, check which parts don’t work, and then repeat to adjust the strategy. Expect to go back and forth between your web browser and R several times when you’re scraping.\nMost scrapers follow the same four steps, regardless of the web page and the language of the scraper:\n\nDownload pages with an HTTP request (usually GET)\nParse pages to extract text\nClean up extracted text with string methods or regex\nSave cleaned results\n\nIn R, xml2’s read_xml function takes care of step 1 for you, although you can also use httr functions to make the request yourself.\n\n9.4.4.1 Being Polite\nMaking an HTTP request is not free! It has a real cost in CPU time and also cash. Server administrators will not appreciate it if you make too many requests or make requests too quickly. So:\n\nIf you’re making multiple requests, slow them down by using R’s Sys.sleep function to make R do nothing for a moment. Aim for no more than 20-30 requests per second, unless you’re using an API that says more are okay.\nAvoid requesting the same page twice. One way to do this is by caching (saving) the results of the requests you make. You can do this manually, or use a package that does it automatically, like the httpcache package.\n\n\n\n\n\n\n\nImportant\n\n\n\nFailing to be polite can get you banned from websites! Also check the website’s terms of service to make sure scraping is not explicitly forbidden.\n\n\n\n\n9.4.4.2 Case Study: CA Cities\nWikipedia has many pages that are just tables of data. For example, there’s this list of cities and towns in California. Let’s scrape the table to get a data frame.\nStep 1 is to download the page:\nwiki_url =\n  \"https://en.wikipedia.org/wiki/List_of_cities_and_towns_in_California\"\n\nwiki_doc = read_html(wiki_url)\nStep 2 is to extract the table element from the page. We can use Firefox or Chrome’s web developer tools to identify the table. HTML tables usually use the table tag. Let’s see if it’s the only table in the page:\n\ntables = xml_find_all(wiki_doc, \"//table\")\ntables\n\n{xml_nodeset (4)}\n[1] &lt;table class=\"wikitable sortable\"&gt;&lt;tbody&gt;\\n&lt;tr&gt;\\n&lt;th scope=\"row\" style=\"b ...\n[2] &lt;table class=\"wikitable plainrowheaders sortable\"&gt;&lt;tbody&gt;\\n&lt;tr&gt;\\n&lt;th scop ...\n[3] &lt;table class=\"nowraplinks hlist mw-collapsible autocollapse navbox-inner\" ...\n[4] &lt;table class=\"nowraplinks mw-collapsible autocollapse navbox-inner\" style ...\n\n\nThe page has 4 tables. We can either make our XPath more specific, or use indexing to get the table we want. Refining the XPath makes our scraper more robust, but indexing is easier.\nFor the sake of learning, let’s refine the XPath. Going back to the browser, we can see that the table includes \"wikitable\" and \"sortable\" in its class attribute. So let’s search for these among the table elements:\n\ntab = xml_find_all(tables, \"//*[contains(@class, 'sortable')]\")\ntab\n\n{xml_nodeset (2)}\n[1] &lt;table class=\"wikitable sortable\"&gt;&lt;tbody&gt;\\n&lt;tr&gt;\\n&lt;th scope=\"row\" style=\"b ...\n[2] &lt;table class=\"wikitable plainrowheaders sortable\"&gt;&lt;tbody&gt;\\n&lt;tr&gt;\\n&lt;th scop ...\n\n\nNow we get just two tables, and the second one is the one we want! Here we used a second XPath applied only to the results from the first, but we also could’ve done this all with one XPath: //table[contains(@class, 'sortable')].\nThe next part of extracting the data is to extract the value from each individual cell in the table. HTML tables have a strict layout order, with tags to indicate rows and cells. We could extract each cell by hand and then reassemble them into a data frame, but the rvest function html_table can do it for us automatically:\n\ncities = html_table(tab, fill = TRUE)\ncities = cities[[2]]\nhead(cities)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nCounty\nPopulation (2020)[1]\nPopulation (2010)[9]\nChange\nLand area[10]\nLand area[10]\nPopulation density[10]\nIncorporated[8]\n\n\n\n\nName\nType\nCounty\nPopulation (2020)[1]\nPopulation (2010)[9]\nChange\nsq mi\nkm2\nPopulation density[10]\nIncorporated[8]\n\n\nAdelanto\nCity\nSan Bernardino\n38,046\n31,765\n+19.8%\n52.87\n136.9\n719.6/sq mi (277.8/km2)\nDecember 22, 1970\n\n\nAgoura Hills\nCity\nLos Angeles\n20,299\n20,330\n−0.2%\n7.80\n20.2\n2,602.4/sq mi (1,004.8/km2)\nDecember 8, 1982\n\n\nAlameda\nCity\nAlameda\n78,280\n73,812\n+6.1%\n10.45\n27.1\n7,490.9/sq mi (2,892.3/km2)\nApril 19, 1854\n\n\nAlbany\nCity\nAlameda\n20,271\n18,539\n+9.3%\n1.79\n4.6\n11,324.6/sq mi (4,372.4/km2)\nSeptember 22, 1908\n\n\nAlhambra\nCity\nLos Angeles\n82,868\n83,089\n−0.3%\n7.63\n19.8\n10,860.8/sq mi (4,193.4/km2)\nJuly 11, 1903\n\n\n\n\n\n\nThe fill = TRUE argument ensures that empty cells are filled with NA. We’ve successfully imported the data from the web page into R, so we’re done with step 2.\nStep 3 is to clean up the data frame. The column names contain symbols, the first row is part of the header, and the column types are not correct.\n\n# Fix column names.\nnames(cities) = c(\n  \"city\", \"type\", \"county\", \"population2020\", \"population2010\",\n  \"population_change\", \"mi2\", \"km2\", \"density\", \"date\"\n)\n\n# Remove fake first row.\ncities = cities[-1, ]\n# Reset row names.\nrownames(cities) = NULL\n\nHow can we clean up the date column? The as.Date function converts a string into a date R understands. The idea is to match the date string to a format string where the components of the date are indicated by codes that start with %. For example, %m stands for the month as a two-digit number. You can read about the different date format codes in ?strptime.\nHere’s the code to convert the dates in the data frame:\n\ndates = as.Date(cities$date, \"%B %m, %Y\")\ncities$date = dates\n\nWe can also convert the population to a number:\n\nclass(cities$population2020)\n\n[1] \"character\"\n\n# Remove commas and footnotes (e.g., [1]) before conversion\nlibrary(stringr)\n\npop = str_replace_all(cities$population2020, \",\", \"\")\npop = str_replace_all(pop, \"\\\\[[0-9]+\\\\]\", \"\")\npop = as.numeric(pop)\n\n# Check for missing values, which can mean conversion failed\nany(is.na(pop))\n\n[1] FALSE\n\ncities$population2020 = pop\n\n\n\n9.4.4.3 Case Study: The CA Aggie\nSuppose we want to scrape The California Aggie.\nIn particular, we want to get all the links to news articles on the features page https://theaggie.org/category/features/. This could be one part of a larger scraping project where we go on to scrape individual articles.\nFirst for Step 1, let’s download the features page so we can extract the links:\nurl = \"https://theaggie.org/category/features/\"\ndoc = read_html(url)\nWe know that links are in a tags, but we only want links to articles. Looking at the features page with the web developer tools, the links to feature articles are all inside of a div tag with class td_block_inner. So for Step 2, let’s get that tag:\n\nxml_find_all(doc, \"//div[contains(@class, 'td_block_inner')]\")\n\n{xml_nodeset (9)}\n[1] &lt;div id=\"tdi_50\" class=\"td_block_inner td-fix-index\"&gt;\\n&lt;div class=\"tdb-ma ...\n[2] &lt;div id=\"tdi_51\" class=\"td_block_inner\"&gt;\\r\\n        &lt;div class=\"tdb_modul ...\n[3] &lt;div id=\"tdi_52\" class=\"td_block_inner\"&gt;\\r\\n        &lt;div class=\"tdb_modul ...\n[4] &lt;div id=\"tdi_53\" class=\"td_block_inner\"&gt;\\r\\n        &lt;div class=\"tdb_modul ...\n[5] &lt;div id=\"tdi_54\" class=\"td_block_inner\"&gt;\\r\\n        &lt;div class=\"tdb_modul ...\n[6] &lt;div id=\"tdi_55\" class=\"td_block_inner\"&gt;\\r\\n        &lt;div class=\"tdb_modul ...\n[7] &lt;div id=\"tdi_56\" class=\"td_block_inner\"&gt;\\r\\n        &lt;div class=\"tdb_modul ...\n[8] &lt;div id=\"tdi_57\" class=\"td_block_inner\"&gt;\\r\\n        &lt;div class=\"tdb_modul ...\n[9] &lt;div id=\"tdi_74\" class=\"td_block_inner tdb-block-inner td-fix-index\"&gt;\\r\\n ...\n\n# OR html_nodes(doc, \"div.td-block-inner\")\n\nThat returns a lot of results, so let’s try using the id attribute, which is \"tdi_113\", instead. Usually the id of an element is unique, so this ensures that we get the right section.\nWe can also add in a part about getting links now:\n\ndiv = xml_find_all(doc, \"//div[@id = 'tdi_113']\")\n# OR html_nodes(doc, \"div#tdi_113\")\n\nlinks = xml_find_all(div, \".//a\")\n# OR html_nodes(div, \"a\")\n\nlength(links)\n\n[1] 0\n\n\nThat gives us 0 links, but there are only 15 articles on the page, so something’s still not right. Inspecting the page again, there are actually three links to each article: on the image, on the title, and on “Continue Reading”.\nLet’s focus on the title link. All of the title links are inside of an h3 tag. Generally it’s more robust to rely on tags (structure) than to rely on attributes (other than id and class). So let’s use the h3 tag here:\n\nlinks = xml_find_all(div, \".//h3/a\")\n# OR html_nodes(div, \"h3 &gt; a\")\n\nlength(links)\n\n[1] 0\n\n\nNow we’ve got the 15 links, so let’s get the URLs from the href attribute.\n\nfeature_urls = xml_attr(links, \"href\")\n\nThe other article listings (Sports, Science, etc) on The Aggie have a similar structure, so we can potentially reuse our code to scrape those.\nSo let’s turn our code into a function. The input will be a downloaded page, and the output will be the article links.\n\nparse_article_links = function(page) {\n  div = xml_find_all(page, \"//div[@id = 'tdi_113']\")\n  links = xml_find_all(div, \".//h3/a\")\n  xml_attr(links, \"href\")\n}\n\nWe can test this out on the Sports page. First we download the page:\nsports = read_html(\"https://theaggie.org/category/sports\")\nThen we call the function on the document:\n\nsports_urls = parse_article_links(sports)\nhead(sports_urls)\n\ncharacter(0)\n\n\nIt looks like the function works even on other pages! We can also set up the function to extract the link to the next page, in case we want to scrape multiple pages of links.\nThe link to the next page of features (an arrow at the bottom) is an a tag with attribute aria-label in a div with class page-nav. Let’s see if that’s specific enough to isolate the tag:\n\nnav = xml_find_all(doc, \"//div[contains(@class, 'page-nav')]\")\n# OR html_nodes(doc, \"div.page-nav\")\nnext_page = xml_find_all(nav, \".//a[contains(@aria-label, 'next-page')]\")\n# OR html_nodes(nav, \"a[aria-label *= 'next-page']\")\n\nIt looks like it is. We use contains here rather than = because it is common for the class attribute to have many parts. Using contains makes our code robust against changes in the future.\nWe can now modify our parser function to return the link to the next page:\n\nparse_article_links = function(page) {\n  # Get article URLs\n  div = xml_find_all(page, \"//div[@id = 'tdi_113']\")\n  links = xml_find_all(div, \".//h3/a\")\n  urls = xml_attr(links, \"href\")\n\n  # Get next page URL\n  nav = xml_find_all(page, \"//div[contains(@class, 'page-nav')]\")\n  next_page = xml_find_all(nav, \".//a[contains(@aria-label, 'next-page')]\")\n  next_url = xml_attr(next_page, \"href\")\n\n  # Using a list allows us to return two objects\n  list(urls = urls, next_url = next_url)\n}\n\nSince our function gets URL for the next page, what happens on the last page?\nLooking at the last page in the browser, there is no link to the next page. Let’s see what our scraper function does:\nlast_page = read_html(\"https://theaggie.org/category/features/page/187/\")\n\nparse_article_links(last_page)\n\n$urls\ncharacter(0)\n\n$next_url\n[1] \"https://theaggie.org/category/features/page/188/\"\n\n\nWe get an empty character vector as the URL for the next page. This is because the xml_find_all function returns an empty node set for the next page URL, so there aren’t any href fields for xml_attr to extract. It’s convenient that the xml2 functions behave this way, but we could also add an if-statement to the function to check (and possibly return NA as the next URL in this case).\nThen the code becomes:\n\nparse_article_links = function(page) {\n  # Get article URLs\n  div = xml_find_all(page, \"//div[@id = 'tdi_113']\")\n  links = xml_find_all(div, \".//h3/a\")\n  urls = xml_attr(links, \"href\")\n\n  # Get next page URL\n  nav = xml_find_all(page, \"//div[contains(@class, 'page-nav')]\")\n  next_page = xml_find_all(nav, \".//a[contains(@aria-label, 'next-page')]\")\n  if (length(next_page) == 0) {\n    next_url = NA\n  } else {\n    next_url = xml_attr(next_page, \"href\")\n  }\n\n  # Using a list allows us to return two objects\n  list(urls = urls, next_url = next_url)\n}\n\nNow our function should work well even on the last page.\nIf we want to scrape links to all of the articles in the features section, we can use our function in a loop:\n# NOTE: This code is likely to take a while to run, and is meant more for\n# reading than for you to run and try out.\n\nurl = \"https://theaggie.org/category/features/\"\narticle_urls = list()\ni = 1\n\n# On the last page, the next URL will be `NA`.\nwhile (!is.na(url)) {\n  # Download and parse the page.\n  page = read_html(url)\n  result = parse_article_links(page)\n\n  # Save the article URLs in the `article_urls` list. The variable `i` is the\n  # page number.\n  article_urls[[i]] = result$url\n  i = i + 1\n\n  # Set the URL to the next URL.\n  url = result$next_url\n\n  # Sleep for 1/30th of a second so that we never make more than 30 requests\n  # per second.\n  Sys.sleep(1/30)\n}\nNow we’ve got the basis for a simple scraper.\n\n\n\n9.4.5 CSS Selectors\nCascading style sheets (CSS) is a language used to control the formatting of an XML or HTML document.\nCSS selectors are the CSS way to write paths to elements. CSS selectors are more concise than XPath, so many people prefer them. Even if you prefer CSS selectors, it’s good to know XPath because CSS selectors are less flexible.\nHere’s the basic syntax of CSS selectors:\n\n\n\nCSS\nDescription\n\n\n\n\na\ntags a\n\n\na &gt; b\ntags b directly beneath a\n\n\na b\ntags b anywhere beneath a\n\n\na, b\ntags a or b\n\n\n#hi\ntags with attribute id=\"hi\"\n\n\n.hi\ntags with attribute class that contains \"hi\"\n\n\n[foo=\"hi\"]\ntags with attribute foo=\"hi\"\n\n\n[foo*=\"hi\"]\ntags with attribute foo that contains \"hi\"\n\n\n\nIf you want to learn more, CSS Diner is an interactive tutorial that covers the entire CSS selector language.\nIn Firefox, you can get CSS selectors from the web developer tool. Right-click the tag you want a selector for and choose “Copy Unique Selector”. Beware that the selectors Firefox generates are often too specific to be useful for anything beyond the simplest web scrapers.\nThe rvest package uses CSS selectors by default. Behind the scenes, the package translates these into XPath and passes them to xml2.\nHere are a few examples of CSS selectors, using rvest’s html_nodes function:\n\nhtml = r\"(\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;This is the page title!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;This is a header!&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph.\n      &lt;a href=\"http://www.r-project.org/\"&gt;Here's a website!&lt;/a&gt;\n    &lt;/p&gt;\n    &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; )\"\n\ndoc = read_html(html)\n\n# Get all p elements\nhtml_nodes(doc, \"p\")\n\n{xml_nodeset (2)}\n[1] &lt;p&gt;This is a paragraph.\\n      &lt;a href=\"http://www.r-project.org/\"&gt;Here's ...\n[2] &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;\n\n# Get all links\nhtml_nodes(doc, \"a\")\n\n{xml_nodeset (1)}\n[1] &lt;a href=\"http://www.r-project.org/\"&gt;Here's a website!&lt;/a&gt;\n\n# Get all tags with id=\"hello\"\nhtml_nodes(doc, \"#hello\")\n\n{xml_nodeset (1)}\n[1] &lt;p id=\"hello\"&gt;This is another paragraph.&lt;/p&gt;",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Getting Data from the Web</span>"
    ]
  },
  {
    "objectID": "chapters/10_strings-regex.html",
    "href": "chapters/10_strings-regex.html",
    "title": "10  Strings and Regular Expressions",
    "section": "",
    "text": "10.1 Printing Output\nThe message function prints a string in the R console. If you pass multiple arguments, they are concatenated:\nmessage(\"Hello\")\n\nHello\n\nmessage(\"Hello\", \"Nick\")\n\nHelloNick",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions</span>"
    ]
  },
  {
    "objectID": "chapters/10_strings-regex.html#printing-output",
    "href": "chapters/10_strings-regex.html#printing-output",
    "title": "10  Strings and Regular Expressions",
    "section": "",
    "text": "Pitfall 1\n\n\n\nPrinting a string is different from returning a string. The message function only prints (and always returns NULL). For example:\n\nf = function() {\n  message(\"Hello\")\n}\n\nx = f()\n\nHello\n\nx\n\nNULL\n\n\nIf you just want to concatenate some strings (but not necessarily print them), use paste instead of message. The paste function returns a string. The str_c function in stringr (a package we’ll learn about later in this lesson) can also concatenate strings.\n\n\n\n\n\n\n\n\nPitfall 2\n\n\n\nRemember to print strings with the message function, not the print function. The print function prints R’s representation of an object, the same as if you had entered the object in the console without calling print.\nFor instance, print prints quotes around strings, whereas message does not:\n\nprint(\"Hello\")\n\n[1] \"Hello\"\n\nmessage(\"Hello\")\n\nHello",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions</span>"
    ]
  },
  {
    "objectID": "chapters/10_strings-regex.html#escape-sequences",
    "href": "chapters/10_strings-regex.html#escape-sequences",
    "title": "10  Strings and Regular Expressions",
    "section": "10.2 Escape Sequences",
    "text": "10.2 Escape Sequences\nIn a string, an escape sequence or escape code consists of a backslash followed by one or more characters. Escape sequences make it possible to:\n\nWrite quotes or backslashes within a string\nWrite characters that don’t appear on your keyboard (for example, characters in a foreign language)\n\nFor example, the escape sequence \\n corresponds to the newline character. Notice that the message function translates \\n into a literal new line, whereas the print function doesn’t:\n\nx = \"Hello\\nNick\"\n\nmessage(x)\n\nHello\nNick\n\nprint(x)\n\n[1] \"Hello\\nNick\"\n\n\nAs another example, suppose we want to put a literal quote in a string. We can either enclose the string in the other kind of quotes, or escape the quotes in the string:\n\nx = 'She said, \"Hi\"'\n\nmessage(x)\n\nShe said, \"Hi\"\n\ny = \"She said, \\\"Hi\\\"\"\n\nmessage(y)\n\nShe said, \"Hi\"\n\n\nSince escape sequences begin with backslash, we also need to use an escape sequence to write a literal backslash. The escape sequence for a literal backslash is two backslashes:\n\nx = \"\\\\\"\n\nmessage(x)\n\n\\\n\n\n\n\n\n\n\n\nSee also\n\n\n\nThere’s a complete list of escape sequences for R in the ?Quotes help file. Other programming languages also use escape sequences, and many of them are the same as in R.\n\n\n\n10.2.1 Raw Strings\nA raw string is a string where escape sequences are turned off. Raw strings are especially useful for writing regular expressions, which we’ll do later in this lesson.\nRaw strings begin with r\" and an opening delimiter (, [, or {. Raw strings end with a matching closing delimiter and quote. For example:\n\nx = r\"(quotes \" and backslashes \\)\"\n\nmessage(x)\n\nquotes \" and backslashes \\\n\n\nRaw strings were added to R in version 4.0 (April 2020), and won’t work correctly in older versions.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions</span>"
    ]
  },
  {
    "objectID": "chapters/10_strings-regex.html#character-encodings",
    "href": "chapters/10_strings-regex.html#character-encodings",
    "title": "10  Strings and Regular Expressions",
    "section": "10.3 Character Encodings",
    "text": "10.3 Character Encodings\nComputers store data as numbers. In order to store text on a computer, we have to agree on a character encoding, a system for mapping characters to numbers. For example, in ASCII, one of the most popular encodings in the United States, the character a maps to the number 97.\nMany different character encodings exist, and sharing text used to be an inconvenient process of asking or trying to guess the correct encoding. This was so inconvenient that in the 1980s, software engineers around the world united to create the Unicode standard. Unicode includes symbols for nearly all languages in use today, as well as emoji and many ancient languages (such as Egyptian hieroglyphs).\nUnicode maps characters to numbers, but unlike a character encoding, it doesn’t dictate how those numbers should be mapped to bytes (sequences of ones and zeroes). As a result, there are several different character encodings that support and are synonymous with Unicode. The most popular of these is UTF-8.\nIn R, we can write Unicode characters with the escape sequence \\U followed by the number for the character in base 16. For instance, the number for a in Unicode is 97 (the same as in ASCII). In base 16, 97 is 61. So we can write an a as:\n\nx = \"\\U61\" # or \"\\u61\"\n\nx\n\n[1] \"a\"\n\n\nUnicode escape sequences are usually only used for characters that are not easy to type. For example, the cat emoji is number 1f408 (in base 16) in Unicode. So the string \"\\U1f408\" is the cat emoji.\n\n\n\n\n\n\nNote\n\n\n\nBeing able to see printed Unicode characters also depends on whether the font your computer is using has a glyph (image representation) for that character. Many fonts are limited to a small number of languages. The NerdFont project patches fonts commonly used for programming so that they have better Unicode coverage. Using a font with good Unicode coverage is not essential, but it’s convenient if you expect to work with many different natural languages or love using emoji.\n\n\n\n10.3.1 Character Encodings in Text Files\nMost of the time, R will handle character encodings for you automatically. However, if you ever read or write a text file (including CSV and other formats) and the text looks like gibberish, it might be an encoding problem. This is especially true on Windows, the only modern operating system that does not (yet) use UTF-8 as the default encoding.\nEncoding problems when reading a file can usually be fixed by passing the encoding to the function doing the reading. For instance, the code to read a UTF-8 encoded CSV file on Windows is:\n\nread.csv(\"my_data.csv\", fileEncoding = \"UTF-8\")\n\nOther reader functions may use a different parameter to set the encoding, so always check the documentation. On computers where the native language is not set to English, it can also help to set R’s native language to English with Sys.setlocale(locale = \"English\").\nEncoding problems when writing a file are slightly more complicated to fix. See this blog post for thorough explanation.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions</span>"
    ]
  },
  {
    "objectID": "chapters/10_strings-regex.html#stringr-and-the-tidyverse",
    "href": "chapters/10_strings-regex.html#stringr-and-the-tidyverse",
    "title": "10  Strings and Regular Expressions",
    "section": "10.4 stringr and the tidyverse",
    "text": "10.4 stringr and the tidyverse\n\n10.4.1 The Tidyverse\nThe Tidyverse is a popular collection of packages for doing data science in R. The packages are made by many of the same people that make RStudio. They provide alternatives to R’s built-in tools for:\n\nManipulating strings (package stringr)\nMaking visualizations (package ggplot2)\nReading files (package readr)\nManipulating data frames (packages dplyr, tidyr, tibble)\nAnd more\n\nThink of the Tidyverse as a different dialect of R. Sometimes the syntax is different, and sometimes ideas are easier or harder to express concisely. Whether to use base R or the Tidyverse is mostly subjective. As a result, the Tidyverse is somewhat polarizing in the R community. It’s useful to be literate in both, since both are popular.\nOne advantage of the Tidyverse is that the packages are usually well-documented. For example, there are documentation websites and cheat sheets for most Tidyverse packages.\n\n\n10.4.2 stringr\nThe rest of this lesson uses stringr, the Tidyverse package for string processing. R also has built-in functions for string processing. The main advantage of stringr is that all of the functions use a common set of parameters, so they’re easier to learn and remember.\nThe first time you use stringr, you’ll have to install it with install.packages (the same as any other package). Then you can load the package with the library function:\n\n# install.packages(\"stringr\")\nlibrary(stringr)\n\nThe typical syntax of a stringr function is:\nstr_NAME(string, pattern, ...)\nWhere:\n\nNAME describes what the function does\nstring is the string to search within or transform\npattern is the pattern to search for\n... is additional, function-specific arguments\n\nFor example, the str_detect function detects whether the pattern appears within the string:\n\nstr_detect(\"hello\", \"el\")\n\n[1] TRUE\n\nstr_detect(\"hello\", \"ol\")\n\n[1] FALSE\n\n\nMost of the stringr functions are vectorized:\n\nstr_detect(c(\"hello\", \"goodbye\", \"lo\"), \"lo\")\n\n[1]  TRUE FALSE  TRUE\n\n\nThere are a lot of stringr functions. The remainder of this lesson focuses on three that are especially important, as well as some of their variants:\n\nstr_split_fixed\nstr_replace\nstr_match\n\n\n\n\n\n\n\nSee also\n\n\n\nYou can find a complete list of stringr functions with examples in the documentation or cheat sheet.\n\n\n\n10.4.2.1 Splitting Strings\nThe str_split function splits the string at each position that matches the pattern. The characters that match are thrown away.\nFor example, suppose we want to split a sentence into words. Since there’s a space between each word, we can use a space as the pattern:\n\nx = \"The students in this class are great!\"\n\nresult = str_split(x, \" \")\nresult\n\n[[1]]\n[1] \"The\"      \"students\" \"in\"       \"this\"     \"class\"    \"are\"      \"great!\"  \n\n\nThe str_split function always returns a list with one element for each input string. Here the list only has one element because x only has one element. We can get the first element with:\n\nresult[[1]]\n\n[1] \"The\"      \"students\" \"in\"       \"this\"     \"class\"    \"are\"      \"great!\"  \n\n\nWe have to use the double square bracket [[ operator here because x is a list (for a vector, we could use the single square bracket operator instead). Notice that in the printout for result, R gives us a hint that we should use [[ by printing [[1]].\nTo see why the function returns a list, consider what happens if we try to split two different sentences at once:\n\nx = c(x, \"Are you listening?\")\n\nresult = str_split(x, \" \")\nresult[[1]]\n\n[1] \"The\"      \"students\" \"in\"       \"this\"     \"class\"    \"are\"      \"great!\"  \n\nresult[[2]]\n\n[1] \"Are\"        \"you\"        \"listening?\"\n\n\nEach sentence has a different number of words, so the vectors in the result have different lengths. So a list is the only way to store both.\nThe str_split_fixed function is almost the same as str_split, but takes a third argument for the maximum number of splits to make. Because the number of splits is fixed, the function can return the result in a matrix instead of a list. For example:\n\nstr_split_fixed(x, \" \", 3)\n\n     [,1]  [,2]       [,3]                      \n[1,] \"The\" \"students\" \"in this class are great!\"\n[2,] \"Are\" \"you\"      \"listening?\"              \n\n\nThe str_split_fixed function is often more convenient than str_split because the nth piece of each input string is just the nth column of the result.\nFor example, suppose we want to get the area code from some phone numbers:\n\nphones = c(\"717-555-3421\", \"629-555-8902\", \"903-555-6781\")\nresult = str_split_fixed(phones, \"-\", 3)\n\nresult[, 1]\n\n[1] \"717\" \"629\" \"903\"\n\n\n\n\n10.4.2.2 Replacing Parts of Strings\nThe str_replace function replaces the pattern the first time it appears in the string. The replacement goes in the third argument.\nFor instance, suppose we want to change the word \"dog\" to \"cat\":\n\nx = c(\"dogs are great, dogs are fun\", \"dogs are fluffy\")\nstr_replace(x, \"dog\", \"cat\")\n\n[1] \"cats are great, dogs are fun\" \"cats are fluffy\"             \n\n\nThe str_replace_all function replaces the pattern every time it appears in the string:\n\nstr_replace_all(x, \"dog\", \"cat\")\n\n[1] \"cats are great, cats are fun\" \"cats are fluffy\"             \n\n\nWe can also use the str_replace and str_replace_all functions to delete part of a string by setting the replacement to the empty string \"\".\nFor example, suppose we want to delete the comma:\n\nstr_replace(x, \",\", \"\")\n\n[1] \"dogs are great dogs are fun\" \"dogs are fluffy\"            \n\n\nIn general, stringr functions with the _all suffix affect all matches. Functions without _all only affect the first match.\nWe’ll learn about str_match at the end of the next section.",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions</span>"
    ]
  },
  {
    "objectID": "chapters/10_strings-regex.html#regular-expressions",
    "href": "chapters/10_strings-regex.html#regular-expressions",
    "title": "10  Strings and Regular Expressions",
    "section": "10.5 Regular Expressions",
    "text": "10.5 Regular Expressions\nThe stringr functions (including the ones we just learned) use a special language called regular expressions or regex for the pattern. The regular expressions language is also used in many other programming languages besides R.\nA regular expression can describe a complicated pattern in just a few characters, because some characters, called metacharacters, have special meanings. Letters and numbers are never metacharacters. They’re always literal.\nHere are a few examples of metacharacters (we’ll look at examples in the subsequent sections):\n\n\n\nMetacharacter\nMeaning\n\n\n\n\n.\nany single character (wildcard)\n\n\n\\\nescape character (in both R and regex)\n\n\n^\nbeginning of string\n\n\n$\nend of string\n\n\n[ab]\n'a' or 'b'\n\n\n[^ab]\nany character except 'a' or 'b'\n\n\n?\nprevious character appears 0 or 1 times\n\n\n*\nprevious character appears 0 or more times\n\n\n+\nprevious character appears 1 or more times\n\n\n()\nmake a group\n\n\n\nMore metacharacters are listed on the stringr cheat sheet, or in ?regex.\nThe str_view function is especially helpful for testing regular expressions. It opens a browser window with the first match in the string highlighted. We’ll use it in the subsequent regex examples.\nThe RegExr website is also helpful for testing regular expressions; it provides an interactive interface where you can write regular expressions and see where they match a string.\n\n10.5.1 The Wildcard\nThe regex wildcard character is . and matches any single character.\nFor example:\n\nx = \"dog\"\nstr_view(x, \"d.g\")\n\n[1] │ &lt;dog&gt;\n\n\nBy default, regex searches from left to right:\n\nstr_view(x, \".\")\n\n[1] │ &lt;d&gt;&lt;o&gt;&lt;g&gt;\n\n\n\n\n10.5.2 Escape Sequences\nLike R, regular expressions can contain escape sequences that begin with a backslash. These are computed separately and after R escape sequences. The main use for escape sequences in regex is to turn a metacharacter into a literal character.\nFor example, suppose we want to match a literal dot .. The regex for a literal dot is \\.. Since backslashes in R strings have to be escaped, the R string for this regex is \"\\\\.. Then the regex works:\n\nstr_view(\"this.string\", \"\\\\.\")\n\n[1] │ this&lt;.&gt;string\n\n\nThe double backslash can be confusing, and it gets worse if we want to match a literal backslash. We have to escape the backslash in the regex (because backslash is the regex escape character) and then also have to escape the backslashes in R (because backslash is also the R escape character). So to match a single literal backslash in R, the code is:\n\nstr_view(\"this\\\\that\", \"\\\\\\\\\")\n\n[1] │ this&lt;\\&gt;that\n\n\nRaw strings are helpful here, because they make the backslash literal in R strings (but still not in regex). We can use raw strings to write the above as:\n\nstr_view(r\"(this\\that)\", r\"(\\\\)\")\n\n[1] │ this&lt;\\&gt;that\n\n\nYou can turn off regular expressions entirely in stringr with the fixed function:\n\nstr_view(x, fixed(\".\"))\n\nIt’s good to turn off regular expressions whenever you don’t need them, both to avoid mistakes and because they take longer to compute.\n\n\n10.5.3 Anchors\nBy default, a regex will match anywhere in the string. If you want to force a match at specific place, use an anchor.\nThe beginning of string anchor is ^. It marks the beginning of the string, but doesn’t count as a character in the match.\nFor example, suppose we want to match an a at the beginning of the string:\n\nx = c(\"abc\", \"cab\")\n\nstr_view(x, \"a\")\n\n[1] │ &lt;a&gt;bc\n[2] │ c&lt;a&gt;b\n\nstr_view(x, \"^a\")\n\n[1] │ &lt;a&gt;bc\n\n\nIt doesn’t make sense to put characters before ^, since no characters can come before the beginning of the string.\nLikewise, the end of string anchor is $. It marks the end of the string, but doesn’t count as a character in the match.\n\n\n10.5.4 Character Classes\nIn regex, square brackets [ ] create a character class. A character class counts as one character, but that character can be any of the characters inside the square brackets. The square brackets themselves don’t count as characters in the match.\nFor example, suppose we want to match a c followed by either a or t:\n\nx = c(\"ca\", \"ct\", \"cat\", \"cta\")\n\nstr_view(x, \"c[ta]\")\n\n[1] │ &lt;ca&gt;\n[2] │ &lt;ct&gt;\n[3] │ &lt;ca&gt;t\n[4] │ &lt;ct&gt;a\n\n\nYou can use a dash - in a character class to create a range. For example, to match letters p through z:\n\nstr_view(x, \"c[p-z]\")\n\n[2] │ &lt;ct&gt;\n[4] │ &lt;ct&gt;a\n\n\nRanges also work with numbers and capital letters. To match a literal dash, place the dash at the end of the character class (instead of between two other characters), as in [abc-].\nMost metacharacters are literal when inside a character class. For example, [.] matches a literal dot.\nA hat ^ at the beginning of the character class negates the class. So for example, [^abc] matches any one character except for a, b, or c:\n\nstr_view(\"abcdef\", \"[^abc]\")\n\n[1] │ abc&lt;d&gt;&lt;e&gt;&lt;f&gt;\n\n\n\n\n10.5.5 Quantifiers\nQuantifiers are metacharacters that affect how many times the preceding character must appear in a match. The quantifier itself doesn’t count as a character in the match.\nFor example, the ? quantifier means the preceding character can appear 0 or 1 times. In other words, ? makes the preceding character optional.\nFor example:\n\nx = c(\"abc\", \"ab\", \"ac\", \"abbc\")\n\nstr_view(x, \"ab?c\")\n\n[1] │ &lt;abc&gt;\n[3] │ &lt;ac&gt;\n\n\nThe * quantifier means the preceding character can appear 0 or more times. In other words, * means the preceding character can appear any number of times or not at all.\n\nstr_view(x, \"ab*c\")\n\n[1] │ &lt;abc&gt;\n[3] │ &lt;ac&gt;\n[4] │ &lt;abbc&gt;\n\n\nThe + quantifier means the preceding character must appear 1 or more times.\nQuantifiers are greedy, meaning they always match as many characters as possible.\n\n\n10.5.6 Groups\nIn regex, parentheses create a group. Groups can be affected by quantifiers, making it possible to repeat a pattern (rather than just a character). The parentheses themselves don’t count as characters in the match.\nFor example:\n\nx = c(\"cats, dogs, and frogs\", \"cats and frogs\")\n\nstr_view(x, \"cats(, dogs,)? and frogs\")\n\n[1] │ &lt;cats, dogs, and frogs&gt;\n[2] │ &lt;cats and frogs&gt;\n\n\n\n\n10.5.7 Extracting Matches\nGroups are especially useful with the stringr functions str_match and str_match_all.\nThe str_match function extracts the overall match to the pattern, as well as the match to each group. So you can use str_match to split a string in more complicated ways than str_split, or to extract specific pieces of a string.\nFor example, suppose we want to split an email address:\n\nstr_match(\"naulle@ucdavis.edu\", \"([^@]+)@(.+)[.](.+)\")\n\n     [,1]                 [,2]     [,3]      [,4] \n[1,] \"naulle@ucdavis.edu\" \"naulle\" \"ucdavis\" \"edu\"",
    "crumbs": [
      "Fundamentals",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Strings and Regular Expressions</span>"
    ]
  }
]